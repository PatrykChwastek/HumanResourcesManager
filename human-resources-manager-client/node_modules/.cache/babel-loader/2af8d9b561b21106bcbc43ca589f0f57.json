{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Komputer\\\\source\\\\repos\\\\HumanResourcesManager\\\\human-resources-manager-client\\\\src\\\\Components\\\\UserTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport APIURL from '../Services/Globals';\nimport { getCurrentUser } from '../Services/AuthService';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport CardContent from '@material-ui/core/CardContent';\nconst useStyles = makeStyles(theme => ({\n  column: {\n    margin: \"8px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  }\n}));\n\nconst UserTasks = () => {\n  _s();\n\n  const classes = useStyles();\n  const [columns, setColumns] = useState({\n    ['completed']: {\n      columnId: \"completed\",\n      name: \"Completed\",\n      statusName: \"Completed\",\n      items: []\n    },\n    ['requested']: {\n      columnId: \"requested\",\n      name: \"Requested\",\n      statusName: \"Requested\",\n      items: []\n    },\n    ['inprogress']: {\n      columnId: \"inprogress\",\n      name: \"In Progress\",\n      statusName: \"In-Progress\",\n      items: []\n    }\n  });\n  useEffect(() => {\n    const userID = getCurrentUser().userDetails.employeeDTO.id;\n    let completed = [];\n    let requested = [];\n    let progress = [];\n    getTasks(1, 10, userID).then(data => {\n      data.items.forEach(item => {\n        switch (item.status) {\n          case \"Requested\":\n            requested.push(item);\n            break;\n\n          case \"Completed\":\n            completed.push(item);\n            break;\n\n          case \"In-Progress\":\n            progress.push(item);\n            break;\n        }\n      });\n      adddItemsToColumn(completed, requested, progress);\n    });\n    ;\n  }, []);\n\n  const adddItemsToColumn = (com, req, prog) => {\n    const completedCol = columns.completed;\n    const requestedCol = columns.requested;\n    const progressCol = columns.inprogress;\n    setColumns({ ...columns,\n      [completedCol.columnId]: { ...completedCol,\n        items: com\n      },\n      [requestedCol.columnId]: { ...requestedCol,\n        items: req\n      },\n      [progressCol.columnId]: { ...progressCol,\n        items: prog\n      }\n    });\n  };\n\n  const getTasks = async (page, size, employeeid, status) => {\n    const requestOptions = {\n      method: 'Get',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    return await fetch(APIURL + `tasks?page=${page}&size=${size}&employeeid=${employeeid}`, requestOptions).then(response => {\n      if (response.ok) return response.json();else return Promise.reject();\n    }).then(data => {\n      return data;\n    });\n  };\n\n  const changeTaskStatus = async (taskID, status) => {\n    const requestOptions = {\n      method: 'Put',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    return await fetch(APIURL + `tasks?id=${taskID}&status=${status}`, requestOptions).then(response => {\n      if (response.ok) return response.json();else return Promise.reject();\n    }).then(data => {\n      return data;\n    });\n  };\n\n  const onDragEnd = (result, columns, setColumns) => {\n    if (!result.destination) return;\n    const {\n      source,\n      destination\n    } = result;\n\n    if (source.droppableId !== destination.droppableId) {\n      const newStatus = columns[destination.droppableId].statusName;\n      const sourceColumn = columns[source.droppableId];\n      const destColumn = columns[destination.droppableId];\n      const sourceItems = [...sourceColumn.items];\n      const destItems = [...destColumn.items];\n      const [changed] = sourceItems.splice(source.index, 1);\n      changed.status = newStatus;\n      destItems.splice(destItems.length, 0, changed); //destItems.splice(destination.index, 0, removed);\n\n      changeTaskStatus(changed.id, changed.status).then();\n      setColumns({ ...columns,\n        [source.droppableId]: { ...sourceColumn,\n          items: sourceItems\n        },\n        [destination.droppableId]: { ...destColumn,\n          items: destItems\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEnd(result, columns, setColumns),\n      children: Object.entries(columns).map(([columnId, column], index) => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          className: classes.column,\n          children: [/*#__PURE__*/_jsxDEV(CardHeader, {\n            title: column.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: columnId,\n            children: (provided, snapshot) => {\n              return /*#__PURE__*/_jsxDEV(CardContent, { ...provided.droppableProps,\n                ref: provided.innerRef,\n                style: {\n                  background: snapshot.isDraggingOver ? \"lightblue\" : \"#424242\",\n                  padding: \"4\",\n                  width: \"250\",\n                  minHeight: \"850\"\n                },\n                children: [column.items.map((item, index) => {\n                  return /*#__PURE__*/_jsxDEV(Draggable, {\n                    draggableId: String(item.id),\n                    index: index,\n                    children: (provided, snapshot) => {\n                      return /*#__PURE__*/_jsxDEV(\"div\", {\n                        ref: provided.innerRef,\n                        ...provided.draggableProps,\n                        ...provided.dragHandleProps,\n                        style: {\n                          userSelect: \"none\",\n                          padding: 16,\n                          margin: \"0 0 8px 0\",\n                          minHeight: \"50px\",\n                          backgroundColor: snapshot.isDragging ? \"#263B4A\" : \"#456C86\",\n                          color: \"white\",\n                          ...provided.draggableProps.style\n                        },\n                        children: [item.name, item.status]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 190,\n                        columnNumber: 65\n                      }, this);\n                    }\n                  }, item.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 183,\n                    columnNumber: 53\n                  }, this);\n                }), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 170,\n                columnNumber: 41\n              }, this);\n            }\n          }, columnId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 29\n          }, this)]\n        }, columnId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 154,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserTasks, \"GB1EmAOjzk/WU0E7/iIUHNY7+gM=\", false, function () {\n  return [useStyles];\n});\n\n_c = UserTasks;\nexport default UserTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserTasks\");","map":{"version":3,"sources":["C:/Users/Komputer/source/repos/HumanResourcesManager/human-resources-manager-client/src/Components/UserTasks.js"],"names":["React","useEffect","useState","DragDropContext","Draggable","Droppable","APIURL","getCurrentUser","makeStyles","Card","CardHeader","CardContent","useStyles","theme","column","margin","display","flexDirection","alignItems","UserTasks","classes","columns","setColumns","columnId","name","statusName","items","userID","userDetails","employeeDTO","id","completed","requested","progress","getTasks","then","data","forEach","item","status","push","adddItemsToColumn","com","req","prog","completedCol","requestedCol","progressCol","inprogress","page","size","employeeid","requestOptions","method","headers","fetch","response","ok","json","Promise","reject","changeTaskStatus","taskID","onDragEnd","result","destination","source","droppableId","newStatus","sourceColumn","destColumn","sourceItems","destItems","changed","splice","index","length","justifyContent","height","Object","entries","map","provided","snapshot","droppableProps","innerRef","background","isDraggingOver","padding","width","minHeight","String","draggableProps","dragHandleProps","userSelect","backgroundColor","isDragging","color","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport APIURL from '../Services/Globals';\r\nimport { getCurrentUser } from '../Services/AuthService';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CardContent from '@material-ui/core/CardContent';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    column: {\r\n        margin: \"8px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n}));\r\n\r\nconst UserTasks = () => {\r\n    const classes = useStyles();\r\n    const [columns, setColumns] = useState({\r\n        ['completed']: {\r\n            columnId: \"completed\",\r\n            name: \"Completed\",\r\n            statusName: \"Completed\",\r\n            items: []\r\n        },\r\n        ['requested']: {\r\n            columnId: \"requested\",\r\n            name: \"Requested\",\r\n            statusName: \"Requested\",\r\n            items: []\r\n        },\r\n        ['inprogress']: {\r\n            columnId: \"inprogress\",\r\n            name: \"In Progress\",\r\n            statusName: \"In-Progress\",\r\n            items: []\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        const userID = getCurrentUser().userDetails.employeeDTO.id;\r\n        let completed = [];\r\n        let requested = [];\r\n        let progress = [];\r\n        getTasks(1, 10, userID,).then((data) => {\r\n            data.items.forEach(item => {\r\n                switch (item.status) {\r\n                    case \"Requested\":\r\n                        requested.push(item)\r\n                        break;\r\n                    case \"Completed\":\r\n                        completed.push(item)\r\n                        break;\r\n                    case \"In-Progress\":\r\n                        progress.push(item)\r\n                        break;\r\n                }\r\n            });\r\n            adddItemsToColumn(completed, requested, progress);\r\n        });;\r\n    }, []);\r\n\r\n    const adddItemsToColumn = (com, req, prog) => {\r\n        const completedCol = columns.completed;\r\n        const requestedCol = columns.requested;\r\n        const progressCol = columns.inprogress;\r\n        setColumns({\r\n            ...columns, [completedCol.columnId]: {\r\n                ...completedCol,\r\n                items: com\r\n            }, [requestedCol.columnId]: {\r\n                ...requestedCol,\r\n                items: req\r\n            }, [progressCol.columnId]: {\r\n                ...progressCol,\r\n                items: prog\r\n            },\r\n        })\r\n    }\r\n\r\n    const getTasks = async (page, size, employeeid, status) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        return await fetch(APIURL +\r\n            `tasks?page=${page}&size=${size}&employeeid=${employeeid}`,\r\n            requestOptions\r\n        ).then((response) => {\r\n            if (response.ok)\r\n                return response.json();\r\n            else\r\n                return Promise.reject();\r\n        })\r\n            .then(data => {\r\n                return data\r\n            })\r\n    }\r\n\r\n    const changeTaskStatus = async (taskID, status) => {\r\n        const requestOptions = {\r\n            method: 'Put',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        return await fetch(APIURL +\r\n            `tasks?id=${taskID}&status=${status}`,\r\n            requestOptions\r\n        ).then((response) => {\r\n            if (response.ok)\r\n                return response.json();\r\n            else\r\n                return Promise.reject();\r\n        })\r\n            .then(data => {\r\n                return data\r\n            })\r\n    }\r\n\r\n    const onDragEnd = (result, columns, setColumns) => {\r\n        if (!result.destination) return;\r\n        const { source, destination } = result;\r\n        if (source.droppableId !== destination.droppableId) {\r\n            const newStatus = columns[destination.droppableId].statusName;\r\n            const sourceColumn = columns[source.droppableId];\r\n            const destColumn = columns[destination.droppableId];\r\n            const sourceItems = [...sourceColumn.items];\r\n            const destItems = [...destColumn.items];\r\n\r\n            const [changed] = sourceItems.splice(source.index, 1);\r\n            changed.status = newStatus;\r\n            destItems.splice(destItems.length, 0, changed);\r\n            //destItems.splice(destination.index, 0, removed);\r\n\r\n            changeTaskStatus(changed.id, changed.status).then();\r\n\r\n            setColumns({\r\n                ...columns,\r\n                [source.droppableId]: {\r\n                    ...sourceColumn,\r\n                    items: sourceItems\r\n                },\r\n                [destination.droppableId]: {\r\n                    ...destColumn,\r\n                    items: destItems\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\r\n            <DragDropContext\r\n                onDragEnd={(result) => onDragEnd(result, columns, setColumns)}\r\n            >\r\n                {Object.entries(columns).map(([columnId, column], index) => {\r\n                    return (\r\n                        <Card className={classes.column}\r\n\r\n                            key={columnId}\r\n                        >\r\n                            <CardHeader\r\n                                title={column.name}\r\n                            />\r\n                            <Droppable droppableId={columnId} key={columnId}>\r\n                                {(provided, snapshot) => {\r\n                                    return (\r\n                                        <CardContent {...provided.droppableProps}\r\n                                            ref={provided.innerRef}\r\n                                            style={{\r\n                                                background: snapshot.isDraggingOver\r\n                                                    ? \"lightblue\"\r\n                                                    : \"#424242\",\r\n                                                padding: \"4\",\r\n                                                width: \"250\",\r\n                                                minHeight: \"850\"\r\n                                            }}\r\n                                        >\r\n                                            {column.items.map((item, index) => {\r\n                                                return (\r\n                                                    <Draggable\r\n                                                        key={item.id}\r\n                                                        draggableId={String(item.id)}\r\n                                                        index={index}\r\n                                                    >\r\n                                                        {(provided, snapshot) => {\r\n                                                            return (\r\n                                                                <div\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    {...provided.dragHandleProps}\r\n                                                                    style={{\r\n                                                                        userSelect: \"none\",\r\n                                                                        padding: 16,\r\n                                                                        margin: \"0 0 8px 0\",\r\n                                                                        minHeight: \"50px\",\r\n                                                                        backgroundColor: snapshot.isDragging\r\n                                                                            ? \"#263B4A\"\r\n                                                                            : \"#456C86\",\r\n                                                                        color: \"white\",\r\n                                                                        ...provided.draggableProps.style\r\n                                                                    }}\r\n                                                                >\r\n                                                                    {item.name}\r\n                                                                    {item.status}\r\n                                                                </div>\r\n                                                            );\r\n                                                        }}\r\n                                                    </Draggable>\r\n                                                );\r\n                                            })}\r\n                                            {provided.placeholder}\r\n                                        </CardContent>\r\n                                    );\r\n                                }}\r\n                            </Droppable>\r\n                        </Card>\r\n                    );\r\n                })}\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n}\r\nexport default UserTasks;"]},"metadata":{},"sourceType":"module"}