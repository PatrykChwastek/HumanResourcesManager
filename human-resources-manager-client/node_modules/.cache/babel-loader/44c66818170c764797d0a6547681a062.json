{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Komputer\\\\source\\\\repos\\\\HumanResourcesManager\\\\human-resources-manager-client\\\\src\\\\Components\\\\UserTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport APIURL from '../Services/Globals';\nimport { getCurrentUser } from '../Services/AuthService';\n\nconst UserTasks = () => {\n  _s();\n\n  const [columns, setColumns] = useState({\n    ['completed']: {\n      columnId: \"completed\",\n      name: \"Completed\",\n      items: []\n    },\n    ['requested']: {\n      columnId: \"requested\",\n      name: \"Requested\",\n      items: []\n    },\n    ['inprogress']: {\n      columnId: \"inprogress\",\n      name: \"In Progress\",\n      items: []\n    }\n  });\n  useEffect(() => {\n    const userID = getCurrentUser().userDetails.employeeDTO.id;\n    let completed = [];\n    let requested = [];\n    let progress = [];\n    getTasks(1, 10, userID).then(data => {\n      data.items.forEach(item => {\n        switch (item.status) {\n          case \"Requested\":\n            requested.push(item);\n            break;\n\n          case \"Completed\":\n            completed.push(item);\n            break;\n\n          case \"In-Progress\":\n            progress.push(item);\n            break;\n        }\n      });\n      console.log(completed);\n      console.log(requested);\n      adddItemsToColumn(completed, requested, progress); // adddItemsToColumn(columns.requested, requested);\n    });\n    ;\n  }, []);\n\n  const adddItemsToColumn = (com, req, prog) => {\n    const completedCol = columns.completed;\n    const requestedCol = columns.requested;\n    const progressCol = columns.inprogress;\n    setColumns({ ...columns,\n      [completedCol.columnId]: { ...completedCol,\n        items: com\n      },\n      [requestedCol.columnId]: { ...requestedCol,\n        items: req\n      },\n      [progressCol.columnId]: { ...progressCol,\n        items: prog\n      }\n    });\n  };\n\n  const getTasks = async (page, size, employeeid, status) => {\n    const requestOptions = {\n      method: 'Get',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    return await fetch(APIURL + `tasks?page=${page}&size=${size}&employeeid=${employeeid}`, requestOptions).then(response => {\n      if (response.ok) return response.json();else return Promise.reject();\n    }).then(data => {\n      return data;\n    });\n  };\n\n  const changeTaskStatus = async (task, status) => {\n    const requestOptions = {\n      method: 'Put',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    return await fetch(APIURL + `tasks?id=${task.id}&status=${status}`, requestOptions).then(response => {\n      if (response.ok) return response.json();else return Promise.reject();\n    }).then(data => {\n      return data;\n    });\n  };\n\n  const onDragEnd = (result, columns, setColumns) => {\n    if (!result.destination) return;\n    const {\n      source,\n      destination\n    } = result;\n\n    if (source.droppableId !== destination.droppableId) {\n      const sourceColumn = columns[source.droppableId];\n      const destColumn = columns[destination.droppableId];\n      const sourceItems = [...sourceColumn.items];\n      const destItems = [...destColumn.items];\n      console.log(source);\n      const [removed] = sourceItems.splice(source.index, 1); //destItems.splice(destination.index, 0, removed);\n\n      destItems.splice(destItems.length, 0, removed);\n      setColumns({ ...columns,\n        [source.droppableId]: { ...sourceColumn,\n          items: sourceItems\n        },\n        [destination.droppableId]: { ...destColumn,\n          items: destItems\n        }\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEnd(result, columns, setColumns),\n      children: Object.entries(columns).map(([columnId, column], index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: column.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              margin: 8\n            },\n            children: /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: columnId,\n              children: (provided, snapshot) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n                  ref: provided.innerRef,\n                  style: {\n                    background: snapshot.isDraggingOver ? \"lightblue\" : \"lightgrey\",\n                    padding: 4,\n                    width: 250,\n                    minHeight: 500\n                  },\n                  children: [column.items.map((item, index) => {\n                    return /*#__PURE__*/_jsxDEV(Draggable, {\n                      draggableId: String(item.id),\n                      index: index,\n                      children: (provided, snapshot) => {\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          ref: provided.innerRef,\n                          ...provided.draggableProps,\n                          ...provided.dragHandleProps,\n                          style: {\n                            userSelect: \"none\",\n                            padding: 16,\n                            margin: \"0 0 8px 0\",\n                            minHeight: \"50px\",\n                            backgroundColor: snapshot.isDragging ? \"#263B4A\" : \"#456C86\",\n                            color: \"white\",\n                            ...provided.draggableProps.style\n                          },\n                          children: item.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 180,\n                          columnNumber: 69\n                        }, this);\n                      }\n                    }, item.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 173,\n                      columnNumber: 57\n                    }, this);\n                  }), provided.placeholder]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 159,\n                  columnNumber: 45\n                }, this);\n              }\n            }, columnId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 29\n          }, this)]\n        }, columnId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 140,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserTasks, \"os9eus+ADnKX6BNSDl2kA1boONk=\");\n\n_c = UserTasks;\nexport default UserTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserTasks\");","map":{"version":3,"sources":["C:/Users/Komputer/source/repos/HumanResourcesManager/human-resources-manager-client/src/Components/UserTasks.js"],"names":["React","useEffect","useState","DragDropContext","Draggable","Droppable","APIURL","getCurrentUser","UserTasks","columns","setColumns","columnId","name","items","userID","userDetails","employeeDTO","id","completed","requested","progress","getTasks","then","data","forEach","item","status","push","console","log","adddItemsToColumn","com","req","prog","completedCol","requestedCol","progressCol","inprogress","page","size","employeeid","requestOptions","method","headers","fetch","response","ok","json","Promise","reject","changeTaskStatus","task","onDragEnd","result","destination","source","droppableId","sourceColumn","destColumn","sourceItems","destItems","removed","splice","index","length","display","justifyContent","height","Object","entries","map","column","flexDirection","alignItems","margin","provided","snapshot","droppableProps","innerRef","background","isDraggingOver","padding","width","minHeight","String","draggableProps","dragHandleProps","userSelect","backgroundColor","isDragging","color","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport APIURL from '../Services/Globals';\r\nimport { getCurrentUser } from '../Services/AuthService';\r\n\r\n\r\n\r\nconst UserTasks = () => {\r\n    const [columns, setColumns] = useState({\r\n        ['completed']: {\r\n            columnId: \"completed\",\r\n            name: \"Completed\",\r\n            items: []\r\n        },\r\n        ['requested']: {\r\n            columnId: \"requested\",\r\n            name: \"Requested\",\r\n            items: []\r\n        },\r\n        ['inprogress']: {\r\n            columnId: \"inprogress\",\r\n            name: \"In Progress\",\r\n            items: []\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        const userID = getCurrentUser().userDetails.employeeDTO.id;\r\n        let completed = [];\r\n        let requested = [];\r\n        let progress = [];\r\n        getTasks(1, 10, userID,).then((data) => {\r\n            data.items.forEach(item => {\r\n                switch (item.status) {\r\n                    case \"Requested\":\r\n                        requested.push(item)\r\n                        break;\r\n                    case \"Completed\":\r\n                        completed.push(item)\r\n                        break;\r\n                    case \"In-Progress\":\r\n                        progress.push(item)\r\n                        break;\r\n                }\r\n            });\r\n            console.log(completed);\r\n            console.log(requested);\r\n\r\n            adddItemsToColumn(completed, requested, progress);\r\n            // adddItemsToColumn(columns.requested, requested);\r\n        });;\r\n    }, []);\r\n\r\n    const adddItemsToColumn = (com, req, prog) => {\r\n        const completedCol = columns.completed;\r\n        const requestedCol = columns.requested;\r\n        const progressCol = columns.inprogress;\r\n        setColumns({\r\n            ...columns, [completedCol.columnId]: {\r\n                ...completedCol,\r\n                items: com\r\n            }, [requestedCol.columnId]: {\r\n                ...requestedCol,\r\n                items: req\r\n            }, [progressCol.columnId]: {\r\n                ...progressCol,\r\n                items: prog\r\n            },\r\n        })\r\n    }\r\n\r\n    const getTasks = async (page, size, employeeid, status) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        return await fetch(APIURL +\r\n            `tasks?page=${page}&size=${size}&employeeid=${employeeid}`,\r\n            requestOptions\r\n        ).then((response) => {\r\n            if (response.ok)\r\n                return response.json();\r\n            else\r\n                return Promise.reject();\r\n        })\r\n            .then(data => {\r\n                return data\r\n            })\r\n    }\r\n\r\n    const changeTaskStatus = async (task, status) => {\r\n        const requestOptions = {\r\n            method: 'Put',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        return await fetch(APIURL +\r\n            `tasks?id=${task.id}&status=${status}`,\r\n            requestOptions\r\n        ).then((response) => {\r\n            if (response.ok)\r\n                return response.json();\r\n            else\r\n                return Promise.reject();\r\n        })\r\n            .then(data => {\r\n                return data\r\n            })\r\n    }\r\n\r\n    const onDragEnd = (result, columns, setColumns) => {\r\n        if (!result.destination) return;\r\n        const { source, destination } = result;\r\n        if (source.droppableId !== destination.droppableId) {\r\n\r\n\r\n            const sourceColumn = columns[source.droppableId];\r\n            const destColumn = columns[destination.droppableId];\r\n            const sourceItems = [...sourceColumn.items];\r\n            const destItems = [...destColumn.items];\r\n            console.log(source);\r\n            const [removed] = sourceItems.splice(source.index, 1);\r\n\r\n            //destItems.splice(destination.index, 0, removed);\r\n            destItems.splice(destItems.length, 0, removed);\r\n            setColumns({\r\n                ...columns,\r\n                [source.droppableId]: {\r\n                    ...sourceColumn,\r\n                    items: sourceItems\r\n                },\r\n                [destination.droppableId]: {\r\n                    ...destColumn,\r\n                    items: destItems\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\r\n            <DragDropContext\r\n                onDragEnd={(result) => onDragEnd(result, columns, setColumns)}\r\n            >\r\n                {Object.entries(columns).map(([columnId, column], index) => {\r\n                    return (\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"column\",\r\n                                alignItems: \"center\"\r\n                            }}\r\n                            key={columnId}\r\n                        >\r\n                            <h2>{column.name}</h2>\r\n                            <div style={{ margin: 8 }}>\r\n                                <Droppable droppableId={columnId} key={columnId}>\r\n                                    {(provided, snapshot) => {\r\n                                        return (\r\n                                            <div\r\n                                                {...provided.droppableProps}\r\n                                                ref={provided.innerRef}\r\n                                                style={{\r\n                                                    background: snapshot.isDraggingOver\r\n                                                        ? \"lightblue\"\r\n                                                        : \"lightgrey\",\r\n                                                    padding: 4,\r\n                                                    width: 250,\r\n                                                    minHeight: 500\r\n                                                }}\r\n                                            >\r\n                                                {column.items.map((item, index) => {\r\n                                                    return (\r\n                                                        <Draggable\r\n                                                            key={item.id}\r\n                                                            draggableId={String(item.id)}\r\n                                                            index={index}\r\n                                                        >\r\n                                                            {(provided, snapshot) => {\r\n                                                                return (\r\n                                                                    <div\r\n                                                                        ref={provided.innerRef}\r\n                                                                        {...provided.draggableProps}\r\n                                                                        {...provided.dragHandleProps}\r\n                                                                        style={{\r\n                                                                            userSelect: \"none\",\r\n                                                                            padding: 16,\r\n                                                                            margin: \"0 0 8px 0\",\r\n                                                                            minHeight: \"50px\",\r\n                                                                            backgroundColor: snapshot.isDragging\r\n                                                                                ? \"#263B4A\"\r\n                                                                                : \"#456C86\",\r\n                                                                            color: \"white\",\r\n                                                                            ...provided.draggableProps.style\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {item.name}\r\n                                                                    </div>\r\n                                                                );\r\n                                                            }}\r\n                                                        </Draggable>\r\n                                                    );\r\n                                                })}\r\n                                                {provided.placeholder}\r\n                                            </div>\r\n                                        );\r\n                                    }}\r\n                                </Droppable>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n}\r\nexport default UserTasks;"]},"metadata":{},"sourceType":"module"}