{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Komputer\\\\source\\\\repos\\\\HumanResourcesManager\\\\human-resources-manager-client\\\\src\\\\Components\\\\Tasks\\\\TasksList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport APIURL from '../../Services/Globals';\nimport { getCurrentUser } from '../../Services/AuthService';\nimport moment from \"moment\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getTasks, changeTaskStatus } from \"../../Services/TasksService\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport Divider from '@material-ui/core/Divider';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\nimport Grow from '@material-ui/core/Grow';\nimport Paper from '@material-ui/core/Paper';\nimport Popper from '@material-ui/core/Popper';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport MenuList from '@material-ui/core/MenuList';\nconst useStyles = makeStyles(theme => ({\n  tasksContainer: {\n    margin: '0 auto',\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  listComponent: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    color: 'white',\n    boxShadow: theme.shadows[2],\n    borderRadius: '3px'\n  },\n  tasksDetailsCol: {\n    margin: \"8px\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  title: {\n    color: theme.palette.text.primary,\n    textAlign: 'center',\n    padding: '8px',\n    marginBottom: '2px',\n    backgroundColor: theme.palette.primary.main,\n    boxShadow: theme.shadows[2],\n    width: '100%'\n  },\n  statusContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    margin: '4px',\n    marginLeft: '15px'\n  },\n  chipContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignContent: 'space-around',\n    alignItems: 'stretch',\n    flexwrap: 'nowrap',\n    justifyContent: 'space-evenly'\n  },\n  timeChip: {\n    margin: \"2px\",\n    boxShadow: theme.shadows[2],\n    fontSize: \"12px\",\n    fontWeight: \"550\"\n  },\n  subtaskAccordion: {\n    backgroundColor: '#bdbdbd',\n    color: \"black\",\n    marginTop: \"8px\",\n    marginBottom: '4px',\n    borderRadius: '4px',\n    padding: '0px',\n    '&::before': {\n      height: 0\n    }\n  },\n  buttonSection: {\n    display: 'grid',\n    padding: '16px',\n    marginTop: 'auto'\n  }\n}));\nconst taskStatusAll = ['Compleated', 'Reqested', 'In-Progress'];\nconst allowedStatuses = taskStatusAll;\n\nconst TasksList = () => {\n  _s();\n\n  const classes = useStyles();\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [tasks, setTasks] = useState([]);\n  const [expandedSubTask, setExpandedSubTask] = useState('');\n  const [openStatusSel, setOpenStatusSel] = useState(false);\n  const [statusSelIndex, setStatusSelIndex] = React.useState(1);\n  const anchorRef = React.useRef(null);\n  useEffect(() => {\n    getTasks(1, 10, 12).then(data => {\n      setTasks(data.items);\n    });\n  }, []);\n\n  const handleListItemClick = (event, index) => {\n    setSelectedIndex(index);\n  };\n\n  const handleSubTaskExpand = taskId => (event, newExpanded) => {\n    setExpandedSubTask(newExpanded ? taskId : false);\n  };\n\n  const hendleChangeStatus = () => {\n    changeTaskStatus(tasks[selectedIndex].id, allowedStatuses[statusSelIndex]).then(d => {\n      console.log(d);\n    });\n  };\n\n  const handleMenuItemClick = (event, index) => {\n    setStatusSelIndex(index);\n    setOpenStatusSel(false);\n  };\n\n  const handleStatSellToggle = () => {\n    setOpenStatusSel(prevOpen => !prevOpen);\n  };\n\n  const handleStatSellClose = event => {\n    if (anchorRef.current && anchorRef.current.contains(event.target)) {\n      return;\n    }\n\n    setOpenStatusSel(false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tasks.length === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.tasksContainer,\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        component: \"nav\",\n        className: classes.listComponent,\n        children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            selected: selectedIndex === index,\n            onClick: event => handleListItemClick(event, index),\n            children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: task.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              label: task.status,\n              style: {\n                boxShadow: 'rgb(0 0 0 / 20%) 0px 0px 1px -2px, rgb(0 0 0 / 14%) 0px 1px 2px 0px, rgb(0 0 0 / 12%) 0px 0px 5px 0px',\n                fontSize: \"12px\",\n                fontWeight: \"550\",\n                padding: \"5px\",\n                minWidth: '92px',\n                color: task.status === \"In-Progress\" ? \"white\" : \"black\",\n                background: task.status === \"In-Progress\" ? \"rgb(56 81 216)\" : task.status === \"Requested\" ? \"rgb(231 170 35)\" : \"rgb(0 158 7)\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            variant: \"inset\",\n            style: {\n              width: \"100%\",\n              margin: \"0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 174,\n            columnNumber: 33\n          }, this)]\n        }, task.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.tasksDetailsCol,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.title,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            noWrap: true,\n            variant: \"h5\",\n            children: tasks[selectedIndex].name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.statusContainer,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: tasks[selectedIndex].status,\n            style: {\n              boxShadow: '0px 3px 1px -2px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)',\n              fontSize: \"14px\",\n              fontWeight: \"550\",\n              margin: \"2px\",\n              marginLeft: \"10px\",\n              marginRight: \"10px\",\n              width: \"99%\",\n              color: tasks[selectedIndex].status === \"In-Progress\" ? \"white\" : \"black\",\n              background: tasks[selectedIndex].status === \"In-Progress\" ? \"rgb(56 81 216)\" : tasks[selectedIndex].status === \"Requested\" ? \"rgb(231 170 35)\" : \"rgb(0 158 7)\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          style: {\n            paddingTop: 0\n          },\n          children: [/*#__PURE__*/_jsxDEV(Divider, {\n            variant: \"inset\",\n            style: {\n              width: \"100%\",\n              margin: \"12px\",\n              marginLeft: \"0\",\n              marginTop: '2px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.chipContainer,\n            children: [/*#__PURE__*/_jsxDEV(Chip, {\n              className: classes.timeChip,\n              label: \"Start: \" + moment(tasks[selectedIndex].startTime).format(\"YYYY-MM-DD\"),\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 211,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              className: classes.timeChip,\n              label: \"Deadline: \" + moment(tasks[selectedIndex].deadline).format(\"YYYY-MM-DD\"),\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 210,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            variant: \"inset\",\n            style: {\n              width: \"100%\",\n              margin: \"12px\",\n              marginLeft: \"0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 222,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"subtitle1\",\n            children: tasks[selectedIndex].description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 224,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            variant: \"inset\",\n            style: {\n              width: \"100%\",\n              margin: \"12px\",\n              marginLeft: \"0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 227,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            noWrap: true,\n            variant: \"subtitle1\",\n            children: \"Subtasks:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 29\n          }, this), tasks[selectedIndex].subtasks.map((subtask, index) => /*#__PURE__*/_jsxDEV(Accordion, {\n            expanded: expandedSubTask === subtask.id,\n            onChange: handleSubTaskExpand(subtask.id),\n            className: classes.subtaskAccordion,\n            children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n              expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n                style: {\n                  color: \"black\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 53\n              }, this),\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                children: subtask.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 243,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 240,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n              children: subtask.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 37\n            }, this)]\n          }, subtask.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 234,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.buttonSection,\n          children: [/*#__PURE__*/_jsxDEV(Divider, {\n            variant: \"inset\",\n            style: {\n              width: \"100%\",\n              margin: \"12px\",\n              marginLeft: \"0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 255,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(ButtonGroup, {\n              variant: \"contained\",\n              color: \"primary\",\n              ref: anchorRef,\n              children: [/*#__PURE__*/_jsxDEV(Button, {\n                onClick: hendleChangeStatus,\n                children: allowedStatuses[statusSelIndex]\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 37\n              }, this), /*#__PURE__*/_jsxDEV(Button, {\n                color: \"primary\",\n                size: \"small\",\n                \"aria-controls\": openStatusSel ? 'split-button-menu' : undefined,\n                \"aria-expanded\": openStatusSel ? 'true' : undefined,\n                \"aria-label\": \"select merge strategy\",\n                \"aria-haspopup\": \"menu\",\n                onClick: handleStatSellToggle,\n                children: /*#__PURE__*/_jsxDEV(ArrowDropDownIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 41\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 260,\n                columnNumber: 37\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Popper, {\n              open: openStatusSel,\n              anchorEl: anchorRef.current,\n              role: undefined,\n              transition: true,\n              disablePortal: true,\n              children: ({\n                TransitionProps,\n                placement\n              }) => /*#__PURE__*/_jsxDEV(Grow, { ...TransitionProps,\n                style: {\n                  transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom'\n                },\n                children: /*#__PURE__*/_jsxDEV(Paper, {\n                  children: /*#__PURE__*/_jsxDEV(ClickAwayListener, {\n                    onClickAway: handleStatSellClose,\n                    children: /*#__PURE__*/_jsxDEV(MenuList, {\n                      id: \"split-button-menu\",\n                      children: allowedStatuses.map((option, index) => /*#__PURE__*/_jsxDEV(MenuItem, {\n                        //  disabled={index === 2}\n                        selected: index === statusSelIndex,\n                        onClick: event => handleMenuItemClick(event, index),\n                        children: option\n                      }, option, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 284,\n                        columnNumber: 61\n                      }, this))\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 282,\n                      columnNumber: 53\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 49\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 45\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 274,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TasksList, \"UDPOdG4u5vZdxe1A3CqogXkJMOA=\", false, function () {\n  return [useStyles];\n});\n\n_c = TasksList;\nexport default TasksList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksList\");","map":{"version":3,"sources":["C:/Users/Komputer/source/repos/HumanResourcesManager/human-resources-manager-client/src/Components/Tasks/TasksList.js"],"names":["React","useEffect","useState","APIURL","getCurrentUser","moment","makeStyles","getTasks","changeTaskStatus","Card","CardContent","Typography","Accordion","AccordionSummary","AccordionDetails","Chip","ExpandMoreIcon","Button","IconButton","List","ListItem","ListItemText","Divider","ButtonGroup","ArrowDropDownIcon","ClickAwayListener","Grow","Paper","Popper","MenuItem","MenuList","useStyles","theme","tasksContainer","margin","display","flexDirection","listComponent","width","maxWidth","backgroundColor","palette","background","paper","color","boxShadow","shadows","borderRadius","tasksDetailsCol","title","text","primary","textAlign","padding","marginBottom","main","statusContainer","marginLeft","chipContainer","alignContent","alignItems","flexwrap","justifyContent","timeChip","fontSize","fontWeight","subtaskAccordion","marginTop","height","buttonSection","taskStatusAll","allowedStatuses","TasksList","classes","selectedIndex","setSelectedIndex","tasks","setTasks","expandedSubTask","setExpandedSubTask","openStatusSel","setOpenStatusSel","statusSelIndex","setStatusSelIndex","anchorRef","useRef","then","data","items","handleListItemClick","event","index","handleSubTaskExpand","taskId","newExpanded","hendleChangeStatus","id","d","console","log","handleMenuItemClick","handleStatSellToggle","prevOpen","handleStatSellClose","current","contains","target","length","map","task","name","status","minWidth","marginRight","paddingTop","startTime","format","deadline","description","subtasks","subtask","undefined","TransitionProps","placement","transformOrigin","option"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,wBAAnB;AACA,SAASC,cAAT,QAA+B,4BAA/B;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,QAAT,EAAmBC,gBAAnB,QAA2C,6BAA3C;AAEA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,SAASC,SAAT,EAAoBC,gBAApB,EAAsCC,gBAAtC,EAAwDC,IAAxD,QAAoE,mBAApE;AACA,OAAOC,cAAP,MAA2B,+BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,UAAP,MAAuB,8BAAvB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,YAAP,MAAyB,gCAAzB;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,OAAOC,WAAP,MAAwB,+BAAxB;AACA,OAAOC,iBAAP,MAA8B,kCAA9B;AACA,OAAOC,iBAAP,MAA8B,qCAA9B;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AAEA,MAAMC,SAAS,GAAGzB,UAAU,CAAE0B,KAAD,KAAY;AACrCC,EAAAA,cAAc,EAAE;AACZC,IAAAA,MAAM,EAAE,QADI;AAEZC,IAAAA,OAAO,EAAE,MAFG;AAGZC,IAAAA,aAAa,EAAE;AAHH,GADqB;AAMrCC,EAAAA,aAAa,EAAE;AACXC,IAAAA,KAAK,EAAE,MADI;AAEXC,IAAAA,QAAQ,EAAE,GAFC;AAGXC,IAAAA,eAAe,EAAER,KAAK,CAACS,OAAN,CAAcC,UAAd,CAAyBC,KAH/B;AAIXC,IAAAA,KAAK,EAAE,OAJI;AAKXC,IAAAA,SAAS,EAAEb,KAAK,CAACc,OAAN,CAAc,CAAd,CALA;AAMXC,IAAAA,YAAY,EAAE;AANH,GANsB;AAcrCC,EAAAA,eAAe,EAAE;AACbd,IAAAA,MAAM,EAAE,KADK;AAEbC,IAAAA,OAAO,EAAE,MAFI;AAGbC,IAAAA,aAAa,EAAE;AAHF,GAdoB;AAmBrCa,EAAAA,KAAK,EAAE;AACHL,IAAAA,KAAK,EAAEZ,KAAK,CAACS,OAAN,CAAcS,IAAd,CAAmBC,OADvB;AAEHC,IAAAA,SAAS,EAAE,QAFR;AAGHC,IAAAA,OAAO,EAAE,KAHN;AAIHC,IAAAA,YAAY,EAAE,KAJX;AAKHd,IAAAA,eAAe,EAAER,KAAK,CAACS,OAAN,CAAcU,OAAd,CAAsBI,IALpC;AAMHV,IAAAA,SAAS,EAAEb,KAAK,CAACc,OAAN,CAAc,CAAd,CANR;AAOHR,IAAAA,KAAK,EAAE;AAPJ,GAnB8B;AA4BrCkB,EAAAA,eAAe,EAAE;AACbrB,IAAAA,OAAO,EAAE,MADI;AAEbC,IAAAA,aAAa,EAAE,KAFF;AAGbF,IAAAA,MAAM,EAAE,KAHK;AAIbuB,IAAAA,UAAU,EAAE;AAJC,GA5BoB;AAkCrCC,EAAAA,aAAa,EAAE;AACXvB,IAAAA,OAAO,EAAE,MADE;AAEXC,IAAAA,aAAa,EAAE,KAFJ;AAGXuB,IAAAA,YAAY,EAAE,cAHH;AAIXC,IAAAA,UAAU,EAAE,SAJD;AAKXC,IAAAA,QAAQ,EAAE,QALC;AAMXC,IAAAA,cAAc,EAAE;AANL,GAlCsB;AA0CrCC,EAAAA,QAAQ,EAAE;AACN7B,IAAAA,MAAM,EAAE,KADF;AAENW,IAAAA,SAAS,EAAEb,KAAK,CAACc,OAAN,CAAc,CAAd,CAFL;AAGNkB,IAAAA,QAAQ,EAAE,MAHJ;AAINC,IAAAA,UAAU,EAAE;AAJN,GA1C2B;AAiDrCC,EAAAA,gBAAgB,EAAE;AACd1B,IAAAA,eAAe,EAAE,SADH;AAEdI,IAAAA,KAAK,EAAE,OAFO;AAGduB,IAAAA,SAAS,EAAE,KAHG;AAIdb,IAAAA,YAAY,EAAE,KAJA;AAKdP,IAAAA,YAAY,EAAE,KALA;AAMdM,IAAAA,OAAO,EAAE,KANK;AAOd,iBAAa;AACTe,MAAAA,MAAM,EAAE;AADC;AAPC,GAjDmB;AA4DrCC,EAAAA,aAAa,EAAE;AACXlC,IAAAA,OAAO,EAAE,MADE;AAEXkB,IAAAA,OAAO,EAAE,MAFE;AAGXc,IAAAA,SAAS,EAAE;AAHA;AA5DsB,CAAZ,CAAD,CAA5B;AAmEA,MAAMG,aAAa,GAAG,CAAC,YAAD,EAAe,UAAf,EAA2B,aAA3B,CAAtB;AACA,MAAMC,eAAe,GAAGD,aAAxB;;AACA,MAAME,SAAS,GAAG,MAAM;AAAA;;AACpB,QAAMC,OAAO,GAAG1C,SAAS,EAAzB;AACA,QAAM,CAAC2C,aAAD,EAAgBC,gBAAhB,IAAoCzE,QAAQ,CAAC,CAAD,CAAlD;AACA,QAAM,CAAC0E,KAAD,EAAQC,QAAR,IAAoB3E,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC4E,eAAD,EAAkBC,kBAAlB,IAAwC7E,QAAQ,CAAC,EAAD,CAAtD;AACA,QAAM,CAAC8E,aAAD,EAAgBC,gBAAhB,IAAoC/E,QAAQ,CAAC,KAAD,CAAlD;AACA,QAAM,CAACgF,cAAD,EAAiBC,iBAAjB,IAAsCnF,KAAK,CAACE,QAAN,CAAe,CAAf,CAA5C;AACA,QAAMkF,SAAS,GAAGpF,KAAK,CAACqF,MAAN,CAAa,IAAb,CAAlB;AAEApF,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,QAAQ,CAAC,CAAD,EAAI,EAAJ,EAAQ,EAAR,CAAR,CAAoB+E,IAApB,CAA0BC,IAAD,IAAU;AAC/BV,MAAAA,QAAQ,CAACU,IAAI,CAACC,KAAN,CAAR;AACH,KAFD;AAGH,GAJQ,EAIN,EAJM,CAAT;;AAMA,QAAMC,mBAAmB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AAC1ChB,IAAAA,gBAAgB,CAACgB,KAAD,CAAhB;AACH,GAFD;;AAIA,QAAMC,mBAAmB,GAAIC,MAAD,IAAY,CAACH,KAAD,EAAQI,WAAR,KAAwB;AAC5Df,IAAAA,kBAAkB,CAACe,WAAW,GAAGD,MAAH,GAAY,KAAxB,CAAlB;AACH,GAFD;;AAIA,QAAME,kBAAkB,GAAG,MAAM;AAC7BvF,IAAAA,gBAAgB,CAACoE,KAAK,CAACF,aAAD,CAAL,CAAqBsB,EAAtB,EAA0BzB,eAAe,CAACW,cAAD,CAAzC,CAAhB,CACKI,IADL,CACWW,CAAD,IAAO;AAAEC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AAAiB,KADpC;AAEH,GAHD;;AAKA,QAAMG,mBAAmB,GAAG,CAACV,KAAD,EAAQC,KAAR,KAAkB;AAC1CR,IAAAA,iBAAiB,CAACQ,KAAD,CAAjB;AACAV,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAHD;;AAKA,QAAMoB,oBAAoB,GAAG,MAAM;AAC/BpB,IAAAA,gBAAgB,CAAEqB,QAAD,IAAc,CAACA,QAAhB,CAAhB;AACH,GAFD;;AAIA,QAAMC,mBAAmB,GAAIb,KAAD,IAAW;AACnC,QAAIN,SAAS,CAACoB,OAAV,IAAqBpB,SAAS,CAACoB,OAAV,CAAkBC,QAAlB,CAA2Bf,KAAK,CAACgB,MAAjC,CAAzB,EAAmE;AAC/D;AACH;;AAEDzB,IAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACH,GAND;;AAQA,sBACI;AAAA,cACKL,KAAK,CAAC+B,MAAN,KAAiB,CAAjB,GAAqB,IAArB,gBACG;AAAK,MAAA,SAAS,EAAElC,OAAO,CAACxC,cAAxB;AAAA,8BACI,QAAC,IAAD;AAAM,QAAA,SAAS,EAAC,KAAhB;AAAsB,QAAA,SAAS,EAAEwC,OAAO,CAACpC,aAAzC;AAAA,kBACKuC,KAAK,CAACgC,GAAN,CAAU,CAACC,IAAD,EAAOlB,KAAP,kBACP;AAAA,kCACI,QAAC,QAAD;AAEI,YAAA,MAAM,MAFV;AAGI,YAAA,QAAQ,EAAEjB,aAAa,KAAKiB,KAHhC;AAII,YAAA,OAAO,EAAGD,KAAD,IAAWD,mBAAmB,CAACC,KAAD,EAAQC,KAAR,CAJ3C;AAAA,oCAMI,QAAC,YAAD;AAAc,cAAA,OAAO,EAAEkB,IAAI,CAACC;AAA5B;AAAA;AAAA;AAAA;AAAA,oBANJ,eAOI,QAAC,IAAD;AACI,cAAA,KAAK,EAAED,IAAI,CAACE,MADhB;AAEI,cAAA,KAAK,EAAE;AACHlE,gBAAAA,SAAS,EAAE,uGADR;AAEHmB,gBAAAA,QAAQ,EAAE,MAFP;AAGHC,gBAAAA,UAAU,EAAE,KAHT;AAIHZ,gBAAAA,OAAO,EAAE,KAJN;AAKH2D,gBAAAA,QAAQ,EAAE,MALP;AAMHpE,gBAAAA,KAAK,EAAEiE,IAAI,CAACE,MAAL,KAAgB,aAAhB,GAAgC,OAAhC,GAA0C,OAN9C;AAOHrE,gBAAAA,UAAU,EAAEmE,IAAI,CAACE,MAAL,KAAgB,aAAhB,GACN,gBADM,GAENF,IAAI,CAACE,MAAL,KAAgB,WAAhB,GACI,iBADJ,GAEI;AAXP;AAFX;AAAA;AAAA;AAAA;AAAA,oBAPJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eA0BI,QAAC,OAAD;AAAS,YAAA,OAAO,EAAC,OAAjB;AAAyB,YAAA,KAAK,EAAE;AAAEzE,cAAAA,KAAK,EAAE,MAAT;AAAiBJ,cAAAA,MAAM,EAAE;AAAzB;AAAhC;AAAA;AAAA;AAAA;AAAA,kBA1BJ;AAAA,WAAU2E,IAAI,CAACb,EAAf;AAAA;AAAA;AAAA;AAAA,gBADH;AADL;AAAA;AAAA;AAAA;AAAA,cADJ,eAkCI,QAAC,IAAD;AAAM,QAAA,SAAS,EAAEvB,OAAO,CAACzB,eAAzB;AAAA,gCACI;AAAK,UAAA,SAAS,EAAEyB,OAAO,CAACxB,KAAxB;AAAA,iCACI,QAAC,UAAD;AAAY,YAAA,MAAM,MAAlB;AAAmB,YAAA,OAAO,EAAC,IAA3B;AAAA,sBACK2B,KAAK,CAACF,aAAD,CAAL,CAAqBoC;AAD1B;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,gBADJ,eAMI;AAAK,UAAA,SAAS,EAAErC,OAAO,CAACjB,eAAxB;AAAA,kCACI,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,IAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADJ,eAII,QAAC,IAAD;AACI,YAAA,KAAK,EAAEoB,KAAK,CAACF,aAAD,CAAL,CAAqBqC,MADhC;AAEI,YAAA,KAAK,EAAE;AACHlE,cAAAA,SAAS,EAAE,uGADR;AAEHmB,cAAAA,QAAQ,EAAE,MAFP;AAGHC,cAAAA,UAAU,EAAE,KAHT;AAIH/B,cAAAA,MAAM,EAAE,KAJL;AAKHuB,cAAAA,UAAU,EAAE,MALT;AAMHwD,cAAAA,WAAW,EAAE,MANV;AAOH3E,cAAAA,KAAK,EAAE,KAPJ;AAQHM,cAAAA,KAAK,EAAEgC,KAAK,CAACF,aAAD,CAAL,CAAqBqC,MAArB,KAAgC,aAAhC,GAAgD,OAAhD,GAA0D,OAR9D;AASHrE,cAAAA,UAAU,EAAEkC,KAAK,CAACF,aAAD,CAAL,CAAqBqC,MAArB,KAAgC,aAAhC,GACN,gBADM,GAENnC,KAAK,CAACF,aAAD,CAAL,CAAqBqC,MAArB,KAAgC,WAAhC,GACI,iBADJ,GAEI;AAbP;AAFX;AAAA;AAAA;AAAA;AAAA,kBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBANJ,eA6BI,QAAC,WAAD;AAAa,UAAA,KAAK,EAAE;AAAEG,YAAAA,UAAU,EAAE;AAAd,WAApB;AAAA,kCACI,QAAC,OAAD;AAAS,YAAA,OAAO,EAAC,OAAjB;AAAyB,YAAA,KAAK,EAAE;AAAE5E,cAAAA,KAAK,EAAE,MAAT;AAAiBJ,cAAAA,MAAM,EAAE,MAAzB;AAAiCuB,cAAAA,UAAU,EAAE,GAA7C;AAAkDU,cAAAA,SAAS,EAAE;AAA7D;AAAhC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAEI;AAAK,YAAA,SAAS,EAAEM,OAAO,CAACf,aAAxB;AAAA,oCACI,QAAC,IAAD;AACI,cAAA,SAAS,EAAEe,OAAO,CAACV,QADvB;AAEI,cAAA,KAAK,EAAE,YAAY1D,MAAM,CAACuE,KAAK,CAACF,aAAD,CAAL,CAAqByC,SAAtB,CAAN,CAAuCC,MAAvC,CAA8C,YAA9C,CAFvB;AAGI,cAAA,KAAK,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,oBADJ,eAMI,QAAC,IAAD;AACI,cAAA,SAAS,EAAE3C,OAAO,CAACV,QADvB;AAEI,cAAA,KAAK,EAAE,eAAe1D,MAAM,CAACuE,KAAK,CAACF,aAAD,CAAL,CAAqB2C,QAAtB,CAAN,CAAsCD,MAAtC,CAA6C,YAA7C,CAF1B;AAGI,cAAA,KAAK,EAAC;AAHV;AAAA;AAAA;AAAA;AAAA,oBANJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFJ,eAcI,QAAC,OAAD;AAAS,YAAA,OAAO,EAAC,OAAjB;AAAyB,YAAA,KAAK,EAAE;AAAE9E,cAAAA,KAAK,EAAE,MAAT;AAAiBJ,cAAAA,MAAM,EAAE,MAAzB;AAAiCuB,cAAAA,UAAU,EAAE;AAA7C;AAAhC;AAAA;AAAA;AAAA;AAAA,kBAdJ,eAgBI,QAAC,UAAD;AAAY,YAAA,OAAO,EAAC,WAApB;AAAA,sBACKmB,KAAK,CAACF,aAAD,CAAL,CAAqB4C;AAD1B;AAAA;AAAA;AAAA;AAAA,kBAhBJ,eAmBI,QAAC,OAAD;AAAS,YAAA,OAAO,EAAC,OAAjB;AAAyB,YAAA,KAAK,EAAE;AAAEhF,cAAAA,KAAK,EAAE,MAAT;AAAiBJ,cAAAA,MAAM,EAAE,MAAzB;AAAiCuB,cAAAA,UAAU,EAAE;AAA7C;AAAhC;AAAA;AAAA;AAAA;AAAA,kBAnBJ,eAqBI,QAAC,UAAD;AAAY,YAAA,MAAM,MAAlB;AAAmB,YAAA,OAAO,EAAC,WAA3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBArBJ,EAyBKmB,KAAK,CAACF,aAAD,CAAL,CAAqB6C,QAArB,CAA8BX,GAA9B,CAAkC,CAACY,OAAD,EAAU7B,KAAV,kBAC/B,QAAC,SAAD;AACI,YAAA,QAAQ,EAAEb,eAAe,KAAK0C,OAAO,CAACxB,EAD1C;AAEI,YAAA,QAAQ,EAAEJ,mBAAmB,CAAC4B,OAAO,CAACxB,EAAT,CAFjC;AAII,YAAA,SAAS,EAAEvB,OAAO,CAACP,gBAJvB;AAAA,oCAMI,QAAC,gBAAD;AACI,cAAA,UAAU,eAAE,QAAC,cAAD;AAAgB,gBAAA,KAAK,EAAE;AAAEtB,kBAAAA,KAAK,EAAE;AAAT;AAAvB;AAAA;AAAA;AAAA;AAAA,sBADhB;AAAA,qCAGI,QAAC,UAAD;AAAA,0BACK4E,OAAO,CAACV;AADb;AAAA;AAAA;AAAA;AAAA;AAHJ;AAAA;AAAA;AAAA;AAAA,oBANJ,eAaI,QAAC,gBAAD;AAAA,wBACKU,OAAO,CAACF;AADb;AAAA;AAAA;AAAA;AAAA,oBAbJ;AAAA,aAGSE,OAAO,CAACxB,EAHjB;AAAA;AAAA;AAAA;AAAA,kBADH,CAzBL;AAAA;AAAA;AAAA;AAAA;AAAA,gBA7BJ,eA2EI;AAAK,UAAA,SAAS,EAAEvB,OAAO,CAACJ,aAAxB;AAAA,kCACI,QAAC,OAAD;AAAS,YAAA,OAAO,EAAC,OAAjB;AAAyB,YAAA,KAAK,EAAE;AAAE/B,cAAAA,KAAK,EAAE,MAAT;AAAiBJ,cAAAA,MAAM,EAAE,MAAzB;AAAiCuB,cAAAA,UAAU,EAAE;AAA7C;AAAhC;AAAA;AAAA;AAAA;AAAA,kBADJ,eAGI;AAAA,oCACI,QAAC,WAAD;AAAa,cAAA,OAAO,EAAC,WAArB;AAAiC,cAAA,KAAK,EAAC,SAAvC;AAAiD,cAAA,GAAG,EAAE2B,SAAtD;AAAA,sCACI,QAAC,MAAD;AAAQ,gBAAA,OAAO,EAAEW,kBAAjB;AAAA,0BAAsCxB,eAAe,CAACW,cAAD;AAArD;AAAA;AAAA;AAAA;AAAA,sBADJ,eAEI,QAAC,MAAD;AACI,gBAAA,KAAK,EAAC,SADV;AAEI,gBAAA,IAAI,EAAC,OAFT;AAGI,iCAAeF,aAAa,GAAG,mBAAH,GAAyByC,SAHzD;AAII,iCAAezC,aAAa,GAAG,MAAH,GAAYyC,SAJ5C;AAKI,8BAAW,uBALf;AAMI,iCAAc,MANlB;AAOI,gBAAA,OAAO,EAAEpB,oBAPb;AAAA,uCASI,QAAC,iBAAD;AAAA;AAAA;AAAA;AAAA;AATJ;AAAA;AAAA;AAAA;AAAA,sBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,oBADJ,eAeI,QAAC,MAAD;AAAQ,cAAA,IAAI,EAAErB,aAAd;AAA6B,cAAA,QAAQ,EAAEI,SAAS,CAACoB,OAAjD;AAA0D,cAAA,IAAI,EAAEiB,SAAhE;AAA2E,cAAA,UAAU,MAArF;AAAsF,cAAA,aAAa,MAAnG;AAAA,wBACK,CAAC;AAAEC,gBAAAA,eAAF;AAAmBC,gBAAAA;AAAnB,eAAD,kBACG,QAAC,IAAD,OACQD,eADR;AAEI,gBAAA,KAAK,EAAE;AACHE,kBAAAA,eAAe,EAAED,SAAS,KAAK,QAAd,GAAyB,YAAzB,GAAwC;AADtD,iBAFX;AAAA,uCAMI,QAAC,KAAD;AAAA,yCACI,QAAC,iBAAD;AAAmB,oBAAA,WAAW,EAAEpB,mBAAhC;AAAA,2CACI,QAAC,QAAD;AAAU,sBAAA,EAAE,EAAC,mBAAb;AAAA,gCACKhC,eAAe,CAACqC,GAAhB,CAAoB,CAACiB,MAAD,EAASlC,KAAT,kBACjB,QAAC,QAAD;AAEI;AACA,wBAAA,QAAQ,EAAEA,KAAK,KAAKT,cAHxB;AAII,wBAAA,OAAO,EAAGQ,KAAD,IAAWU,mBAAmB,CAACV,KAAD,EAAQC,KAAR,CAJ3C;AAAA,kCAMKkC;AANL,yBACSA,MADT;AAAA;AAAA;AAAA;AAAA,8BADH;AADL;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AANJ;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,oBAfJ;AAAA;AAAA;AAAA;AAAA;AAAA,kBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,gBA3EJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAlCJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAoKH,CAjND;;GAAMrD,S;UACczC,S;;;KADdyC,S;AAkNN,eAAeA,SAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals';\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport moment from \"moment\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getTasks, changeTaskStatus } from \"../../Services/TasksService\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    tasksContainer: {\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    listComponent: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: 'white',\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '3px'\r\n    },\r\n    tasksDetailsCol: {\r\n        margin: \"8px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '8px',\r\n        marginBottom: '2px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        width: '100%',\r\n    },\r\n    statusContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        margin: '4px',\r\n        marginLeft: '15px',\r\n    },\r\n    chipContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignContent: 'space-around',\r\n        alignItems: 'stretch',\r\n        flexwrap: 'nowrap',\r\n        justifyContent: 'space-evenly'\r\n    },\r\n    timeChip: {\r\n        margin: \"2px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"12px\",\r\n        fontWeight: \"550\"\r\n\r\n    },\r\n    subtaskAccordion: {\r\n        backgroundColor: '#bdbdbd',\r\n        color: \"black\",\r\n        marginTop: \"8px\",\r\n        marginBottom: '4px',\r\n        borderRadius: '4px',\r\n        padding: '0px',\r\n        '&::before': {\r\n            height: 0\r\n        }\r\n    },\r\n    buttonSection: {\r\n        display: 'grid',\r\n        padding: '16px',\r\n        marginTop: 'auto',\r\n    },\r\n}));\r\n\r\nconst taskStatusAll = ['Compleated', 'Reqested', 'In-Progress'];\r\nconst allowedStatuses = taskStatusAll;\r\nconst TasksList = () => {\r\n    const classes = useStyles();\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [expandedSubTask, setExpandedSubTask] = useState('');\r\n    const [openStatusSel, setOpenStatusSel] = useState(false);\r\n    const [statusSelIndex, setStatusSelIndex] = React.useState(1);\r\n    const anchorRef = React.useRef(null);\r\n\r\n    useEffect(() => {\r\n        getTasks(1, 10, 12).then((data) => {\r\n            setTasks(data.items)\r\n        })\r\n    }, []);\r\n\r\n    const handleListItemClick = (event, index) => {\r\n        setSelectedIndex(index);\r\n    };\r\n\r\n    const handleSubTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedSubTask(newExpanded ? taskId : false);\r\n    }\r\n\r\n    const hendleChangeStatus = () => {\r\n        changeTaskStatus(tasks[selectedIndex].id, allowedStatuses[statusSelIndex])\r\n            .then((d) => { console.log(d); })\r\n    }\r\n\r\n    const handleMenuItemClick = (event, index) => {\r\n        setStatusSelIndex(index);\r\n        setOpenStatusSel(false);\r\n    };\r\n\r\n    const handleStatSellToggle = () => {\r\n        setOpenStatusSel((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleStatSellClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n\r\n        setOpenStatusSel(false);\r\n    };\r\n\r\n    return (\r\n        <div >\r\n            {tasks.length === 0 ? null :\r\n                <div className={classes.tasksContainer}>\r\n                    <List component=\"nav\" className={classes.listComponent}>\r\n                        {tasks.map((task, index) => (\r\n                            <div key={task.id}>\r\n                                <ListItem\r\n\r\n                                    button\r\n                                    selected={selectedIndex === index}\r\n                                    onClick={(event) => handleListItemClick(event, index)}\r\n                                >\r\n                                    <ListItemText primary={task.name} />\r\n                                    <Chip\r\n                                        label={task.status}\r\n                                        style={{\r\n                                            boxShadow: 'rgb(0 0 0 / 20%) 0px 0px 1px -2px, rgb(0 0 0 / 14%) 0px 1px 2px 0px, rgb(0 0 0 / 12%) 0px 0px 5px 0px',\r\n                                            fontSize: \"12px\",\r\n                                            fontWeight: \"550\",\r\n                                            padding: \"5px\",\r\n                                            minWidth: '92px',\r\n                                            color: task.status === \"In-Progress\" ? \"white\" : \"black\",\r\n                                            background: task.status === \"In-Progress\"\r\n                                                ? \"rgb(56 81 216)\"\r\n                                                : task.status === \"Requested\"\r\n                                                    ? \"rgb(231 170 35)\"\r\n                                                    : \"rgb(0 158 7)\",\r\n                                        }}\r\n                                    />\r\n\r\n                                </ListItem>\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                            </div>\r\n                        ))\r\n                        }\r\n                    </List>\r\n                    <Card className={classes.tasksDetailsCol}>\r\n                        <div className={classes.title}>\r\n                            <Typography noWrap variant=\"h5\">\r\n                                {tasks[selectedIndex].name}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className={classes.statusContainer}>\r\n                            <Typography variant=\"h6\">\r\n                                Status:\r\n                            </Typography>\r\n                            <Chip\r\n                                label={tasks[selectedIndex].status}\r\n                                style={{\r\n                                    boxShadow: '0px 3px 1px -2px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)',\r\n                                    fontSize: \"14px\",\r\n                                    fontWeight: \"550\",\r\n                                    margin: \"2px\",\r\n                                    marginLeft: \"10px\",\r\n                                    marginRight: \"10px\",\r\n                                    width: \"99%\",\r\n                                    color: tasks[selectedIndex].status === \"In-Progress\" ? \"white\" : \"black\",\r\n                                    background: tasks[selectedIndex].status === \"In-Progress\"\r\n                                        ? \"rgb(56 81 216)\"\r\n                                        : tasks[selectedIndex].status === \"Requested\"\r\n                                            ? \"rgb(231 170 35)\"\r\n                                            : \"rgb(0 158 7)\",\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <CardContent style={{ paddingTop: 0 }}>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\", marginTop: '2px' }} />\r\n                            <div className={classes.chipContainer}>\r\n                                <Chip\r\n                                    className={classes.timeChip}\r\n                                    label={\"Start: \" + moment(tasks[selectedIndex].startTime).format(\"YYYY-MM-DD\")}\r\n                                    color=\"primary\"\r\n                                />\r\n                                <Chip\r\n                                    className={classes.timeChip}\r\n                                    label={\"Deadline: \" + moment(tasks[selectedIndex].deadline).format(\"YYYY-MM-DD\")}\r\n                                    color=\"primary\"\r\n                                />\r\n                            </div>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n\r\n                            <Typography variant=\"subtitle1\">\r\n                                {tasks[selectedIndex].description}\r\n                            </Typography>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n\r\n                            <Typography noWrap variant=\"subtitle1\">\r\n                                Subtasks:\r\n                            </Typography>\r\n\r\n                            {tasks[selectedIndex].subtasks.map((subtask, index) => (\r\n                                <Accordion\r\n                                    expanded={expandedSubTask === subtask.id}\r\n                                    onChange={handleSubTaskExpand(subtask.id)}\r\n                                    key={subtask.id}\r\n                                    className={classes.subtaskAccordion}\r\n                                >\r\n                                    <AccordionSummary\r\n                                        expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                    >\r\n                                        <Typography>\r\n                                            {subtask.name}\r\n                                        </Typography>\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails>\r\n                                        {subtask.description}\r\n                                    </AccordionDetails>\r\n                                </Accordion>\r\n                            ))}\r\n\r\n                        </CardContent>\r\n                        <div className={classes.buttonSection}>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n\r\n                            <div>\r\n                                <ButtonGroup variant=\"contained\" color=\"primary\" ref={anchorRef}>\r\n                                    <Button onClick={hendleChangeStatus}>{allowedStatuses[statusSelIndex]}</Button>\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        aria-controls={openStatusSel ? 'split-button-menu' : undefined}\r\n                                        aria-expanded={openStatusSel ? 'true' : undefined}\r\n                                        aria-label=\"select merge strategy\"\r\n                                        aria-haspopup=\"menu\"\r\n                                        onClick={handleStatSellToggle}\r\n                                    >\r\n                                        <ArrowDropDownIcon />\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                                <Popper open={openStatusSel} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n                                    {({ TransitionProps, placement }) => (\r\n                                        <Grow\r\n                                            {...TransitionProps}\r\n                                            style={{\r\n                                                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                                            }}\r\n                                        >\r\n                                            <Paper>\r\n                                                <ClickAwayListener onClickAway={handleStatSellClose}>\r\n                                                    <MenuList id=\"split-button-menu\">\r\n                                                        {allowedStatuses.map((option, index) => (\r\n                                                            <MenuItem\r\n                                                                key={option}\r\n                                                                //  disabled={index === 2}\r\n                                                                selected={index === statusSelIndex}\r\n                                                                onClick={(event) => handleMenuItemClick(event, index)}\r\n                                                            >\r\n                                                                {option}\r\n                                                            </MenuItem>\r\n                                                        ))}\r\n                                                    </MenuList>\r\n                                                </ClickAwayListener>\r\n                                            </Paper>\r\n                                        </Grow>\r\n                                    )}\r\n                                </Popper>\r\n                            </div>\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            }\r\n        </div >\r\n    );\r\n}\r\nexport default TasksList;"]},"metadata":{},"sourceType":"module"}