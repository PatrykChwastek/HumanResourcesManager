{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Komputer\\\\Desktop\\\\reactApp\\\\human-resources-manager-client\\\\src\\\\Components\\\\CreateEmployee.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport TextField from '@material-ui/core/TextField';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { APIURL, DarkTextField, DarkSelect, DarkChipList } from './GlobalComponents';\nconst useStyles = makeStyles(theme => ({\n  mainConteiner: {\n    marginTop: \"1.5rem\",\n    background: theme.palette.grey[800],\n    padding: \"1rem\"\n  },\n  C\n}));\n\nconst CreateEmploy = () => {\n  _s();\n\n  const classes = useStyles();\n  const [employee, setEmployee] = useState({\n    id: 0,\n    employeeData: {\n      name: \"\",\n      surname: \"\",\n      phoneNumber: \"\",\n      email: \"\",\n      employeeAddress: {\n        id: 0,\n        city: \"\",\n        postCode: \"\",\n        street: \"\"\n      }\n    },\n    position: {\n      id: 0,\n      name: \"\"\n    },\n    department: {\n      id: 0,\n      name: \"\"\n    },\n    employeePermissions: [],\n    employmentDate: \"\",\n    remoteWork: false\n  });\n  const [departments, setDepartments] = useState([]);\n  const [positions, setPositions] = useState([]);\n  const [permissions, setPermissions] = useState([]);\n  const [employeePermissions, setEmployeePermissions] = useState([]);\n  useEffect(() => {\n    getEmployeeProps();\n  }, []);\n\n  const PostEmployee = () => {\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"id\": 0,\n        \"name\": \"Json\",\n        \"surname\": \"j\",\n        \"phoneNumber\": 0,\n        \"email\": \"temp@mail.net\",\n        \"EmployeeAddressId\": 0,\n        \"employeeAddress\": {\n          \"id\": 0,\n          \"city\": \"New York\",\n          \"postCode\": \"11-111\",\n          \"street\": \"str 11\"\n        }\n      })\n    };\n    fetch(APIURL + 'employee/build?type=linux-admin', requestOptions).then(response => response.json()).then(data => console.log(data));\n  };\n\n  const getEmployeeProps = async () => {\n    const requestOptions = {\n      method: 'Get'\n    };\n    await fetch(APIURL + `departments`, requestOptions).then(response => response.json()).then(data => setDepartments(data));\n    await fetch(APIURL + `positions`, requestOptions).then(response => response.json()).then(data => setPositions(data));\n    await fetch(APIURL + `permissions`, requestOptions).then(response => response.json()).then(data => setPermissions(data));\n  };\n\n  const headleFormChange = event => {\n    if (event.target.name === \"permissionSelect\") {\n      if (employeePermissions.length === 0) {\n        setEmployeePermissions([...employeePermissions, {\n          id: event.target.value.id,\n          name: event.target.value.name\n        }]);\n      } else {\n        let isPicked = false;\n        employeePermissions.forEach(element => {\n          if (element.id === event.target.value.id) {\n            isPicked = true;\n          }\n        });\n\n        if (!isPicked) {\n          setEmployeePermissions([...employeePermissions, {\n            id: event.target.value.id,\n            name: event.target.value.name\n          }]);\n        }\n      }\n\n      setEmployee(employee, {\n        employeePermissions: employeePermissions\n      });\n    }\n  };\n\n  const hendlePermissionDelete = chipToDelete => {\n    setEmployeePermissions(chips => chips.filter(chip => chip.name !== chipToDelete.name));\n  };\n\n  const hendlePostEmployee = e => {\n    console.log(employee, employeePermissions);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.mainConteiner,\n    children: /*#__PURE__*/_jsxDEV(\"form\", {\n      className: classes.root,\n      noValidate: true,\n      autoComplete: \"off\",\n      children: [/*#__PURE__*/_jsxDEV(DarkTextField, {\n        label: \"Name\",\n        name: \"employeeName\",\n        onChange: headleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DarkTextField, {\n        label: \"Surname\",\n        name: \"employeeSurname\",\n        onChange: headleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DarkSelect, {\n        label: \"Department\",\n        name: \"departmentSelect\",\n        collection: departments,\n        onChange: headleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DarkSelect, {\n        label: \"Position\",\n        name: \"positionSelect\",\n        collection: positions,\n        onChange: headleFormChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(DarkChipList, {\n        label: \"Select Permission\",\n        name: \"permissionSelect\",\n        collection: permissions,\n        clipListCollection: employeePermissions,\n        onChange: headleFormChange,\n        onDelete: hendlePermissionDelete\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: hendlePostEmployee,\n        children: \"ht\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 9\n  }, this);\n};\n\n_s(CreateEmploy, \"vCR5caIZAZz22f2uGR3OfCK8tR0=\", false, function () {\n  return [useStyles];\n});\n\n_c = CreateEmploy;\nexport default CreateEmploy;\n\nvar _c;\n\n$RefreshReg$(_c, \"CreateEmploy\");","map":{"version":3,"sources":["C:/Users/Komputer/Desktop/reactApp/human-resources-manager-client/src/Components/CreateEmployee.js"],"names":["React","useEffect","useState","TextField","makeStyles","APIURL","DarkTextField","DarkSelect","DarkChipList","useStyles","theme","mainConteiner","marginTop","background","palette","grey","padding","C","CreateEmploy","classes","employee","setEmployee","id","employeeData","name","surname","phoneNumber","email","employeeAddress","city","postCode","street","position","department","employeePermissions","employmentDate","remoteWork","departments","setDepartments","positions","setPositions","permissions","setPermissions","setEmployeePermissions","getEmployeeProps","PostEmployee","requestOptions","method","headers","body","JSON","stringify","fetch","then","response","json","data","console","log","headleFormChange","event","target","length","value","isPicked","forEach","element","hendlePermissionDelete","chipToDelete","chips","filter","chip","hendlePostEmployee","e","root"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {APIURL, DarkTextField, DarkSelect, DarkChipList} from './GlobalComponents';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainConteiner: {\r\n        marginTop: \"1.5rem\",  \r\n        background: theme.palette.grey[800], \r\n        padding:\"1rem\"\r\n    },\r\nC\r\n}));\r\n\r\nconst CreateEmploy = () => {\r\n    const classes = useStyles();\r\n    const [employee, setEmployee] = useState({\r\n        id: 0,\r\n        employeeData: {\r\n            name: \"\",\r\n            surname: \"\",\r\n            phoneNumber: \"\",\r\n            email: \"\",\r\n            employeeAddress: {\r\n                id: 0,\r\n                city: \"\",\r\n                postCode: \"\",\r\n                street:\"\"\r\n            }\r\n        },\r\n        position: {\r\n            id: 0,\r\n            name:\"\",\r\n        },\r\n        department: {\r\n            id: 0,\r\n            name: \"\",\r\n        },\r\n        employeePermissions: [],\r\n        employmentDate: \"\",\r\n        remoteWork: false\r\n    });\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]); \r\n    const [permissions, setPermissions] = useState([]); \r\n    const [employeePermissions, setEmployeePermissions] = useState([]); \r\n\r\n    useEffect(() => {\r\n    getEmployeeProps()\r\n    }, []);\r\n\r\n    const PostEmployee = () => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"id\": 0, \"name\": \"Json\", \"surname\": \"j\",\r\n                \"phoneNumber\": 0, \"email\": \"temp@mail.net\",\r\n                \"EmployeeAddressId\": 0,\r\n                \"employeeAddress\":\r\n                    { \"id\": 0, \"city\": \"New York\", \"postCode\": \"11-111\", \"street\": \"str 11\" }\r\n            })\r\n        };\r\n        fetch(APIURL +'employee/build?type=linux-admin', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data));\r\n    }\r\n\r\n    const getEmployeeProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setDepartments(data));\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setPositions(data));\r\n        \r\n        await fetch(APIURL + `permissions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setPermissions(data));\r\n    }\r\n\r\n    const headleFormChange = event => {\r\n        if (event.target.name === \"permissionSelect\") {\r\n            if (employeePermissions.length === 0) {\r\n                setEmployeePermissions([...employeePermissions, { id: event.target.value.id, name: event.target.value.name }]);           \r\n            } else {\r\n                let isPicked = false;\r\n                employeePermissions.forEach(element => {\r\n                    if (element.id === event.target.value.id) {\r\n                        isPicked = true;\r\n                    }\r\n                });\r\n                if (!isPicked) {\r\n                    setEmployeePermissions([...employeePermissions, { id: event.target.value.id, name: event.target.value.name }]);\r\n                }\r\n            } \r\n            setEmployee(employee,{employeePermissions : employeePermissions})\r\n        }\r\n    }\r\n\r\n    const hendlePermissionDelete = chipToDelete => {\r\n        setEmployeePermissions(chips => chips.filter(chip => chip.name !== chipToDelete.name));\r\n    }\r\n\r\n    const hendlePostEmployee = e => {\r\n        console.log(employee,employeePermissions);        \r\n    }\r\n\r\n    return (\r\n        <div className={classes.mainConteiner}>          \r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n            <DarkTextField\r\n                label=\"Name\"\r\n                name=\"employeeName\"\r\n                onChange={headleFormChange}\r\n            />\r\n            <DarkTextField\r\n                label=\"Surname\"\r\n                name=\"employeeSurname\"\r\n                onChange={headleFormChange}\r\n            />\r\n            <DarkSelect\r\n                label=\"Department\"\r\n                name=\"departmentSelect\"\r\n                collection={departments}     \r\n                onChange={headleFormChange}\r\n            />\r\n            <DarkSelect\r\n                label=\"Position\"\r\n                name=\"positionSelect\"\r\n                collection={positions}\r\n                onChange={headleFormChange}\r\n            />\r\n            <DarkChipList\r\n                label=\"Select Permission\"\r\n                name=\"permissionSelect\"\r\n                collection={permissions}\r\n                clipListCollection={employeePermissions}\r\n                onChange={headleFormChange}\r\n                onDelete={hendlePermissionDelete}\r\n            />\r\n            <button onClick={hendlePostEmployee}>ht</button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateEmploy;"]},"metadata":{},"sourceType":"module"}