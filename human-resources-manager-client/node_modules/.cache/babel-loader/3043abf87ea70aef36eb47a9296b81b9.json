{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Komputer\\\\source\\\\repos\\\\HumanResourcesManager\\\\human-resources-manager-client\\\\src\\\\Components\\\\UserTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport APIURL from '../Services/Globals';\nimport { getCurrentUser } from '../Services/AuthService';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nconst useStyles = makeStyles(theme => ({\n  column: {\n    margin: \"8px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\"\n  },\n  title: {\n    color: theme.palette.text.primary,\n    textAlign: 'center',\n    padding: '8px',\n    marginBottom: '2px',\n    backgroundColor: theme.palette.primary.main,\n    boxShadow: theme.shadows[2],\n    width: '100%'\n  },\n  timeChip: {\n    margin: \"2px\",\n    boxShadow: theme.shadows[2],\n    fontSize: \"11px\",\n    fontWeight: \"550\"\n  }\n}));\n\nconst UserTasks = () => {\n  _s();\n\n  const classes = useStyles();\n  const [expandedTask, setExpandedTask] = useState('');\n  const [expandedSubTask, setExpandedSubTask] = useState('');\n  const [columns, setColumns] = useState({\n    ['requested']: {\n      columnId: \"requested\",\n      name: \"Requested\",\n      statusName: \"Requested\",\n      items: []\n    },\n    ['inprogress']: {\n      columnId: \"inprogress\",\n      name: \"In Progress\",\n      statusName: \"In-Progress\",\n      items: []\n    },\n    ['completed']: {\n      columnId: \"completed\",\n      name: \"Completed\",\n      statusName: \"Completed\",\n      items: []\n    }\n  });\n  useEffect(() => {\n    const userID = getCurrentUser().userDetails.employeeDTO.id;\n    let completed = [];\n    let requested = [];\n    let progress = [];\n    getTasks(1, 10, userID).then(data => {\n      data.items.forEach(item => {\n        switch (item.status) {\n          case \"Requested\":\n            requested.push(item);\n            break;\n\n          case \"Completed\":\n            completed.push(item);\n            break;\n\n          case \"In-Progress\":\n            progress.push(item);\n            break;\n        }\n      });\n      adddItemsToColumn(completed, requested, progress);\n    });\n    ;\n  }, []);\n\n  const adddItemsToColumn = (com, req, prog) => {\n    const completedCol = columns.completed;\n    const requestedCol = columns.requested;\n    const progressCol = columns.inprogress;\n    setColumns({ ...columns,\n      [completedCol.columnId]: { ...completedCol,\n        items: com\n      },\n      [requestedCol.columnId]: { ...requestedCol,\n        items: req\n      },\n      [progressCol.columnId]: { ...progressCol,\n        items: prog\n      }\n    });\n  };\n\n  const getTasks = async (page, size, employeeid, status) => {\n    const requestOptions = {\n      method: 'Get',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    return await fetch(APIURL + `tasks?page=${page}&size=${size}&employeeid=${employeeid}`, requestOptions).then(response => {\n      if (response.ok) return response.json();else return Promise.reject();\n    }).then(data => {\n      return data;\n    });\n  };\n\n  const changeTaskStatus = async (taskID, status) => {\n    const requestOptions = {\n      method: 'Put',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    return await fetch(APIURL + `tasks?id=${taskID}&status=${status}`, requestOptions).then(response => {\n      if (response.ok) return response.json();else return Promise.reject();\n    }).then(data => {\n      return data;\n    });\n  };\n\n  const onDragEnd = (result, columns, setColumns) => {\n    if (!result.destination) return;\n    const {\n      source,\n      destination\n    } = result;\n\n    if (source.droppableId !== destination.droppableId) {\n      const newStatus = columns[destination.droppableId].statusName;\n      const sourceColumn = columns[source.droppableId];\n      const destColumn = columns[destination.droppableId];\n      const sourceItems = [...sourceColumn.items];\n      const destItems = [...destColumn.items];\n      const [changed] = sourceItems.splice(source.index, 1);\n      changed.status = newStatus;\n      destItems.splice(destItems.length, 0, changed); //destItems.splice(destination.index, 0, removed);\n\n      changeTaskStatus(changed.id, changed.status).then();\n      setColumns({ ...columns,\n        [source.droppableId]: { ...sourceColumn,\n          items: sourceItems\n        },\n        [destination.droppableId]: { ...destColumn,\n          items: destItems\n        }\n      });\n    }\n  };\n\n  const handleTaskExpand = taskId => (event, newExpanded) => {\n    setExpandedTask(newExpanded ? taskId : false);\n  };\n\n  const handleSubTaskExpand = taskId => (event, newExpanded) => {\n    setExpandedSubTask(newExpanded ? taskId : false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEnd(result, columns, setColumns),\n      children: Object.entries(columns).map(([columnId, column], index) => {\n        return /*#__PURE__*/_jsxDEV(Card, {\n          className: classes.column,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.title,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              noWrap: true,\n              variant: \"h5\",\n              children: column.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 194,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Droppable, {\n            droppableId: columnId,\n            children: (provided, snapshot) => {\n              return /*#__PURE__*/_jsxDEV(CardContent, { ...provided.droppableProps,\n                ref: provided.innerRef,\n                style: {\n                  background: snapshot.isDraggingOver ? \"rgb(128 128 128)\" : \"#424242\",\n                  padding: \"10px\",\n                  paddingBottom: \"0\",\n                  minWidth: \"300px\",\n                  minHeight: \"300px\"\n                },\n                children: [column.items.map((item, index) => {\n                  return /*#__PURE__*/_jsxDEV(Draggable, {\n                    draggableId: String(item.id),\n                    index: index,\n                    children: (provided, snapshot) => {\n                      return /*#__PURE__*/_jsxDEV(Accordion, {\n                        expanded: expandedTask === item.id,\n                        onChange: handleTaskExpand(item.id),\n                        ref: provided.innerRef,\n                        ...provided.draggableProps,\n                        ...provided.dragHandleProps,\n                        style: {\n                          userSelect: \"none\",\n                          backgroundColor: item.status === \"In-Progress\" ? \"rgb(93 135 230)\" : item.status === \"Requested\" ? \"rgb(255 188 0)\" : \"rgb(3 189 0)\",\n                          color: \"black\",\n                          borderRadius: '4px',\n                          marginBottom: '4px',\n                          ...provided.draggableProps.style\n                        },\n                        children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n                          expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n                            style: {\n                              color: \"black\"\n                            }\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 242,\n                            columnNumber: 85\n                          }, this),\n                          style: {\n                            padding: '8px'\n                          },\n                          onClick: e => e.textContent != '' ? setExpandedTask('') : null,\n                          children: /*#__PURE__*/_jsxDEV(Typography, {\n                            variant: \"subtitle1\",\n                            children: item.name\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 246,\n                            columnNumber: 73\n                          }, this)\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 241,\n                          columnNumber: 69\n                        }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n                          style: {\n                            display: \"flex\",\n                            alignContent: \"flex-start\",\n                            flexDirection: 'column',\n                            padding: '0px'\n                          },\n                          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                            style: {\n                              display: \"flex\",\n                              flexDirection: \"row\",\n                              alignContent: 'space-around',\n                              alignItems: 'stretch',\n                              flexwrap: 'nowrap',\n                              justifyContent: 'space-evenly'\n                            },\n                            children: [/*#__PURE__*/_jsxDEV(Chip, {\n                              className: classes.timeChip,\n                              label: \"Start: \" + item.startTime.toString().split('T')[0],\n                              color: \"primary\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 263,\n                              columnNumber: 77\n                            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n                              className: classes.timeChip,\n                              label: \"Deadline: \" + item.deadline.toString().split('T')[0],\n                              color: \"primary\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 268,\n                              columnNumber: 77\n                            }, this)]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 255,\n                            columnNumber: 73\n                          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                            variant: \"body1\",\n                            style: {\n                              marginLeft: '5px',\n                              marginBottom: '5px'\n                            },\n                            children: item.description\n                          }, void 0, false, {\n                            fileName: _jsxFileName,\n                            lineNumber: 274,\n                            columnNumber: 73\n                          }, this), item.subtasks.length === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n                            style: {\n                              paddingLeft: '8px',\n                              paddingRight: '8px',\n                              backgroundColor: \"rgb(0 0 0 / 26%)\"\n                            },\n                            children: [/*#__PURE__*/_jsxDEV(Typography, {\n                              children: \"Subtasks:\"\n                            }, void 0, false, {\n                              fileName: _jsxFileName,\n                              lineNumber: 288,\n                              columnNumber: 81\n                            }, this), item.subtasks.map(subtask => {\n                              return /*#__PURE__*/_jsxDEV(Accordion, {\n                                expanded: expandedSubTask === subtask.id,\n                                onChange: handleSubTaskExpand(subtask.id),\n                                style: {\n                                  backgroundColor: item.status === \"In-Progress\" ? \"rgb(93 135 230)\" : item.status === \"Requested\" ? \"rgb(255 234 144)\" : \"rgb(3 189 0)\",\n                                  color: \"black\",\n                                  marginBottom: '4px',\n                                  borderRadius: '4px',\n                                  padding: '0px'\n                                },\n                                children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n                                  expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n                                    style: {\n                                      color: \"black\"\n                                    }\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 311,\n                                    columnNumber: 109\n                                  }, this),\n                                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                                    children: subtask.name\n                                  }, void 0, false, {\n                                    fileName: _jsxFileName,\n                                    lineNumber: 313,\n                                    columnNumber: 97\n                                  }, this)\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 310,\n                                  columnNumber: 93\n                                }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n                                  children: subtask.description\n                                }, void 0, false, {\n                                  fileName: _jsxFileName,\n                                  lineNumber: 317,\n                                  columnNumber: 93\n                                }, this)]\n                              }, subtask.id, true, {\n                                fileName: _jsxFileName,\n                                lineNumber: 293,\n                                columnNumber: 89\n                              }, this);\n                            })]\n                          }, void 0, true, {\n                            fileName: _jsxFileName,\n                            lineNumber: 283,\n                            columnNumber: 77\n                          }, this)]\n                        }, void 0, true, {\n                          fileName: _jsxFileName,\n                          lineNumber: 248,\n                          columnNumber: 69\n                        }, this)]\n                      }, void 0, true, {\n                        fileName: _jsxFileName,\n                        lineNumber: 220,\n                        columnNumber: 65\n                      }, this);\n                    }\n                  }, item.id, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 213,\n                    columnNumber: 53\n                  }, this);\n                }), provided.placeholder]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 199,\n                columnNumber: 41\n              }, this);\n            }\n          }, columnId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 196,\n            columnNumber: 29\n          }, this)]\n        }, columnId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserTasks, \"gZXkncnQj8A0g2Yn1Ag3B/8jfjw=\", false, function () {\n  return [useStyles];\n});\n\n_c = UserTasks;\nexport default UserTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserTasks\");","map":{"version":3,"sources":["C:/Users/Komputer/source/repos/HumanResourcesManager/human-resources-manager-client/src/Components/UserTasks.js"],"names":["React","useEffect","useState","DragDropContext","Draggable","Droppable","APIURL","getCurrentUser","makeStyles","Card","CardContent","Typography","Accordion","AccordionSummary","AccordionDetails","Chip","ExpandMoreIcon","useStyles","theme","column","margin","display","flexDirection","alignItems","title","color","palette","text","primary","textAlign","padding","marginBottom","backgroundColor","main","boxShadow","shadows","width","timeChip","fontSize","fontWeight","UserTasks","classes","expandedTask","setExpandedTask","expandedSubTask","setExpandedSubTask","columns","setColumns","columnId","name","statusName","items","userID","userDetails","employeeDTO","id","completed","requested","progress","getTasks","then","data","forEach","item","status","push","adddItemsToColumn","com","req","prog","completedCol","requestedCol","progressCol","inprogress","page","size","employeeid","requestOptions","method","headers","fetch","response","ok","json","Promise","reject","changeTaskStatus","taskID","onDragEnd","result","destination","source","droppableId","newStatus","sourceColumn","destColumn","sourceItems","destItems","changed","splice","index","length","handleTaskExpand","taskId","event","newExpanded","handleSubTaskExpand","justifyContent","height","Object","entries","map","provided","snapshot","droppableProps","innerRef","background","isDraggingOver","paddingBottom","minWidth","minHeight","String","draggableProps","dragHandleProps","userSelect","borderRadius","style","e","textContent","alignContent","flexwrap","startTime","toString","split","deadline","marginLeft","description","subtasks","paddingLeft","paddingRight","subtask","placeholder"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport APIURL from '../Services/Globals';\r\nimport { getCurrentUser } from '../Services/AuthService';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    column: {\r\n        margin: \"8px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '8px',\r\n        marginBottom: '2px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        width: '100%',\r\n    },\r\n    timeChip: {\r\n        margin: \"2px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"11px\",\r\n        fontWeight: \"550\"\r\n\r\n    }\r\n}));\r\n\r\nconst UserTasks = () => {\r\n    const classes = useStyles();\r\n    const [expandedTask, setExpandedTask] = useState('');\r\n    const [expandedSubTask, setExpandedSubTask] = useState('');\r\n    const [columns, setColumns] = useState({\r\n\r\n        ['requested']: {\r\n            columnId: \"requested\",\r\n            name: \"Requested\",\r\n            statusName: \"Requested\",\r\n            items: []\r\n        },\r\n        ['inprogress']: {\r\n            columnId: \"inprogress\",\r\n            name: \"In Progress\",\r\n            statusName: \"In-Progress\",\r\n            items: []\r\n        },\r\n        ['completed']: {\r\n            columnId: \"completed\",\r\n            name: \"Completed\",\r\n            statusName: \"Completed\",\r\n            items: []\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        const userID = getCurrentUser().userDetails.employeeDTO.id;\r\n        let completed = [];\r\n        let requested = [];\r\n        let progress = [];\r\n        getTasks(1, 10, userID,).then((data) => {\r\n            data.items.forEach(item => {\r\n                switch (item.status) {\r\n                    case \"Requested\":\r\n                        requested.push(item)\r\n                        break;\r\n                    case \"Completed\":\r\n                        completed.push(item)\r\n                        break;\r\n                    case \"In-Progress\":\r\n                        progress.push(item)\r\n                        break;\r\n                }\r\n            });\r\n            adddItemsToColumn(completed, requested, progress);\r\n        });;\r\n    }, []);\r\n\r\n    const adddItemsToColumn = (com, req, prog) => {\r\n        const completedCol = columns.completed;\r\n        const requestedCol = columns.requested;\r\n        const progressCol = columns.inprogress;\r\n        setColumns({\r\n            ...columns, [completedCol.columnId]: {\r\n                ...completedCol,\r\n                items: com\r\n            }, [requestedCol.columnId]: {\r\n                ...requestedCol,\r\n                items: req\r\n            }, [progressCol.columnId]: {\r\n                ...progressCol,\r\n                items: prog\r\n            },\r\n        })\r\n    }\r\n\r\n    const getTasks = async (page, size, employeeid, status) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        return await fetch(APIURL +\r\n            `tasks?page=${page}&size=${size}&employeeid=${employeeid}`,\r\n            requestOptions\r\n        ).then((response) => {\r\n            if (response.ok)\r\n                return response.json();\r\n            else\r\n                return Promise.reject();\r\n        })\r\n            .then(data => {\r\n                return data\r\n            })\r\n    }\r\n\r\n    const changeTaskStatus = async (taskID, status) => {\r\n        const requestOptions = {\r\n            method: 'Put',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        return await fetch(APIURL +\r\n            `tasks?id=${taskID}&status=${status}`,\r\n            requestOptions\r\n        ).then((response) => {\r\n            if (response.ok)\r\n                return response.json();\r\n            else\r\n                return Promise.reject();\r\n        })\r\n            .then(data => {\r\n                return data\r\n            })\r\n    }\r\n\r\n    const onDragEnd = (result, columns, setColumns) => {\r\n        if (!result.destination) return;\r\n        const { source, destination } = result;\r\n        if (source.droppableId !== destination.droppableId) {\r\n            const newStatus = columns[destination.droppableId].statusName;\r\n            const sourceColumn = columns[source.droppableId];\r\n            const destColumn = columns[destination.droppableId];\r\n            const sourceItems = [...sourceColumn.items];\r\n            const destItems = [...destColumn.items];\r\n\r\n            const [changed] = sourceItems.splice(source.index, 1);\r\n            changed.status = newStatus;\r\n            destItems.splice(destItems.length, 0, changed);\r\n            //destItems.splice(destination.index, 0, removed);\r\n\r\n            changeTaskStatus(changed.id, changed.status).then();\r\n\r\n            setColumns({\r\n                ...columns,\r\n                [source.droppableId]: {\r\n                    ...sourceColumn,\r\n                    items: sourceItems\r\n                },\r\n                [destination.droppableId]: {\r\n                    ...destColumn,\r\n                    items: destItems\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedTask(newExpanded ? taskId : false);\r\n    }\r\n    const handleSubTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedSubTask(newExpanded ? taskId : false);\r\n\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\r\n            <DragDropContext\r\n                onDragEnd={(result) => onDragEnd(result, columns, setColumns)}\r\n            >\r\n                {Object.entries(columns).map(([columnId, column], index) => {\r\n                    return (\r\n                        <Card className={classes.column}\r\n\r\n                            key={columnId}\r\n                        >\r\n                            <div className={classes.title}>\r\n                                <Typography noWrap variant=\"h5\">{column.name}</Typography>\r\n                            </div>\r\n                            <Droppable droppableId={columnId} key={columnId}>\r\n                                {(provided, snapshot) => {\r\n                                    return (\r\n                                        <CardContent {...provided.droppableProps}\r\n                                            ref={provided.innerRef}\r\n                                            style={{\r\n                                                background: snapshot.isDraggingOver\r\n                                                    ? \"rgb(128 128 128)\"\r\n                                                    : \"#424242\",\r\n                                                padding: \"10px\",\r\n                                                paddingBottom: \"0\",\r\n                                                minWidth: \"300px\",\r\n                                                minHeight: \"300px\"\r\n                                            }}\r\n                                        >\r\n                                            {column.items.map((item, index) => {\r\n                                                return (\r\n                                                    <Draggable\r\n                                                        key={item.id}\r\n                                                        draggableId={String(item.id)}\r\n                                                        index={index}\r\n                                                    >\r\n                                                        {(provided, snapshot) => {\r\n                                                            return (\r\n                                                                <Accordion\r\n                                                                    expanded={expandedTask === item.id}\r\n                                                                    onChange={handleTaskExpand(item.id)}\r\n                                                                    ref={provided.innerRef}\r\n                                                                    {...provided.draggableProps}\r\n                                                                    {...provided.dragHandleProps}\r\n                                                                    style={{\r\n                                                                        userSelect: \"none\",\r\n                                                                        backgroundColor:\r\n                                                                            item.status === \"In-Progress\"\r\n                                                                                ? \"rgb(93 135 230)\"\r\n                                                                                : item.status === \"Requested\"\r\n                                                                                    ? \"rgb(255 188 0)\"\r\n                                                                                    : \"rgb(3 189 0)\",\r\n                                                                        color: \"black\",\r\n                                                                        borderRadius: '4px',\r\n                                                                        marginBottom: '4px',\r\n                                                                        ...provided.draggableProps.style\r\n                                                                    }}\r\n                                                                >\r\n\r\n                                                                    <AccordionSummary\r\n                                                                        expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                                                        style={{ padding: '8px' }}\r\n                                                                        onClick={(e) => e.textContent != '' ? setExpandedTask('') : null}\r\n                                                                    >\r\n                                                                        <Typography variant=\"subtitle1\">{item.name}</Typography>\r\n                                                                    </AccordionSummary>\r\n                                                                    <AccordionDetails style={{\r\n                                                                        display: \"flex\",\r\n\r\n                                                                        alignContent: \"flex-start\",\r\n                                                                        flexDirection: 'column',\r\n                                                                        padding: '0px',\r\n                                                                    }}>\r\n                                                                        <div style={{\r\n                                                                            display: \"flex\",\r\n                                                                            flexDirection: \"row\",\r\n                                                                            alignContent: 'space-around',\r\n                                                                            alignItems: 'stretch',\r\n                                                                            flexwrap: 'nowrap',\r\n                                                                            justifyContent: 'space-evenly'\r\n                                                                        }}>\r\n                                                                            <Chip\r\n                                                                                className={classes.timeChip}\r\n                                                                                label={\"Start: \" + item.startTime.toString().split('T')[0]}\r\n                                                                                color=\"primary\"\r\n                                                                            />\r\n                                                                            <Chip\r\n                                                                                className={classes.timeChip}\r\n                                                                                label={\"Deadline: \" + item.deadline.toString().split('T')[0]}\r\n                                                                                color=\"primary\"\r\n                                                                            />\r\n                                                                        </div>\r\n                                                                        <Typography\r\n                                                                            variant=\"body1\"\r\n                                                                            style={{ marginLeft: '5px', marginBottom: '5px' }}\r\n                                                                        >\r\n                                                                            {item.description}\r\n                                                                        </Typography>\r\n\r\n\r\n                                                                        {item.subtasks.length === 0 ? null :\r\n                                                                            <div style={{\r\n                                                                                paddingLeft: '8px',\r\n                                                                                paddingRight: '8px',\r\n                                                                                backgroundColor: \"rgb(0 0 0 / 26%)\"\r\n                                                                            }}>\r\n                                                                                <Typography>\r\n                                                                                    Subtasks:\r\n                                                                                </Typography>\r\n                                                                                {item.subtasks.map((subtask) => {\r\n                                                                                    return (\r\n                                                                                        <Accordion\r\n                                                                                            expanded={expandedSubTask === subtask.id}\r\n                                                                                            onChange={handleSubTaskExpand(subtask.id)}\r\n                                                                                            key={subtask.id}\r\n                                                                                            style={{\r\n                                                                                                backgroundColor:\r\n                                                                                                    item.status === \"In-Progress\"\r\n                                                                                                        ? \"rgb(93 135 230)\"\r\n                                                                                                        : item.status === \"Requested\"\r\n                                                                                                            ? \"rgb(255 234 144)\"\r\n                                                                                                            : \"rgb(3 189 0)\",\r\n                                                                                                color: \"black\",\r\n                                                                                                marginBottom: '4px',\r\n                                                                                                borderRadius: '4px',\r\n                                                                                                padding: '0px'\r\n\r\n                                                                                            }}>\r\n                                                                                            <AccordionSummary\r\n                                                                                                expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                                                                            >\r\n                                                                                                <Typography>\r\n                                                                                                    {subtask.name}\r\n                                                                                                </Typography>\r\n                                                                                            </AccordionSummary>\r\n                                                                                            <AccordionDetails>\r\n                                                                                                {subtask.description}\r\n                                                                                            </AccordionDetails>\r\n                                                                                        </Accordion>\r\n                                                                                    );\r\n                                                                                })}\r\n                                                                            </div>\r\n                                                                        }\r\n                                                                    </AccordionDetails>\r\n                                                                </Accordion>\r\n                                                            );\r\n                                                        }}\r\n                                                    </Draggable>\r\n                                                );\r\n                                            })}\r\n                                            {provided.placeholder}\r\n                                        </CardContent>\r\n                                    );\r\n                                }}\r\n                            </Droppable>\r\n                        </Card>\r\n                    );\r\n                })}\r\n            </DragDropContext>\r\n        </div >\r\n    );\r\n}\r\nexport default UserTasks;"]},"metadata":{},"sourceType":"module"}