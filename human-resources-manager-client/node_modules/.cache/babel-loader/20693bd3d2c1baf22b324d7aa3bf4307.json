{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Komputer\\\\source\\\\repos\\\\HumanResourcesManager\\\\human-resources-manager-client\\\\src\\\\Components\\\\Tasks\\\\TasksList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport APIURL from '../../Services/Globals';\nimport { getCurrentUser } from '../../Services/AuthService';\nimport moment from \"moment\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport { getTasks } from \"../../Services/TasksService\";\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Divider from '@material-ui/core/Divider';\nconst useStyles = makeStyles(theme => ({\n  tasksContainer: {\n    margin: '0 auto',\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  listComponent: {\n    width: '100%',\n    maxWidth: 360,\n    backgroundColor: theme.palette.background.paper,\n    color: 'white',\n    boxShadow: theme.shadows[2],\n    borderRadius: '3px'\n  },\n  tasksDetailsCol: {\n    margin: \"8px\",\n    display: \"flex\",\n    flexDirection: \"column\"\n  },\n  title: {\n    color: theme.palette.text.primary,\n    textAlign: 'center',\n    padding: '8px',\n    marginBottom: '2px',\n    backgroundColor: theme.palette.primary.main,\n    boxShadow: theme.shadows[2],\n    width: '100%'\n  },\n  statusContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    margin: '4px',\n    marginLeft: '15px'\n  },\n  chipContainer: {\n    display: \"flex\",\n    flexDirection: \"row\",\n    alignContent: 'space-around',\n    alignItems: 'stretch',\n    flexwrap: 'nowrap',\n    justifyContent: 'space-evenly'\n  },\n  timeChip: {\n    margin: \"2px\",\n    boxShadow: theme.shadows[2],\n    fontSize: \"12px\",\n    fontWeight: \"550\"\n  },\n  subtaskAccordion: {\n    backgroundColor: '#3f51b5',\n    color: \"white\",\n    marginTop: \"8px\",\n    marginBottom: '4px',\n    borderRadius: '4px',\n    padding: '0px',\n    '&::before': {\n      height: 0\n    }\n  }\n}));\n\nconst TasksList = () => {\n  _s();\n\n  const classes = useStyles();\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [tasks, setTasks] = useState([]);\n  const [expandedSubTask, setExpandedSubTask] = useState('');\n  useEffect(() => {\n    getTasks(1, 10, 12).then(data => {\n      setTasks(data.items);\n    });\n  }, []);\n\n  const handleListItemClick = (event, index) => {\n    setSelectedIndex(index);\n  };\n\n  const handleSubTaskExpand = taskId => (event, newExpanded) => {\n    setExpandedSubTask(newExpanded ? taskId : false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tasks.length === 0 ? null : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.tasksContainer,\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        component: \"nav\",\n        className: classes.listComponent,\n        children: tasks.map((task, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(ListItem, {\n            button: true,\n            selected: selectedIndex === index,\n            onClick: event => handleListItemClick(event, index),\n            children: [/*#__PURE__*/_jsxDEV(ListItemText, {\n              primary: task.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              label: task.status,\n              style: {\n                boxShadow: 'rgb(0 0 0 / 20%) 0px 0px 1px -2px, rgb(0 0 0 / 14%) 0px 1px 2px 0px, rgb(0 0 0 / 12%) 0px 0px 5px 0px',\n                fontSize: \"12px\",\n                fontWeight: \"550\",\n                padding: \"5px\",\n                minWidth: '92px',\n                color: task.status === \"In-Progress\" ? \"white\" : \"black\",\n                background: task.status === \"In-Progress\" ? \"rgb(56 81 216)\" : task.status === \"Requested\" ? \"rgb(231 170 35)\" : \"rgb(0 158 7)\"\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 117,\n              columnNumber: 37\n            }, this)]\n          }, task.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 110,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            variant: \"inset\",\n            style: {\n              width: \"100%\",\n              margin: \"0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 135,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(Card, {\n        className: classes.tasksDetailsCol,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.title,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            noWrap: true,\n            variant: \"h5\",\n            children: tasks[selectedIndex].name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.statusContainer,\n          children: [/*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"h6\",\n            children: \"Status:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 146,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Chip, {\n            label: tasks[selectedIndex].status,\n            style: {\n              boxShadow: '0px 3px 1px -2px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)',\n              fontSize: \"14px\",\n              fontWeight: \"550\",\n              margin: \"2px\",\n              marginLeft: \"10px\",\n              marginRight: \"10px\",\n              width: \"99%\",\n              color: tasks[selectedIndex].status === \"In-Progress\" ? \"white\" : \"black\",\n              background: tasks[selectedIndex].status === \"In-Progress\" ? \"rgb(56 81 216)\" : tasks[selectedIndex].status === \"Requested\" ? \"rgb(231 170 35)\" : \"rgb(0 158 7)\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CardContent, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.chipContainer,\n            children: [/*#__PURE__*/_jsxDEV(Chip, {\n              className: classes.timeChip,\n              label: \"Start: \" + moment(tasks[selectedIndex].startTime).format(\"YYYY-MM-DD\"),\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(Chip, {\n              className: classes.timeChip,\n              label: \"Deadline: \" + moment(tasks[selectedIndex].deadline).format(\"YYYY-MM-DD\"),\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 175,\n              columnNumber: 33\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            variant: \"inset\",\n            style: {\n              width: \"100%\",\n              margin: \"0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            noWrap: true,\n            variant: \"subtitle1\",\n            children: tasks[selectedIndex].description\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 183,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Divider, {\n            variant: \"inset\",\n            style: {\n              width: \"100%\",\n              margin: \"0\"\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 186,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            noWrap: true,\n            variant: \"subtitle1\",\n            children: \"Subtasks:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 188,\n            columnNumber: 29\n          }, this), tasks[selectedIndex].subtasks.map((subtask, index) => /*#__PURE__*/_jsxDEV(Accordion, {\n            expanded: expandedSubTask === subtask.id,\n            onChange: handleSubTaskExpand(subtask.id),\n            className: classes.subtaskAccordion,\n            children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n              expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {\n                style: {\n                  color: \"black\"\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 200,\n                columnNumber: 53\n              }, this),\n              children: /*#__PURE__*/_jsxDEV(Typography, {\n                children: subtask.name\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 41\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n              children: subtask.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 37\n            }, this)]\n          }, subtask.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 33\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 17\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TasksList, \"xPL0GClsOqthtkyt/ShBaSOgeM0=\", false, function () {\n  return [useStyles];\n});\n\n_c = TasksList;\nexport default TasksList;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksList\");","map":{"version":3,"sources":["C:/Users/Komputer/source/repos/HumanResourcesManager/human-resources-manager-client/src/Components/Tasks/TasksList.js"],"names":["React","useEffect","useState","APIURL","getCurrentUser","moment","makeStyles","getTasks","Card","CardContent","Typography","Accordion","AccordionSummary","AccordionDetails","Chip","ExpandMoreIcon","Button","IconButton","List","ListItem","ListItemText","MenuItem","Divider","useStyles","theme","tasksContainer","margin","display","flexDirection","listComponent","width","maxWidth","backgroundColor","palette","background","paper","color","boxShadow","shadows","borderRadius","tasksDetailsCol","title","text","primary","textAlign","padding","marginBottom","main","statusContainer","marginLeft","chipContainer","alignContent","alignItems","flexwrap","justifyContent","timeChip","fontSize","fontWeight","subtaskAccordion","marginTop","height","TasksList","classes","selectedIndex","setSelectedIndex","tasks","setTasks","expandedSubTask","setExpandedSubTask","then","data","items","handleListItemClick","event","index","handleSubTaskExpand","taskId","newExpanded","length","map","task","name","status","minWidth","id","marginRight","startTime","format","deadline","description","subtasks","subtask"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals';\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport moment from \"moment\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getTasks } from \"../../Services/TasksService\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    tasksContainer: {\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n    },\r\n    listComponent: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: 'white',\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '3px'\r\n    },\r\n    tasksDetailsCol: {\r\n        margin: \"8px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '8px',\r\n        marginBottom: '2px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        width: '100%',\r\n    },\r\n    statusContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        margin: '4px',\r\n        marginLeft: '15px',\r\n    },\r\n    chipContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignContent: 'space-around',\r\n        alignItems: 'stretch',\r\n        flexwrap: 'nowrap',\r\n        justifyContent: 'space-evenly'\r\n    },\r\n    timeChip: {\r\n        margin: \"2px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"12px\",\r\n        fontWeight: \"550\"\r\n\r\n    },\r\n    subtaskAccordion: {\r\n        backgroundColor: '#3f51b5',\r\n        color: \"white\",\r\n        marginTop: \"8px\",\r\n        marginBottom: '4px',\r\n        borderRadius: '4px',\r\n        padding: '0px',\r\n        '&::before': {\r\n            height: 0\r\n        }\r\n    }\r\n}));\r\n\r\nconst TasksList = () => {\r\n    const classes = useStyles();\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const [tasks, setTasks] = useState([]);\r\n    const [expandedSubTask, setExpandedSubTask] = useState('');\r\n\r\n    useEffect(() => {\r\n        getTasks(1, 10, 12).then((data) => {\r\n            setTasks(data.items)\r\n        })\r\n    }, []);\r\n\r\n    const handleListItemClick = (event, index) => {\r\n        setSelectedIndex(index);\r\n    };\r\n\r\n    const handleSubTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedSubTask(newExpanded ? taskId : false);\r\n    }\r\n\r\n    return (\r\n        <div >\r\n            {tasks.length === 0 ? null :\r\n                <div className={classes.tasksContainer}>\r\n                    <List component=\"nav\" className={classes.listComponent}>\r\n                        {tasks.map((task, index) => (\r\n                            <div>\r\n                                <ListItem\r\n                                    key={task.id}\r\n                                    button\r\n                                    selected={selectedIndex === index}\r\n                                    onClick={(event) => handleListItemClick(event, index)}\r\n                                >\r\n                                    <ListItemText primary={task.name} />\r\n                                    <Chip\r\n                                        label={task.status}\r\n                                        style={{\r\n                                            boxShadow: 'rgb(0 0 0 / 20%) 0px 0px 1px -2px, rgb(0 0 0 / 14%) 0px 1px 2px 0px, rgb(0 0 0 / 12%) 0px 0px 5px 0px',\r\n                                            fontSize: \"12px\",\r\n                                            fontWeight: \"550\",\r\n                                            padding: \"5px\",\r\n                                            minWidth: '92px',\r\n                                            color: task.status === \"In-Progress\" ? \"white\" : \"black\",\r\n                                            background: task.status === \"In-Progress\"\r\n                                                ? \"rgb(56 81 216)\"\r\n                                                : task.status === \"Requested\"\r\n                                                    ? \"rgb(231 170 35)\"\r\n                                                    : \"rgb(0 158 7)\",\r\n                                        }}\r\n                                    />\r\n\r\n                                </ListItem>\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} /></div>\r\n                        ))\r\n                        }\r\n                    </List>\r\n                    <Card className={classes.tasksDetailsCol}>\r\n                        <div className={classes.title}>\r\n                            <Typography noWrap variant=\"h5\">\r\n                                {tasks[selectedIndex].name}\r\n                            </Typography>\r\n                        </div>\r\n                        <div className={classes.statusContainer}>\r\n                            <Typography variant=\"h6\">\r\n                                Status:\r\n                            </Typography>\r\n                            <Chip\r\n                                label={tasks[selectedIndex].status}\r\n                                style={{\r\n                                    boxShadow: '0px 3px 1px -2px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0,0,0,0.14),0px 1px 5px 0px rgba(0,0,0,0.12)',\r\n                                    fontSize: \"14px\",\r\n                                    fontWeight: \"550\",\r\n                                    margin: \"2px\",\r\n                                    marginLeft: \"10px\",\r\n                                    marginRight: \"10px\",\r\n                                    width: \"99%\",\r\n                                    color: tasks[selectedIndex].status === \"In-Progress\" ? \"white\" : \"black\",\r\n                                    background: tasks[selectedIndex].status === \"In-Progress\"\r\n                                        ? \"rgb(56 81 216)\"\r\n                                        : tasks[selectedIndex].status === \"Requested\"\r\n                                            ? \"rgb(231 170 35)\"\r\n                                            : \"rgb(0 158 7)\",\r\n                                }}\r\n                            />\r\n                        </div>\r\n                        <CardContent>\r\n                            <div className={classes.chipContainer}>\r\n                                <Chip\r\n                                    className={classes.timeChip}\r\n                                    label={\"Start: \" + moment(tasks[selectedIndex].startTime).format(\"YYYY-MM-DD\")}\r\n                                    color=\"primary\"\r\n                                />\r\n                                <Chip\r\n                                    className={classes.timeChip}\r\n                                    label={\"Deadline: \" + moment(tasks[selectedIndex].deadline).format(\"YYYY-MM-DD\")}\r\n                                    color=\"primary\"\r\n                                />\r\n                            </div>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n\r\n                            <Typography noWrap variant=\"subtitle1\">\r\n                                {tasks[selectedIndex].description}\r\n                            </Typography>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n\r\n                            <Typography noWrap variant=\"subtitle1\">\r\n                                Subtasks:\r\n                            </Typography>\r\n\r\n                            {tasks[selectedIndex].subtasks.map((subtask, index) => (\r\n                                <Accordion\r\n                                    expanded={expandedSubTask === subtask.id}\r\n                                    onChange={handleSubTaskExpand(subtask.id)}\r\n                                    key={subtask.id}\r\n                                    className={classes.subtaskAccordion}\r\n                                >\r\n                                    <AccordionSummary\r\n                                        expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                    >\r\n                                        <Typography>\r\n                                            {subtask.name}\r\n                                        </Typography>\r\n                                    </AccordionSummary>\r\n                                    <AccordionDetails>\r\n                                        {subtask.description}\r\n                                    </AccordionDetails>\r\n                                </Accordion>\r\n                            ))}\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n            }\r\n        </div >\r\n    );\r\n}\r\nexport default TasksList;"]},"metadata":{},"sourceType":"module"}