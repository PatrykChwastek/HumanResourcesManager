{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Komputer\\\\source\\\\repos\\\\HumanResourcesManager\\\\human-resources-manager-client\\\\src\\\\Components\\\\UserTasks.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\nimport APIURL from '../Services/Globals';\nimport { getCurrentUser } from '../Services/AuthService';\n\nconst onDragEnd = (result, columns, setColumns) => {\n  if (!result.destination) return;\n  const {\n    source,\n    destination\n  } = result;\n\n  if (source.droppableId !== destination.droppableId) {\n    const sourceColumn = columns[source.droppableId];\n    const destColumn = columns[destination.droppableId];\n    const sourceItems = [...sourceColumn.items];\n    const destItems = [...destColumn.items];\n    const [removed] = sourceItems.splice(source.index, 1); //destItems.splice(destination.index, 0, removed);\n\n    destItems.splice(destItems.length, 0, removed);\n    setColumns({ ...columns,\n      [source.droppableId]: { ...sourceColumn,\n        items: sourceItems\n      },\n      [destination.droppableId]: { ...destColumn,\n        items: destItems\n      }\n    });\n  }\n};\n\nconst UserTasks = () => {\n  _s();\n\n  const [columns, setColumns] = useState({\n    ['completed']: {\n      columnId: \"completed\",\n      name: \"Completed\",\n      items: []\n    },\n    ['requested']: {\n      columnId: \"requested\",\n      name: \"Requested\",\n      items: []\n    },\n    ['inprogress']: {\n      columnId: \"inprogress\",\n      name: \"In Progress\",\n      items: []\n    }\n  });\n  useEffect(() => {\n    const userID = getCurrentUser().userDetails.employeeDTO.id;\n    getTasks(1, 10, userID).then(data => {\n      let completed = [];\n      let requested = [];\n      data.items.forEach(item => {\n        switch (item.status) {\n          case \"Requested\":\n            request.push(item);\n            break;\n\n          case \"Completed\":\n            completed.push(item);\n            break;\n\n          default:\n            break;\n        }\n      });\n      adddItemsToColumn(columns.completed, completed);\n      adddItemsToColumn(columns.requested, requested);\n    });\n    ;\n  }, []);\n\n  const adddItemsToColumn = (column, items) => {\n    setColumns({ ...columns,\n      [column.columnId]: { ...column,\n        items: items\n      }\n    });\n  };\n\n  const getTasks = async (page, size, employeeid, status) => {\n    const requestOptions = {\n      method: 'Get',\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    return await fetch(APIURL + `tasks?page=${page}&size=${size}&employeeid=${employeeid}`, requestOptions).then(response => {\n      if (response.ok) return response.json();else return Promise.reject();\n    }).then(data => {\n      return data;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      height: \"100%\"\n    },\n    children: /*#__PURE__*/_jsxDEV(DragDropContext, {\n      onDragEnd: result => onDragEnd(result, columns, setColumns),\n      children: Object.entries(columns).map(([columnId, column], index) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\",\n            flexDirection: \"column\",\n            alignItems: \"center\"\n          },\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: column.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              margin: 8\n            },\n            children: /*#__PURE__*/_jsxDEV(Droppable, {\n              droppableId: columnId,\n              children: (provided, snapshot) => {\n                return /*#__PURE__*/_jsxDEV(\"div\", { ...provided.droppableProps,\n                  ref: provided.innerRef,\n                  style: {\n                    background: snapshot.isDraggingOver ? \"lightblue\" : \"lightgrey\",\n                    padding: 4,\n                    width: 250,\n                    minHeight: 500\n                  },\n                  children: [column.items.map((item, index) => {\n                    return /*#__PURE__*/_jsxDEV(Draggable, {\n                      draggableId: String(item.id),\n                      index: index,\n                      children: (provided, snapshot) => {\n                        return /*#__PURE__*/_jsxDEV(\"div\", {\n                          ref: provided.innerRef,\n                          ...provided.draggableProps,\n                          ...provided.dragHandleProps,\n                          style: {\n                            userSelect: \"none\",\n                            padding: 16,\n                            margin: \"0 0 8px 0\",\n                            minHeight: \"50px\",\n                            backgroundColor: snapshot.isDragging ? \"#263B4A\" : \"#456C86\",\n                            color: \"white\",\n                            ...provided.draggableProps.style\n                          },\n                          children: item.name\n                        }, void 0, false, {\n                          fileName: _jsxFileName,\n                          lineNumber: 143,\n                          columnNumber: 69\n                        }, this);\n                      }\n                    }, item.id, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 136,\n                      columnNumber: 57\n                    }, this);\n                  }), provided.placeholder]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 45\n                }, this);\n              }\n            }, columnId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 119,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 118,\n            columnNumber: 29\n          }, this)]\n        }, columnId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 25\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 9\n  }, this);\n};\n\n_s(UserTasks, \"os9eus+ADnKX6BNSDl2kA1boONk=\");\n\n_c = UserTasks;\nexport default UserTasks;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserTasks\");","map":{"version":3,"sources":["C:/Users/Komputer/source/repos/HumanResourcesManager/human-resources-manager-client/src/Components/UserTasks.js"],"names":["React","useEffect","useState","DragDropContext","Draggable","Droppable","APIURL","getCurrentUser","onDragEnd","result","columns","setColumns","destination","source","droppableId","sourceColumn","destColumn","sourceItems","items","destItems","removed","splice","index","length","UserTasks","columnId","name","userID","userDetails","employeeDTO","id","getTasks","then","data","completed","requested","forEach","item","status","request","push","adddItemsToColumn","column","page","size","employeeid","requestOptions","method","headers","fetch","response","ok","json","Promise","reject","display","justifyContent","height","Object","entries","map","flexDirection","alignItems","margin","provided","snapshot","droppableProps","innerRef","background","isDraggingOver","padding","width","minHeight","String","draggableProps","dragHandleProps","userSelect","backgroundColor","isDragging","color","style","placeholder"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport APIURL from '../Services/Globals';\r\nimport { getCurrentUser } from '../Services/AuthService';\r\n\r\nconst onDragEnd = (result, columns, setColumns) => {\r\n    if (!result.destination) return;\r\n    const { source, destination } = result;\r\n    if (source.droppableId !== destination.droppableId) {\r\n        const sourceColumn = columns[source.droppableId];\r\n        const destColumn = columns[destination.droppableId];\r\n        const sourceItems = [...sourceColumn.items];\r\n        const destItems = [...destColumn.items];\r\n        const [removed] = sourceItems.splice(source.index, 1);\r\n\r\n        //destItems.splice(destination.index, 0, removed);\r\n\r\n        destItems.splice(destItems.length, 0, removed);\r\n        setColumns({\r\n            ...columns,\r\n            [source.droppableId]: {\r\n                ...sourceColumn,\r\n                items: sourceItems\r\n            },\r\n            [destination.droppableId]: {\r\n                ...destColumn,\r\n                items: destItems\r\n            }\r\n        });\r\n    }\r\n};\r\n\r\nconst UserTasks = () => {\r\n    const [columns, setColumns] = useState({\r\n        ['completed']: {\r\n            columnId: \"completed\",\r\n            name: \"Completed\",\r\n            items: []\r\n        },\r\n        ['requested']: {\r\n            columnId: \"requested\",\r\n            name: \"Requested\",\r\n            items: []\r\n        },\r\n        ['inprogress']: {\r\n            columnId: \"inprogress\",\r\n            name: \"In Progress\",\r\n            items: []\r\n        }\r\n    });\r\n\r\n    useEffect(() => {\r\n        const userID = getCurrentUser().userDetails.employeeDTO.id;\r\n        getTasks(1, 10, userID,).then((data) => {\r\n            let completed = [];\r\n            let requested = [];\r\n            data.items.forEach(item => {\r\n                switch (item.status) {\r\n                    case \"Requested\":\r\n                        request.push(item)\r\n                        break;\r\n                    case \"Completed\":\r\n                        completed.push(item)\r\n                        break;\r\n                    default:\r\n                        break;\r\n                }\r\n            });\r\n            adddItemsToColumn(columns.completed, completed);\r\n            adddItemsToColumn(columns.requested, requested);\r\n        });;\r\n    }, []);\r\n\r\n    const adddItemsToColumn = (column, items) => {\r\n        setColumns({\r\n            ...columns, [column.columnId]: {\r\n                ...column,\r\n                items: items\r\n            }\r\n        })\r\n    }\r\n\r\n    const getTasks = async (page, size, employeeid, status) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        return await fetch(APIURL +\r\n            `tasks?page=${page}&size=${size}&employeeid=${employeeid}`,\r\n            requestOptions\r\n        ).then((response) => {\r\n            if (response.ok)\r\n                return response.json();\r\n            else\r\n                return Promise.reject();\r\n        })\r\n            .then(data => {\r\n                return data\r\n            })\r\n    }\r\n\r\n    return (\r\n        <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\r\n            <DragDropContext\r\n                onDragEnd={(result) => onDragEnd(result, columns, setColumns)}\r\n            >\r\n                {Object.entries(columns).map(([columnId, column], index) => {\r\n                    return (\r\n                        <div\r\n                            style={{\r\n                                display: \"flex\",\r\n                                flexDirection: \"column\",\r\n                                alignItems: \"center\"\r\n                            }}\r\n                            key={columnId}\r\n                        >\r\n                            <h2>{column.name}</h2>\r\n                            <div style={{ margin: 8 }}>\r\n                                <Droppable droppableId={columnId} key={columnId}>\r\n                                    {(provided, snapshot) => {\r\n                                        return (\r\n                                            <div\r\n                                                {...provided.droppableProps}\r\n                                                ref={provided.innerRef}\r\n                                                style={{\r\n                                                    background: snapshot.isDraggingOver\r\n                                                        ? \"lightblue\"\r\n                                                        : \"lightgrey\",\r\n                                                    padding: 4,\r\n                                                    width: 250,\r\n                                                    minHeight: 500\r\n                                                }}\r\n                                            >\r\n                                                {column.items.map((item, index) => {\r\n                                                    return (\r\n                                                        <Draggable\r\n                                                            key={item.id}\r\n                                                            draggableId={String(item.id)}\r\n                                                            index={index}\r\n                                                        >\r\n                                                            {(provided, snapshot) => {\r\n                                                                return (\r\n                                                                    <div\r\n                                                                        ref={provided.innerRef}\r\n                                                                        {...provided.draggableProps}\r\n                                                                        {...provided.dragHandleProps}\r\n                                                                        style={{\r\n                                                                            userSelect: \"none\",\r\n                                                                            padding: 16,\r\n                                                                            margin: \"0 0 8px 0\",\r\n                                                                            minHeight: \"50px\",\r\n                                                                            backgroundColor: snapshot.isDragging\r\n                                                                                ? \"#263B4A\"\r\n                                                                                : \"#456C86\",\r\n                                                                            color: \"white\",\r\n                                                                            ...provided.draggableProps.style\r\n                                                                        }}\r\n                                                                    >\r\n                                                                        {item.name}\r\n                                                                    </div>\r\n                                                                );\r\n                                                            }}\r\n                                                        </Draggable>\r\n                                                    );\r\n                                                })}\r\n                                                {provided.placeholder}\r\n                                            </div>\r\n                                        );\r\n                                    }}\r\n                                </Droppable>\r\n                            </div>\r\n                        </div>\r\n                    );\r\n                })}\r\n            </DragDropContext>\r\n        </div>\r\n    );\r\n}\r\nexport default UserTasks;"]},"metadata":{},"sourceType":"module"}