[{"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\index.js":"1","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\App.js":"2","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\reportWebVitals.js":"3","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\GlobalComponents.js":"4","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\AuthService.js":"5","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\MainComponent.js":"6","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\Globals.js":"7","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\StartPage.js":"8","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksColumns.js":"9","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeList.js":"10","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeDetails.js":"11","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\LoginUser.js":"12","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Dashboard.js":"13","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\JobApplication\\CreateJobApplication.js":"14","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\TasksService.js":"15","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksList.js":"16","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamTasks.js":"17","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\CreateTask.js":"18","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeForm.js":"19","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\Team_Dashboard.js":"20","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamList.js":"21"},{"size":242,"mtime":1626196431129,"results":"22","hashOfConfig":"23"},{"size":1025,"mtime":1642248061865,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":499162500000,"results":"25","hashOfConfig":"23"},{"size":9415,"mtime":1645431397788,"results":"26","hashOfConfig":"23"},{"size":2323,"mtime":1641899545325,"results":"27","hashOfConfig":"23"},{"size":8230,"mtime":1645262493421,"results":"28","hashOfConfig":"23"},{"size":70,"mtime":1641207518125,"results":"29","hashOfConfig":"23"},{"size":1991,"mtime":1644314466755,"results":"30","hashOfConfig":"23"},{"size":23762,"mtime":1644843193967,"results":"31","hashOfConfig":"23"},{"size":17228,"mtime":1645180967923,"results":"32","hashOfConfig":"23"},{"size":5898,"mtime":1645091111544,"results":"33","hashOfConfig":"23"},{"size":2655,"mtime":1642247952771,"results":"34","hashOfConfig":"23"},{"size":11157,"mtime":1645179615793,"results":"35","hashOfConfig":"23"},{"size":2650,"mtime":1642248358913,"results":"36","hashOfConfig":"23"},{"size":3612,"mtime":1644842967971,"results":"37","hashOfConfig":"23"},{"size":32080,"mtime":1645262495945,"results":"38","hashOfConfig":"23"},{"size":1175,"mtime":1643966113607,"results":"39","hashOfConfig":"23"},{"size":16770,"mtime":1644833727100,"results":"40","hashOfConfig":"23"},{"size":14452,"mtime":1645095714189,"results":"41","hashOfConfig":"23"},{"size":15679,"mtime":1645183424276,"results":"42","hashOfConfig":"23"},{"size":16410,"mtime":1645433509344,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"yin7gd",{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"46"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":"67","usedDeprecatedRules":"46"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"46"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86","usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"46"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"46"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"95","usedDeprecatedRules":"46"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"46"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\index.js",[],["101","102"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\App.js",["103","104","105"],"import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { createTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport LoginUser from './Components/Users/LoginUser';\nimport MainComponent from './Components/MainComponent';\nimport StartPage from './Components/StartPage';\n\nconst theme = createTheme({\n  palette: {\n    secondary: {\n      light: \"#3b783d\",\n      main: \"#367338\",\n      dark: \"#2e6630\",\n      contrastText: \"#fff\"\n    },\n    type: 'dark'\n  }\n})\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <StartPage />\n          </Route>\n          <Route path=\"/login\">\n            <LoginUser />\n          </Route>\n          <Route path=\"/main\" >\n            <MainComponent />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\reportWebVitals.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\GlobalComponents.js",["106"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\AuthService.js",["107"],"import APIURL from './Globals'\r\n\r\nconst login = (loginData) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(loginData)\r\n    };\r\n    return fetch(APIURL + 'users/login', requestOptions)\r\n        .then((response) => {\r\n            if (response.ok)\r\n                return response.json();\r\n            else\r\n                return Promise.reject();\r\n        })\r\n        .then(data => {\r\n            localStorage.setItem(\"user\", JSON.stringify(data))\r\n        })\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(\"user\");\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nexport const authHeader = () => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    if (user && user.token) {\r\n        return 'Bearer ' + user.token;\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n\r\nexport const getUserAccess = () => {\r\n    const permissions = getCurrentUser().userDetails.employeeDTO.permissions;\r\n    if (permissions === undefined || permissions.length < 1) {\r\n        return false;\r\n    }\r\n    const isUsserPermit = (premName) => {\r\n        let isPermit = false;\r\n        permissions.forEach(element => {\r\n            if (element.name === premName) {\r\n                isPermit = true;\r\n                return;\r\n            }\r\n        });\r\n        return isPermit;\r\n    }\r\n\r\n    const allowedViews = {\r\n        humanResources: isUsserPermit(\"Human-Resources\"),\r\n        admin: isUsserPermit('Admin'),\r\n        teamManager: isUsserPermit('Team-Manager')\r\n    };\r\n\r\n    if (allowedViews.admin) {\r\n        allowedViews = {\r\n            humanResources: true,\r\n            admin: true,\r\n            teamManager: true\r\n        }\r\n    }\r\n    return allowedViews;\r\n}\r\n\r\nconst testRoles = () => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: new Headers({ 'Content-Type': 'application/json', 'Authorization': authHeader() }),\r\n    };\r\n    fetch(APIURL + 'users?page=1&size=4', requestOptions)\r\n        .then(response => response.json())\r\n        .then(data => console.log(data))\r\n}\r\n// eslint-disable-next-line\r\nexport default {\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n    authHeader,\r\n    getUserAccess,\r\n    testRoles\r\n};","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\MainComponent.js",["108","109","110","111","112","113"],"import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory } from \"react-router-dom\";\r\nimport EmployeeList from './Employees/EmployeeList';\r\nimport HR_Dashboard from './Employees/HR_Dashboard';\r\nimport CreateJobApplication from './JobApplication/CreateJobApplication';\r\nimport EmployeeForm from './Employees/EmployeeForm';\r\nimport { EmployeeDetails } from './Employees/EmployeeDetails';\r\nimport LoginUser from './Users/LoginUser';\r\nimport Team_Dashboard from './Teams/Team_Dashboard';\r\nimport TeamTasks from \"./Teams/TeamTasks\";\r\nimport TasksColumns from './Tasks/TasksColumns';\r\nimport TasksList from \"./Tasks/TasksList\";\r\nimport CreateTask from \"./Tasks/CreateTask\";\r\nimport TeamList from \"./Teams/TeamList\"\r\nimport { getUserAccess, logout, getCurrentUser } from '../Services/AuthService';\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport TreeView from '@material-ui/lab/TreeView';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport TreeItem from '@material-ui/lab/TreeItem';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n        background: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    drawerContainer: {\r\n        overflow: 'auto',\r\n        '& .MuiTypography-body1': {\r\n            fontSize: '19px'\r\n        },\r\n        '& .MuiTreeItem-root.Mui-selected > .MuiTreeItem-content .MuiTreeItem-label': {\r\n            backgroundColor: \"#3f51b5\",\r\n            color: 'white',\r\n            marginRight: '12px',\r\n            padding: '2px 6px',\r\n            paddingRight: '0',\r\n            borderRadius: '4px',\r\n            boxShadow: theme.shadows[2],\r\n        },\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: '1.5rem',\r\n        paddingTop: '5rem',\r\n    },\r\n    linkButtons: {\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n    },\r\n}));\r\n\r\nconst MainComponent = () => {\r\n    const [userAccess] = useState(getUserAccess());\r\n    const history = useHistory();\r\n\r\n    const currentLocation = () => {\r\n        switch (history.location.pathname) {\r\n            case '/main/dashboard':\r\n                return ['1'];\r\n            case '/main/tasks-columns':\r\n                return ['3'];\r\n            case '/main/tasks-list':\r\n                return ['4'];\r\n        }\r\n    }\r\n    const handleLogout = () => {\r\n        logout();\r\n        history.push(\"/login\");\r\n    }\r\n    const classes = useStyles();\r\n    return (\r\n        <Router>\r\n            <div className={classes.root}>\r\n                <AppBar position=\"fixed\" className={classes.appBar}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" component=\"div\" style={{ flexGrow: 1 }}>\r\n                            Human Resources Manager\r\n                        </Typography>\r\n                        <Button onClick={handleLogout}>Logout</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    className={classes.drawer}\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: classes.drawerPaper,\r\n                    }}\r\n                >\r\n                    <Toolbar />\r\n                    <div className={classes.drawerContainer}>\r\n                        <TreeView\r\n                            defaultExpanded={['2']}\r\n                            defaultSelected={currentLocation()}\r\n                            defaultCollapseIcon={<ExpandMoreIcon />}\r\n                            defaultExpandIcon={<ChevronRightIcon />}\r\n                        >\r\n                            {userAccess.humanResources === false ? null :\r\n                                <Link className={classes.linkButtons} to=\"/main/dashboard\">\r\n                                    <TreeItem nodeId=\"1\" label=\"Dashboard\" />\r\n                                </Link>\r\n                            }\r\n                            <TreeItem nodeId=\"2\" label=\"My Tasks:\">\r\n                                <Link className={classes.linkButtons} to=\"/main/tasks-columns\">\r\n                                    <TreeItem nodeId=\"3\" label=\"Columns\" />\r\n                                </Link>\r\n                                <Link className={classes.linkButtons} to=\"/main/tasks-list\" >\r\n                                    <TreeItem nodeId=\"4\" label=\"List\" />\r\n                                </Link>\r\n                            </TreeItem>\r\n                            {userAccess.humanResources === false ? null :\r\n                                <React.Fragment>\r\n                                    <Link className={classes.linkButtons} to=\"/main/employees\">\r\n                                        <TreeItem nodeId=\"5\" label=\"Employees\" />\r\n                                    </Link>\r\n                                    <Link className={classes.linkButtons} to=\"/main/team-list\">\r\n                                        <TreeItem nodeId=\"6\" label=\"Team List\" />\r\n                                    </Link>\r\n                                    <Link className={classes.linkButtons} to=\"/main/applications\">\r\n                                        <TreeItem nodeId=\"7\" label=\"Job Applications\" />\r\n                                    </Link>\r\n                                </React.Fragment>\r\n                            }\r\n\r\n                            <TreeItem nodeId=\"8\" label=\"Team Manager\">\r\n                                <Link className={classes.linkButtons} to=\"/main/team-manager\">\r\n                                    <TreeItem nodeId=\"9\" label=\"Team Dashboard\" />\r\n                                </Link>\r\n                                <Link className={classes.linkButtons} to=\"/main/team-tasks\">\r\n                                    <TreeItem nodeId=\"10\" label=\"Team Tasks\" />\r\n                                </Link>\r\n                            </TreeItem >\r\n                        </TreeView>\r\n                    </div>\r\n                </Drawer>\r\n                <main className={classes.content}>\r\n                    <Switch>\r\n                        <Route path=\"/main/dashboard\">\r\n                            <HR_Dashboard />\r\n                        </Route>\r\n                        <Route path=\"/main/tasks-columns\">\r\n                            <TasksColumns />\r\n                        </Route>\r\n                        <Route path=\"/main/tasks-list\">\r\n                            <TasksList userId={getCurrentUser().userDetails.employeeDTO.id} />\r\n                        </Route>\r\n                        <Route path=\"/main/employee-form\">\r\n                            <EmployeeForm />\r\n                        </Route>\r\n                        <Route path=\"/main/employees\" >\r\n                            <EmployeeList />\r\n                        </Route>\r\n                        <Route path=\"/main/employee-details/:id\" >\r\n                            <EmployeeDetails />\r\n                        </Route>\r\n                        <Route path=\"/main/team-list\">\r\n                            <TeamList />\r\n                        </Route>\r\n                        <Route path=\"/main/team-manager\">\r\n                            <Team_Dashboard />\r\n                        </Route>\r\n                        <Route path=\"/main/team-tasks\">\r\n                            <TeamTasks />\r\n                        </Route>\r\n                        <Route path=\"/main/create-task\">\r\n                            <CreateTask />\r\n                        </Route>\r\n                    </Switch>\r\n                </main>\r\n            </div >\r\n        </Router >\r\n    );\r\n}\r\nexport default MainComponent;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\Globals.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\StartPage.js",["114"],"import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    redirectButton: {\r\n        margin: '8px',\r\n        width: \"10rem\",\r\n    },\r\n    mainCard: {\r\n        margin: '0 auto',\r\n        marginTop: '32px',\r\n        display: 'block',\r\n        maxWidth: 750,\r\n    },\r\n    cardMedia: {\r\n        height: 350,\r\n    },\r\n}));\r\n\r\nconst StartPage = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.mainCard}>\r\n                <CardActionArea>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            Human Resources Manager\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                            A prototype application. To store employees data, and assign tasks to them.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    <Link style={{ textDecoration: \"none\" }} to=\"/login\">\r\n                        <Button\r\n                            className={classes.redirectButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >To Login Page</Button>\r\n                    </Link>\r\n                </CardActions>\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default StartPage;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksColumns.js",["115","116","117","118","119","120"],"import React, { useEffect, useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { getTasks, changeTaskStatus, getUserTasksStats } from '../../Services/TasksService';\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    taskTabContainer: {\r\n        margin: '0 auto',\r\n        width: 'max-content'\r\n    },\r\n    topBar: {\r\n        display: 'flex',\r\n        flexDirection: 'row'\r\n    },\r\n    filterBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.8rem\",\r\n        paddingRight: \"1.8rem\",\r\n        borderRadius: '4px',\r\n        marginLeft: '8px',\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n    },\r\n    delayedDisplay: {\r\n        width: \"max-content\",\r\n        padding: \"0 8px 0\",\r\n        marginLeft: '8px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        background: theme.palette.grey[800],\r\n        \"& a\": {\r\n            color: \"white\",\r\n            textDecoration: \"none\",\r\n        }\r\n\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n    column: {\r\n        margin: \"8px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\"\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '8px',\r\n        marginBottom: '2px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        width: '100%',\r\n    },\r\n    chipContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignContent: 'space-around',\r\n        alignItems: 'stretch',\r\n        flexwrap: 'nowrap',\r\n        justifyContent: 'space-evenly'\r\n    },\r\n    timeChip: {\r\n        margin: \"2px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"11px\",\r\n        fontWeight: \"550\"\r\n    },\r\n}));\r\n\r\nconst filter = {\r\n    name: \"\",\r\n    status: \"Delayed\",\r\n    isBStartTime: false,\r\n    bStartTime: undefined,\r\n    isAStartTime: false,\r\n    aStartTime: undefined,\r\n    isBDeadline: false,\r\n    bDeadline: undefined,\r\n    isADeadline: false,\r\n    aDeadline: undefined\r\n};\r\n\r\nconst userID = getCurrentUser().userDetails.employeeDTO.id;\r\nconst TasksColumns = () => {\r\n    const classes = useStyles();\r\n    const [expandedTask, setExpandedTask] = useState('');\r\n    const [expandedSubTask, setExpandedSubTask] = useState('');\r\n    const [userTaskStats, setUserTaskStats] = useState({});\r\n    const [taskFilter, setTaskFilter] = useState({\r\n        filterMode: \"Today\",\r\n        beforeStartTime: moment().format(\"YYYY-MM-DD\"),\r\n        afterStartTime: moment().format(\"YYYY-MM-DD\"),\r\n    });\r\n    const [columns, setColumns] = useState({\r\n\r\n        ['requested']: {\r\n            columnId: \"requested\",\r\n            name: \"Requested\",\r\n            statusName: \"Requested\",\r\n            items: []\r\n        },\r\n        ['inprogress']: {\r\n            columnId: \"inprogress\",\r\n            name: \"In Progress\",\r\n            statusName: \"In-Progress\",\r\n            items: []\r\n        },\r\n        ['completed']: {\r\n            columnId: \"completed\",\r\n            name: \"Completed\",\r\n            statusName: \"Completed\",\r\n            items: []\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getUserTasksStats(userID).then((data) => {\r\n            setUserTaskStats(data)\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let completed = [];\r\n        let requested = [];\r\n        let progress = [];\r\n        getTasks(1, 50, userID,\r\n            '', undefined,\r\n            taskFilter.beforeStartTime,\r\n            taskFilter.afterStartTime)\r\n            .then((data) => {\r\n                data.items.forEach(item => {\r\n                    switch (item.status) {\r\n                        case \"Requested\":\r\n                            requested.push(item)\r\n                            break;\r\n                        case \"Completed\":\r\n                            completed.push(item)\r\n                            break;\r\n                        case \"In-Progress\":\r\n                            progress.push(item)\r\n                            break;\r\n                    }\r\n                });\r\n                adddItemsToColumn(completed, requested, progress);\r\n            });;\r\n    }, [taskFilter]);\r\n\r\n    const adddItemsToColumn = (com, req, prog) => {\r\n        const completedCol = columns.completed;\r\n        const requestedCol = columns.requested;\r\n        const progressCol = columns.inprogress;\r\n        setColumns({\r\n            ...columns, [completedCol.columnId]: {\r\n                ...completedCol,\r\n                items: com\r\n            }, [requestedCol.columnId]: {\r\n                ...requestedCol,\r\n                items: req\r\n            }, [progressCol.columnId]: {\r\n                ...progressCol,\r\n                items: prog\r\n            },\r\n        })\r\n    }\r\n\r\n    const onDragEnd = (result, columns, setColumns) => {\r\n        if (!result.destination) return;\r\n        const { source, destination } = result;\r\n        if (source.droppableId !== destination.droppableId) {\r\n            const newStatus = columns[destination.droppableId].statusName;\r\n            const sourceColumn = columns[source.droppableId];\r\n            const destColumn = columns[destination.droppableId];\r\n            const sourceItems = [...sourceColumn.items];\r\n            const destItems = [...destColumn.items];\r\n\r\n            const [changed] = sourceItems.splice(source.index, 1);\r\n            changed.status = newStatus;\r\n            destItems.splice(destItems.length, 0, changed);\r\n            //destItems.splice(destination.index, 0, removed);\r\n\r\n            changeTaskStatus(changed.id, changed.status).then(() => { });\r\n\r\n            setColumns({\r\n                ...columns,\r\n                [source.droppableId]: {\r\n                    ...sourceColumn,\r\n                    items: sourceItems\r\n                },\r\n                [destination.droppableId]: {\r\n                    ...destColumn,\r\n                    items: destItems\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedTask(newExpanded ? taskId : false);\r\n    }\r\n    const handleSubTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedSubTask(newExpanded ? taskId : false);\r\n    }\r\n    const handleFilterChange = (mode) => {\r\n        const today = moment();\r\n        switch (mode) {\r\n            case 'today':\r\n                setTaskFilter({\r\n                    filterMode: 'Today',\r\n                    beforeStartTime: today.format(\"YYYY-MM-DD\"),\r\n                    afterStartTime: today.format(\"YYYY-MM-DD\"),\r\n                });\r\n                break;\r\n            case 'week':\r\n                setTaskFilter({\r\n                    filterMode: 'This Week',\r\n                    beforeStartTime: today.endOf('isoWeek').format(\"YYYY-MM-DD\"),\r\n                    afterStartTime: today.startOf('isoWeek').format(\"YYYY-MM-DD\")\r\n\r\n                });\r\n                break;\r\n            case 'month':\r\n                setTaskFilter({\r\n                    filterMode: 'This Month',\r\n                    beforeStartTime: today.endOf('month').format(\"YYYY-MM-DD\"),\r\n                    afterStartTime: today.startOf('month').format(\"YYYY-MM-DD\")\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.taskTabContainer}>\r\n            <div className={classes.topBar}>\r\n                <Toolbar className={classes.filterBox}>\r\n                    <h3 className={classes.whiteText}>Tasks From: </h3>\r\n\r\n                    <ButtonGroup variant=\"contained\">\r\n                        <Button\r\n                            color={taskFilter.filterMode === 'Today' ? 'primary' : 'default'}\r\n                            onClick={() => { handleFilterChange('today') }}\r\n                        >\r\n                            Today\r\n                        </Button>\r\n                        <Button\r\n                            color={taskFilter.filterMode === 'This Week' ? 'primary' : 'default'}\r\n                            onClick={() => { handleFilterChange('week') }}\r\n                        >\r\n                            This Week\r\n                        </Button>\r\n                        <Button\r\n                            color={taskFilter.filterMode === 'This Month' ? 'primary' : 'default'}\r\n                            onClick={() => { handleFilterChange('month') }}\r\n                        >\r\n                            This Month\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Toolbar>\r\n                {userTaskStats.totalDelayedTasks === undefined ? null :\r\n                    <Card className={classes.delayedDisplay}>\r\n                        <Link to={\r\n                            {\r\n                                pathname: \"/main/tasks-list\",\r\n                                filter: { filter }\r\n                            }}>\r\n                            <Typography noWrap variant=\"h6\">\r\n                                {'Delayed Tasks: ' + userTaskStats.totalDelayedTasks}\r\n                            </Typography>\r\n                        </Link>\r\n                    </Card>\r\n                }\r\n\r\n            </div>\r\n            <div style={{ display: \"flex\", justifyContent: \"center\", height: \"100%\" }}>\r\n                <DragDropContext\r\n                    onDragEnd={(result) => onDragEnd(result, columns, setColumns)}\r\n                >\r\n                    {Object.entries(columns).map(([columnId, column], index) => {\r\n                        return (\r\n                            <Card className={classes.column}\r\n\r\n                                key={columnId}\r\n                            >\r\n                                <div className={classes.title}>\r\n                                    <Typography noWrap variant=\"h5\">{column.name}</Typography>\r\n                                </div>\r\n                                <Droppable droppableId={columnId} key={columnId}>\r\n                                    {(provided, snapshot) => {\r\n                                        return (\r\n                                            <CardContent {...provided.droppableProps}\r\n                                                ref={provided.innerRef}\r\n                                                style={{\r\n                                                    background: snapshot.isDraggingOver\r\n                                                        ? \"rgb(128 128 128)\"\r\n                                                        : \"#424242\",\r\n                                                    padding: \"10px\",\r\n                                                    paddingBottom: \"0\",\r\n                                                    width: \"400px\",\r\n                                                    hight: \"410px\",\r\n                                                    maxHeight: \"410px\",\r\n                                                    minHeight: \"410px\",\r\n                                                    overflowY: 'auto',\r\n                                                    WebkitScrollbarButton: {\r\n                                                        height: '100%'\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {column.items.map((item, index) => {\r\n                                                    return (\r\n                                                        <Draggable\r\n                                                            key={item.id}\r\n                                                            draggableId={String(item.id)}\r\n                                                            index={index}\r\n                                                        >\r\n                                                            {(provided) => {\r\n                                                                return (\r\n                                                                    <Accordion\r\n                                                                        expanded={expandedTask === item.id}\r\n                                                                        onChange={handleTaskExpand(item.id)}\r\n                                                                        ref={provided.innerRef}\r\n                                                                        {...provided.draggableProps}\r\n                                                                        {...provided.dragHandleProps}\r\n                                                                        style={{\r\n                                                                            userSelect: \"none\",\r\n                                                                            backgroundColor:\r\n                                                                                item.status === \"In-Progress\"\r\n                                                                                    ? \"rgb(56 81 216)\"\r\n                                                                                    : item.status === \"Requested\"\r\n                                                                                        ? \"rgb(231 170 35)\"\r\n                                                                                        : \"rgb(0 158 7)\",\r\n                                                                            color: item.status === \"In-Progress\" ? \"white\" : \"black\",\r\n                                                                            borderRadius: '4px',\r\n                                                                            marginBottom: '4px',\r\n                                                                            ...provided.draggableProps.style\r\n                                                                        }}\r\n                                                                    >\r\n\r\n                                                                        <AccordionSummary\r\n                                                                            expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                                                            style={{ padding: '8px' }}\r\n                                                                        >\r\n                                                                            <Typography variant=\"subtitle1\">{item.name}</Typography>\r\n                                                                        </AccordionSummary>\r\n                                                                        <AccordionDetails style={{\r\n                                                                            display: \"flex\",\r\n\r\n                                                                            alignContent: \"flex-start\",\r\n                                                                            flexDirection: 'column',\r\n                                                                            padding: '0px',\r\n                                                                        }}>\r\n                                                                            <div className={classes.chipContainer}>\r\n                                                                                <Chip\r\n                                                                                    className={classes.timeChip}\r\n                                                                                    label={\"Start: \" + item.startTime.toString().split('T')[0]}\r\n                                                                                    color=\"primary\"\r\n                                                                                />\r\n                                                                                <Chip\r\n                                                                                    className={classes.timeChip}\r\n                                                                                    label={\"Deadline: \" + item.deadline.toString().split('T')[0]}\r\n                                                                                    color=\"primary\"\r\n                                                                                />\r\n                                                                            </div>\r\n                                                                            <Typography\r\n                                                                                variant=\"body1\"\r\n                                                                                style={{ marginLeft: '5px', marginBottom: '5px' }}\r\n                                                                            >\r\n                                                                                {item.description}\r\n                                                                            </Typography>\r\n                                                                            {item.subtasks.length === 0 ? null :\r\n                                                                                <div style={{\r\n                                                                                    paddingLeft: '8px',\r\n                                                                                    paddingRight: '8px',\r\n                                                                                    backgroundColor: \"rgb(0 0 0 / 26%)\"\r\n                                                                                }}>\r\n                                                                                    <Typography>\r\n                                                                                        Subtasks:\r\n                                                                                    </Typography>\r\n                                                                                    {item.subtasks.map((subtask) => {\r\n                                                                                        return (\r\n                                                                                            <Accordion\r\n                                                                                                expanded={expandedSubTask === subtask.id}\r\n                                                                                                onChange={handleSubTaskExpand(subtask.id)}\r\n                                                                                                key={subtask.id}\r\n                                                                                                style={{\r\n                                                                                                    backgroundColor:\r\n                                                                                                        item.status === \"In-Progress\"\r\n                                                                                                            ? \"rgb(93 135 230)\"\r\n                                                                                                            : item.status === \"Requested\"\r\n                                                                                                                ? \"rgb(255 234 144)\"\r\n                                                                                                                : \"rgb(3 189 0)\",\r\n                                                                                                    color: item.status === \"In-Progress\" ? \"white\" : \"black\",\r\n                                                                                                    marginBottom: '4px',\r\n                                                                                                    borderRadius: '4px',\r\n                                                                                                    padding: '0px'\r\n\r\n                                                                                                }}>\r\n                                                                                                <AccordionSummary\r\n                                                                                                    expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                                                                                >\r\n                                                                                                    <Typography>\r\n                                                                                                        {subtask.name}\r\n                                                                                                    </Typography>\r\n                                                                                                </AccordionSummary>\r\n                                                                                                <AccordionDetails>\r\n                                                                                                    {subtask.description}\r\n                                                                                                </AccordionDetails>\r\n                                                                                            </Accordion>\r\n                                                                                        );\r\n                                                                                    })}\r\n                                                                                </div>\r\n                                                                            }\r\n                                                                        </AccordionDetails>\r\n                                                                    </Accordion>\r\n                                                                );\r\n                                                            }}\r\n                                                        </Draggable>\r\n                                                    );\r\n                                                })}\r\n                                                {provided.placeholder}\r\n                                            </CardContent>\r\n                                        );\r\n                                    }}\r\n                                </Droppable>\r\n                            </Card>\r\n                        );\r\n                    })}\r\n                </DragDropContext>\r\n            </div >\r\n        </div>\r\n    );\r\n}\r\nexport default TasksColumns;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeList.js",["121","122","123"],"import React, { useEffect, useState } from \"react\";\r\nimport { DarkTextField, DarkSelect, ConfirmDialog } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1rem',\r\n        width: '100%',\r\n    },\r\n    tabTop: {\r\n        display: 'flex',\r\n        padding: '9px',\r\n        justifyContent: 'space-between',\r\n        \"& h2\": {\r\n            margin: 0,\r\n        },\r\n        \"& a\": {\r\n            textDecoration: \"none\",\r\n            color: \"white\",\r\n        }\r\n    },\r\n    container: {\r\n        maxHeight: 550,\r\n    },\r\n    pagination: {\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800],\r\n    },\r\n    searchBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.8rem\",\r\n        paddingRight: \"1.8rem\",\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n}));\r\n\r\nconst EmployList = () => {\r\n    const classes = useStyles();\r\n    const [employees, setEmployees] = useState([]);\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const [delDialogProps, setDelDialogProps] = useState({\r\n        open: false,\r\n        employeeId: null,\r\n    });\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [totalItems, setTotalItems] = useState(1);\r\n    const firstRecord = { id: 0, name: \"All\" };\r\n    const [orderOptions] = useState([\r\n        { id: \"name\", name: \"Name\" },\r\n        { id: \"surname\", name: \"Surame\" },\r\n        { id: \"department\", name: \"Department\" },\r\n        { id: \"position\", name: \"Position\" },\r\n        { id: \"date-asc\", name: \"Date-asc\" },\r\n        { id: \"date-desc\", name: \"Date-desc\" }\r\n    ]);\r\n    const [remoteOptions] = useState([\r\n        { id: '', name: \"All\" },\r\n        { id: true, name: \"Remote\" },\r\n        { id: false, name: \"Office\" },\r\n    ]);\r\n    const [seniorityLvs] = useState([\r\n        firstRecord,\r\n        { id: 1, name: \"Junior\" },\r\n        { id: 2, name: \"Regular\" },\r\n        { id: 3, name: \"Senior\" },\r\n    ]);\r\n    const [searchParams, setSearchParams] = useState({\r\n        searchString: '',\r\n        department: firstRecord,\r\n        position: firstRecord,\r\n        seniority: firstRecord,\r\n        orderBy: orderOptions[4],\r\n        isRemote: remoteOptions[0]\r\n    });\r\n    useEffect(() => {\r\n        getEmploees(page + 1, rowsPerPage);\r\n    }, [page, rowsPerPage]);\r\n\r\n    useEffect(() => {\r\n        getSearchProps()\r\n    }, []);\r\n\r\n    const getEmploees = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL +\r\n            `employee/all?page=${page}&size=${size}&order=${searchParams.orderBy.id}` +\r\n            `&search=${searchParams.searchString}` +\r\n            `&department=${searchParams.department.id}` +\r\n            `&position=${searchParams.position.id}` +\r\n            `&seniority=${searchParams.seniority.id === 0 ? '' : searchParams.seniority.name}` +\r\n            `&isremote=${searchParams.isRemote.id}`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => (setEmployees(data.items), setTotalItems(data.totalItems)));\r\n    }\r\n\r\n    const getSearchProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setDepartments(data) });\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setPositions(data) });\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeSearchParams = event => {\r\n        setSearchParams({\r\n            searchParams,\r\n            searchString: event.target.name === \"searchInput\" ? event.target.value : searchParams.searchString,\r\n            department: event.target.name === \"departmentSelect\" ? event.target.value : searchParams.department,\r\n            position: event.target.name === \"positionSelect\" ? event.target.value : searchParams.position,\r\n            seniority: event.target.name === \"senioritySelect\" ? event.target.value : searchParams.seniority,\r\n            orderBy: event.target.name === \"orderBy\" ? event.target.value : searchParams.orderBy,\r\n            isRemote: event.target.name === \"isRemote\" ? event.target.value : searchParams.isRemote,\r\n        });\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        getEmploees(1, rowsPerPage);\r\n    };\r\n\r\n    const hendleDeleteEmployee = () => {\r\n        const requestOptions = {\r\n            method: 'Delete',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        fetch(APIURL +\r\n            `employee/delete/${delDialogProps.employeeId}`,\r\n            requestOptions\r\n        ).then(data => console.log(data), setPage(0));\r\n    };\r\n\r\n    const delDialogOpen = () => {\r\n        setDelDialogProps({ ...delDialogProps, open: !delDialogProps.open })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ConfirmDialog\r\n                title={\"Delete Employee: \" + delDialogProps.employeeId}\r\n                open={delDialogProps.open}\r\n                setOpen={delDialogOpen}\r\n                onConfirm={hendleDeleteEmployee}\r\n            >\r\n                Are you sure you want to delete employee?\r\n            </ConfirmDialog>\r\n            <Toolbar className={classes.searchBox}>\r\n                <h3 className={classes.whiteText}>Employees</h3>\r\n                <DarkTextField\r\n                    onChange={handleChangeSearchParams}\r\n                    label='Search...'\r\n                    name='searchInput'\r\n                />\r\n                <DarkSelect\r\n                    label=\"Department\"\r\n                    name=\"departmentSelect\"\r\n                    collection={departments}\r\n                    value={searchParams.department}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Position\"\r\n                    name=\"positionSelect\"\r\n                    collection={positions}\r\n                    value={searchParams.position}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Seniority\"\r\n                    name=\"senioritySelect\"\r\n                    collection={seniorityLvs}\r\n                    value={searchParams.seniority}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Order by\"\r\n                    name=\"orderBy\"\r\n                    collection={orderOptions}\r\n                    value={searchParams.orderBy}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Work Type\"\r\n                    name=\"isRemote\"\r\n                    collection={remoteOptions}\r\n                    value={searchParams.isRemote}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>Search</Button>\r\n            </Toolbar>\r\n\r\n            {employees === undefined ? <div></div> :\r\n                <Paper className={classes.root}>\r\n                    <div className={classes.tabTop}>\r\n                        <h2 >Employee List:</h2>\r\n                        <Link to=\"/main/employee-form\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n\r\n                                endIcon={<AddCircleIcon />}\r\n                                onClick={handleSearch}\r\n                            >\r\n                                New Employee\r\n                            </Button>\r\n                        </Link>\r\n                    </div>\r\n                    <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        #\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Seniority\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Employment Date\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Action\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {employees.map((employee, index) => (\r\n                                    <TableRow hover key={index}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {index + 1}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.seniority}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.department.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.remoteWork === true ?\r\n                                                <CheckCircleIcon /> : <CloseIcon />}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.employmentDate.toString().split('T')[0]}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${employee.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                            <Link to={{ pathname: `/main/employee-form`, employee: { employee } }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"edit\">\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                            <IconButton\r\n                                                className={classes.button}\r\n                                                size=\"small\"\r\n                                                onClick={() => setDelDialogProps({\r\n                                                    open: true,\r\n                                                    employeeId: employee.id\r\n                                                })}\r\n                                            >\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        className={classes.pagination}\r\n                        rowsPerPageOptions={[10, 25, 35]}\r\n                        component=\"div\"\r\n                        count={totalItems}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default EmployList;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeDetails.js",["124"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TasksList from \"../Tasks/TasksList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    detailsConteiner: {\r\n        margin: \"8px\",\r\n        background: theme.palette.grey[800],\r\n        padding: '1.5rem',\r\n        color: theme.palette.text.primary,\r\n    },\r\n    title: {\r\n        margin: \"-1.5rem\",\r\n        textAlign: 'center',\r\n        padding: '1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    gridConteiner: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: `1fr 1fr 1fr`,\r\n        gridTemplateRows: \"1fr \",\r\n        justifyContent: \"space-evenly\",\r\n        alignContent: \"center\",\r\n        marginTop: \"0.5rem\",\r\n        '& p': {\r\n            margin: \"5px\",\r\n            display: 'inline',\r\n            fontSize: \"17px\"\r\n        },\r\n        '& h3': {\r\n            margin: \"5px\",\r\n            display: 'inline',\r\n\r\n        }\r\n    },\r\n    permitionChip: {\r\n        margin: \"2px\",\r\n        marginLeft: \"5px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"14px\",\r\n        fontWeight: \"501\"\r\n\r\n    }\r\n}));\r\n\r\nexport const EmployeeDetails = () => {\r\n    const classes = useStyles();\r\n    const [employee, setEmployee] = useState({});\r\n    const params = useParams();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getEmploee(params.id);\r\n    }, [])\r\n\r\n    const getEmploee = async (empID) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL + `employee/get/` + empID,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setEmployee(data));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.detailsConteiner}>\r\n                <div className={classes.title}>\r\n                    <h2>Employee Details:</h2>\r\n                </div>\r\n                {employee.person === undefined ? null :\r\n                    <div className={classes.gridConteiner}>\r\n                        <div>\r\n                            <h2 className={classes.header}>Personsal Info</h2>\r\n                            <div>\r\n                                <h3>Name: </h3>\r\n                                <p>{employee.person.name}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Surname: </h3>\r\n                                <p>{employee.person.surname}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Phone Number: </h3>\r\n                                <p>{employee.person.phoneNumber}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Email: </h3>\r\n                                <p>{employee.person.email}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <h2 className={classes.header}>Address:</h2>\r\n                            <div  >\r\n                                <h3>City: </h3>\r\n                                <p>{employee.person.employeeAddress.city}</p>\r\n                            </div>\r\n                            <div   >\r\n                                <h3>Street: </h3>\r\n                                <p>{employee.person.employeeAddress.street}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Post Code: </h3>\r\n                                <p>{employee.person.employeeAddress.postCode}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <h2 className={classes.header}>Occupation info</h2>\r\n                            <div  >\r\n                                <h3>Employment Date: </h3>\r\n                                <p>{employee.employmentDate.toString().split('T')[0]}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Position: </h3>\r\n                                <p>{employee.position.name}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Seniority Lvl: </h3>\r\n                                <p>{employee.seniority}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Department: </h3>\r\n                                <p>{employee.department.name}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Work Type: </h3>\r\n                                <p>{employee.remoteWork === true ? \"Remote\" : \"Office\"}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                }\r\n                {employee.permissions === undefined ||\r\n                    employee.permissions.length === 0 ? null :\r\n                    <div>\r\n                        <h2>Employee Permissions: </h2>\r\n                        {employee.permissions.map((permition, index) => (\r\n                            <Chip\r\n                                className={classes.permitionChip}\r\n                                key={index}\r\n                                label={permition.name}\r\n                                color=\"primary\"\r\n                            />\r\n\r\n                        ))}\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <TasksList userId={params.id} type='view' />\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\LoginUser.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Dashboard.js",["125","126"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../../Services/Globals'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\n\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.progressBox} position=\"relative\" display=\"inline-flex\">\r\n            <CircularProgress className={classes.progressBox} variant=\"determinate\" {...props} />\r\n            <Box\r\n                top={0}\r\n                left={0}\r\n                bottom={0}\r\n                right={0}\r\n                position=\"absolute\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Typography variant=\"h5\" component=\"div\">{`${Math.round(\r\n                    props.value,\r\n                )}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1.5rem',\r\n        width: '100%',\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    remoteWorkBox: {\r\n        marginTop: '1.5rem',\r\n        width: \"307px\",\r\n        padding: \"10px\",\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    statsBox: {\r\n        marginTop: '1.5rem',\r\n        marginLeft: '1.5rem',\r\n        width: \"120px\",\r\n        height: \"60px\",\r\n        padding: \"12px\",\r\n        position: \"relative\",\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    progressBox: {\r\n        width: \"100% !important\",\r\n        height: \"100% !important\",\r\n    },\r\n    container: {\r\n        maxHeight: 540,\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800]\r\n    },\r\n}));\r\n\r\nconst HR_Dashboard = () => {\r\n    const classes = useStyles();\r\n    const [employees, setEmployees] = useState([]);\r\n    const [stats, setStats] = useState();\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        if (stats !== undefined) {\r\n            const timer = setInterval(() => {\r\n                setProgress((prevProgress) => (prevProgress === stats.remoteEmploeesPercentage\r\n                    ? stats.remoteEmploeesPercentage\r\n                    : prevProgress + 1));\r\n            }, 45);\r\n            return () => {\r\n                clearInterval(timer);\r\n            };\r\n        }\r\n    }, [stats]);\r\n\r\n    useEffect(() => {\r\n        getEmploees(1, 5);\r\n        getStats();\r\n    }, []);\r\n\r\n    const getEmploees = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL +\r\n            `employee/all?page=${page}&size=${size}&order=date-desc`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (setEmployees(data.items), console.log(data.items)));\r\n    }\r\n\r\n    const getStats = async () => {\r\n        const requestOptions = {\r\n            method: 'Get'\r\n        };\r\n        await fetch(APIURL + `home/stats`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (setStats(data)));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {stats === undefined ? <div></div> :\r\n                <Grid container>\r\n                    <Card className={classes.remoteWorkBox}>\r\n                        <Grid container item spacing={4}>\r\n                            <Grid item xs={7} >\r\n                                <Typography noWrap variant=\"h5\">{stats.totalRemoteEmployees} Employees</Typography>\r\n                                <Typography noWrap variant=\"subtitle1\">Work Remotely</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={5}>\r\n                                <CircularProgressWithLabel value={progress} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{stats.totalEmployees}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Total Employees</Typography>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{stats.totalJobApplications}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Job Applicatios</Typography>\r\n                    </Card>\r\n                </Grid>\r\n            }\r\n            {employees === undefined ? <div></div> :\r\n                <Card className={classes.root}>\r\n                    <CardHeader\r\n                        title=\"Newly Hired Employees:\"\r\n\r\n                    />\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        #\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Employment Date\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell>\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {employees.map((employee, index) => (\r\n                                    <TableRow hover key={employee.id}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {index + 1}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.department.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.remoteWork === true ?\r\n                                                <CheckCircleIcon /> : <CloseIcon />}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.employmentDate.toString().split('T')[0]}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${employee.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Card>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default HR_Dashboard;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\JobApplication\\CreateJobApplication.js",["127"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals'\r\n\r\nconst CreateJobApplication = () => {\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [isSelected, setIsSelected] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const PostJobApplication = () => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"id\": 0, \"name\": \"Json\", \"surname\": \"j\",\r\n                \"phoneNumber\": 0, \"email\": \"temp@mail.net\",\r\n                \"EmployeeAddressId\": 0,\r\n                \"employeeAddress\":\r\n                    { \"id\": 0, \"city\": \"New York\", \"postCode\": \"11-111\", \"street\": \"str 11\" }\r\n            })\r\n        };\r\n        fetch(APIURL + 'JobApplications', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data));\r\n    }\r\n\r\n    const changeHandler = (event) => {\r\n        setSelectedFile(event.target.files[0]);\r\n        setIsSelected(true);\r\n    };\r\n\r\n    const handleSubmission = () => {\r\n        const formData = new FormData();\r\n\r\n        formData.append('Id', 0);\r\n        formData.append('Name', \"Json\");\r\n        formData.append('Surname', \"xy\");\r\n        formData.append('Email', \"e3@gr\");\r\n        formData.append('Content', \"bzdury\");\r\n        formData.append('PositionId', 1);\r\n        formData.append('ApplicationDate', \"2021-02-01\");\r\n        formData.append('CVPath', \"\");\r\n        formData.append('CVFile', selectedFile);\r\n\r\n        fetch(\r\n            'http://localhost:5000/api/JobApplications',\r\n            {\r\n                method: 'POST',\r\n                body: formData,\r\n            }\r\n        )\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                console.log('Success:', result);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" name=\"file\" onChange={changeHandler} />\r\n            {isSelected ? (\r\n                <div>\r\n                    <p>Filename: {selectedFile.name}</p>\r\n                    <p>Filetype: {selectedFile.type}</p>\r\n                    <p>Size in bytes: {selectedFile.size}</p>\r\n\r\n                </div>\r\n            ) : (\r\n                <p>Select a file to show details</p>\r\n            )}\r\n            <div>\r\n                <button onClick={handleSubmission}>Submit</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateJobApplication;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\TasksService.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksList.js",["128","129","130","131"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals';\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport moment from \"moment\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getTasks, changeTaskStatus, getTeamTasks } from \"../../Services/TasksService\";\r\nimport { DarkTextField, DarkSelect } from '../GlobalComponents';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    filterBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.1rem\",\r\n        paddingRight: \"1.1rem\",\r\n        borderRadius: '4px',\r\n        marginLeft: '8px',\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n        \"& .MuiAccordion-root\": {\r\n            margin: \"0px\",\r\n            color: \"black\",\r\n            backgroundColor: '#bdbdbd',\r\n            borderRadius: \"4px\",\r\n            width: '243px',\r\n            boxShadow:\r\n                \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n            '&:before': {\r\n                display: 'none',\r\n            },\r\n        },\r\n        \"& .MuiAccordionSummary-root\": {\r\n            minHeight: \"36px\",\r\n            maxHeight: \"36px\"\r\n        },\r\n        \"& .MuiCollapse-root\": {\r\n            position: \"absolute\",\r\n            top: \"30px\",\r\n            paddingTop: \"20px\",\r\n            backgroundColor: '#bdbdbd',\r\n            zIndex: '1',\r\n            borderRadius: \"4px\",\r\n            boxShadow:\r\n                \"-1px 2px 1px 0px rgb(0 0 0 / 20%), -2px 3px 3px 0px rgb(0 0 0 / 35%), 1px 2px 1px 1px rgb(0 0 0 / 30%)\",\r\n        },\r\n        \"& .MuiAccordionDetails-root\": {\r\n            flexWrap: 'wrap'\r\n        }\r\n    },\r\n    filterDate: {\r\n        padding: '0 6px',\r\n        margin: '3px',\r\n        display: 'flex',\r\n        width: '190px'\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        margin: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n    tasksContainer: {\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center'\r\n    },\r\n    listComponent: {\r\n        margin: '8px',\r\n        width: '100%',\r\n        paddingTop: 0,\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: 'white',\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '4px',\r\n        display: \"flex\",\r\n        flexDirection: 'column',\r\n    },\r\n    pagination: {\r\n        display: 'grid',\r\n        padding: '8px',\r\n        marginTop: 'auto',\r\n        \"& .Mui-selected\": {\r\n            color: 'white',\r\n            backgroundColor: 'rgb(63 81 181 / 80%)',\r\n        },\r\n        \"& .MuiPaginationItem-outlined\": {\r\n            boxShadow: theme.shadows[2],\r\n            border: '1px solid rgb(149 149 149 / 23%)'\r\n        }\r\n    },\r\n    tasksDetailsCol: {\r\n        margin: \"8px\",\r\n        width: '100%',\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '6px 0',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '3px 3px 0 0',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    detailsTitle: {\r\n        color: theme.palette.text.primary,\r\n        padding: '6px 0 2px 12px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '3px 3px 0 0',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: \"column\"\r\n    },\r\n    linkButton: {\r\n        marginRight: '10px',\r\n        marginLeft: 'auto',\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n    },\r\n    statusContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        margin: '4px',\r\n        marginLeft: '15px',\r\n    },\r\n    chipContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignContent: 'space-around',\r\n        alignItems: 'stretch',\r\n        flexwrap: 'nowrap',\r\n        justifyContent: 'space-evenly'\r\n    },\r\n    timeChip: {\r\n        margin: \"2px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"12px\",\r\n        fontWeight: \"550\"\r\n\r\n    },\r\n    subtaskAccordion: {\r\n        backgroundColor: '#bdbdbd',\r\n        color: \"black\",\r\n        marginTop: \"8px\",\r\n        marginBottom: '4px',\r\n        borderRadius: '4px',\r\n        padding: '0px',\r\n        '&::before': {\r\n            height: 0\r\n        }\r\n    },\r\n    buttonSection: {\r\n        display: 'grid',\r\n        padding: '16px',\r\n        marginTop: 'auto',\r\n        justifyItems: 'center',\r\n        \"& .MuiButton-label\": {\r\n            paddingLeft: '4px',\r\n            paddingRight: '4px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst noFilter = {\r\n    name: \"\",\r\n    status: undefined,\r\n    isBStartTime: false,\r\n    bStartTime: undefined,\r\n    isAStartTime: false,\r\n    aStartTime: undefined,\r\n    isBDeadline: false,\r\n    bDeadline: undefined,\r\n    isADeadline: false,\r\n    aDeadline: undefined\r\n}\r\nconst taskStatusAll = [{ id: 1, name: 'Completed' }, { id: 2, name: 'Requested' }, { id: 3, name: 'In-Progress' }];\r\nconst allowedStatuses = taskStatusAll;\r\n\r\nconst TasksList = (props) => {\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const anchorRef = React.useRef(null);\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const [selTaskEmployee, setSelTaskEmployee] = useState({});\r\n    const [tasks, setTasks] = useState([]);\r\n    const [expandedSubTask, setExpandedSubTask] = useState('');\r\n    const [openStatusSel, setOpenStatusSel] = useState(false);\r\n    const [statusSelIndex, setStatusSelIndex] = useState(1);\r\n    const [pagination, setPagination] = useState({\r\n        page: 1,\r\n        size: 10,\r\n        totalPages: 1\r\n    });\r\n    const [filterParams, setFilterParams] = useState(location.filter === undefined ? noFilter : location.filter.filter);\r\n\r\n    useEffect(() => {\r\n        loadTasksList(\r\n            pagination.page,\r\n            pagination.size\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (props.teamId !== undefined && tasks[selectedIndex] !== undefined) {\r\n            getAssignedEmployee(tasks[selectedIndex].assignedEmployeeId);\r\n        }\r\n    }, [selectedIndex, tasks]);\r\n\r\n    const getAssignedEmployee = async (empID) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL + `employee/get/` + empID,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setSelTaskEmployee(data));\r\n    }\r\n\r\n    const loadTasksList = (page, size) => {\r\n        if (props.teamId === undefined && props.userId !== undefined) {\r\n            getTasks(\r\n                page, size, props.userId,\r\n                filterParams.name,\r\n                filterParams.status,\r\n                filterParams.bStartTime,\r\n                filterParams.aStartTime,\r\n                filterParams.bDeadline,\r\n                filterParams.aDeadline\r\n            ).then((data) => {\r\n                setPagination({\r\n                    page: page,\r\n                    size: size,\r\n                    totalPages: data.totalPages,\r\n                })\r\n                setSelectedIndex(0);\r\n                setTasks(data.items);\r\n            })\r\n        } else {\r\n            getTeamTasks(\r\n                page, size, props.teamId,\r\n                filterParams.name,\r\n                filterParams.status,\r\n                filterParams.bStartTime,\r\n                filterParams.aStartTime,\r\n                filterParams.bDeadline,\r\n                filterParams.aDeadline\r\n            ).then((data) => {\r\n                setPagination({\r\n                    page: page,\r\n                    size: size,\r\n                    totalPages: data.totalPages,\r\n                })\r\n                setSelectedIndex(0);\r\n                setTasks(data.items)\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleChangeFilterParams = e => {\r\n        if (e.target.name === 'statusSel') {\r\n            setFilterParams({\r\n                ...filterParams,\r\n                status: e.target.value.name\r\n            })\r\n        }\r\n        if (e.target.name === 'taskName') {\r\n            setFilterParams({\r\n                ...filterParams,\r\n                name: e.target.value\r\n            })\r\n        }\r\n        if (e.target.type === \"checkbox\") {\r\n            const today = moment().format('yyy-MM-DD');\r\n            switch (e.target.name) {\r\n                case 'isBStartTime':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isBStartTime: e.target.checked,\r\n                        bStartTime: e.target.checked === false ? undefined :\r\n                            filterParams.bStartTime === undefined ? today :\r\n                                filterParams.bStartTime\r\n                    });\r\n                    break;\r\n                case 'isAStartTime':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isAStartTime: e.target.checked,\r\n                        aStartTime: e.target.checked === false ? undefined :\r\n                            filterParams.aStartTime === undefined ? today :\r\n                                filterParams.aStartTime\r\n                    });\r\n                    break;\r\n                case 'isBDeadline':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isBDeadline: e.target.checked,\r\n                        bDeadline: e.target.checked === false ? undefined :\r\n                            filterParams.bDeadline === undefined ? today :\r\n                                filterParams.bDeadline\r\n                    });\r\n                    break;\r\n                case 'isADeadline':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isADeadline: e.target.checked,\r\n                        aDeadline: e.target.checked === false ? undefined :\r\n                            filterParams.aDeadline === undefined ? today :\r\n                                filterParams.aDeadline\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleApplyFilters = () => {\r\n        console.log(filterParams);\r\n        loadTasksList(pagination.page, pagination.size)\r\n    }\r\n\r\n    const handleListItemClick = (event, index) => {\r\n        setSelectedIndex(index);\r\n    };\r\n\r\n    const handlePageChange = (event, value) => {\r\n        loadTasksList(value, pagination.size);\r\n    };\r\n    const handleSubTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedSubTask(newExpanded ? taskId : false);\r\n    }\r\n\r\n    const hendleChangeStatus = () => {\r\n        changeTaskStatus(tasks[selectedIndex].id, allowedStatuses[statusSelIndex].name)\r\n            .then((d) => { loadTasksList(pagination.page, pagination.size) },\r\n                e => { console.log(\"status change error\") });\r\n    }\r\n\r\n    const handleMenuItemClick = (event, index) => {\r\n        setStatusSelIndex(index);\r\n        setOpenStatusSel(false);\r\n    };\r\n\r\n    const handleStatSellToggle = () => {\r\n        setOpenStatusSel((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleStatSellClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n\r\n        setOpenStatusSel(false);\r\n    };\r\n\r\n    const changeCipColor = (status) => {\r\n        return {\r\n            boxShadow: 'rgb(0 0 0 / 20%) 0px 0px 1px -2px, rgb(0 0 0 / 14%) 0px 1px 2px 0px, rgb(0 0 0 / 12%) 0px 0px 5px 0px',\r\n            fontSize: \"12px\",\r\n            fontWeight: \"550\",\r\n            padding: \"5px\",\r\n            minWidth: '92px',\r\n            color: status === \"In-Progress\" || status === \"Delayed\" ? \"white\" : \"black\",\r\n            background: status === \"In-Progress\"\r\n                ? \"rgb(56 81 216)\"\r\n                : status === \"Requested\"\r\n                    ? \"rgb(231 170 35)\" :\r\n                    status === \"Delayed\" ?\r\n                        \"#bd0000\" :\r\n                        \"rgb(0 158 7)\",\r\n        }\r\n    }\r\n    return (\r\n        <div >\r\n            <Toolbar className={classes.filterBox}>\r\n                <h3 className={classes.whiteText}>Search Tasks: </h3>\r\n                <DarkTextField\r\n                    onChange={handleChangeFilterParams}\r\n                    label='Task Name...'\r\n                    name='taskName'\r\n                />\r\n                <DarkSelect\r\n                    label=\"Status\"\r\n                    name=\"statusSel\"\r\n                    collection={allowedStatuses}\r\n                    firstVal={{ id: 0, name: 'All' }}\r\n                    onChange={handleChangeFilterParams}\r\n                />\r\n                <Accordion>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                    >\r\n                        <Typography>\r\n                            Select Task by Date\r\n                        </Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isBStartTime\"\r\n                                checked={filterParams.isBStartTime}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"bStartTime\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"Before Start Time:\"\r\n                                    value={filterParams.bStartTime}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isBStartTime: true,\r\n                                            bStartTime: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isAStartTime\"\r\n                                checked={filterParams.isAStartTime}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"datePicker\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"After Start Time:\"\r\n                                    value={filterParams.aStartTime}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isAStartTime: true,\r\n                                            aStartTime: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isBDeadline\"\r\n                                checked={filterParams.isBDeadline}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"datePicker\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"Before Deadline:\"\r\n                                    value={filterParams.bDeadline}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isBDeadline: true,\r\n                                            bDeadline: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isADeadline\"\r\n                                checked={filterParams.isADeadline}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"datePicker\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"After Deadline:\"\r\n                                    value={filterParams.aDeadline}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isADeadline: true,\r\n                                            aDeadline: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n                <Button\r\n                    style={{ marginLeft: '15px' }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleApplyFilters}\r\n                >Submit</Button>\r\n            </Toolbar>\r\n            {tasks.length === 0 ? null :\r\n                <div className={classes.tasksContainer}>\r\n                    <List component=\"nav\" className={classes.listComponent}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\" style={{ marginLeft: '16px' }}>\r\n                                List of Tasks:\r\n                            </Typography>\r\n                            {props.teamId === undefined ? null :\r\n                                <Link className={classes.linkButton} to=\"/main/create-task\">\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        endIcon={<AddCircleIcon />}\r\n                                    >NEW Task</Button>\r\n                                </Link>\r\n                            }\r\n                        </div>\r\n                        {tasks.map((task, index) => (\r\n                            <div key={task.id}>\r\n                                <ListItem\r\n\r\n                                    button\r\n                                    selected={selectedIndex === index}\r\n                                    onClick={(event) => handleListItemClick(event, index)}\r\n                                >\r\n                                    <ListItemText primary={task.name} />\r\n                                    <Chip\r\n                                        label={task.status}\r\n                                        style={changeCipColor(task.status)}\r\n                                    />\r\n\r\n                                </ListItem>\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                            </div>\r\n                        ))\r\n                        }\r\n                        <Pagination\r\n                            className={classes.pagination}\r\n                            count={pagination.totalPages}\r\n                            page={pagination.page}\r\n                            onChange={handlePageChange}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </List>\r\n                    <Card className={classes.tasksDetailsCol}>\r\n                        <div className={classes.detailsTitle}>\r\n                            <Typography noWrap variant=\"h5\">\r\n                                {tasks[selectedIndex].name}\r\n                            </Typography>\r\n                            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                                <Typography variant=\"subtitle1\" style={{ marginRight: \"6px\" }}>\r\n                                    {\"Status: \"}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    {tasks[selectedIndex].status}\r\n                                </Typography>\r\n                            </div>\r\n\r\n                        </div>\r\n                        {selTaskEmployee.id === undefined ? null :\r\n                            <div className={classes.statusContainer}>\r\n                                <Typography noWrap variant=\"h6\">\r\n                                    {\"Assigned Employee: \" +\r\n                                        selTaskEmployee.person.name + \" \" +\r\n                                        selTaskEmployee.person.surname\r\n                                    }\r\n                                </Typography>\r\n                            </div>\r\n\r\n                        }\r\n                        <CardContent style={{ paddingTop: 0 }}>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\", marginTop: '2px' }} />\r\n                            <div className={classes.chipContainer}>\r\n                                <Chip\r\n                                    className={classes.timeChip}\r\n                                    label={\"Start: \" + moment(tasks[selectedIndex].startTime).format(\"YYYY-MM-DD\")}\r\n                                    color=\"primary\"\r\n                                />\r\n                                <Chip\r\n                                    className={classes.timeChip}\r\n                                    label={\"Deadline: \" + moment(tasks[selectedIndex].deadline).format(\"YYYY-MM-DD\")}\r\n                                    color=\"primary\"\r\n                                />\r\n                            </div>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n\r\n                            <Typography variant=\"subtitle1\">\r\n                                {tasks[selectedIndex].description}\r\n                            </Typography>\r\n                            {tasks[selectedIndex].subtasks.length < 1 ? null :\r\n                                <div>\r\n                                    <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n                                    <Typography noWrap variant=\"subtitle1\">\r\n                                        Subtasks:\r\n                                    </Typography>\r\n                                    {tasks[selectedIndex].subtasks.map((subtask, index) => (\r\n                                        <Accordion\r\n                                            expanded={expandedSubTask === subtask.id}\r\n                                            onChange={handleSubTaskExpand(subtask.id)}\r\n                                            key={subtask.id}\r\n                                            className={classes.subtaskAccordion}\r\n                                        >\r\n                                            <AccordionSummary\r\n                                                expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                            >\r\n                                                <Typography>\r\n                                                    {subtask.name}\r\n                                                </Typography>\r\n                                            </AccordionSummary>\r\n                                            <AccordionDetails>\r\n                                                {subtask.description}\r\n                                            </AccordionDetails>\r\n                                        </Accordion>\r\n                                    ))}\r\n                                </div>\r\n                            }\r\n\r\n\r\n                        </CardContent>\r\n                        {props.type === 'view' ? null :\r\n                            <div className={classes.buttonSection}>\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n                                <ButtonGroup variant=\"contained\" color=\"primary\" ref={anchorRef}>\r\n                                    <Button onClick={hendleChangeStatus}>{allowedStatuses[statusSelIndex].name}</Button>\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        aria-controls={openStatusSel ? 'split-button-menu' : undefined}\r\n                                        aria-expanded={openStatusSel ? 'true' : undefined}\r\n                                        aria-label=\"select merge strategy\"\r\n                                        aria-haspopup=\"menu\"\r\n                                        onClick={handleStatSellToggle}\r\n                                    >\r\n                                        <ArrowDropDownIcon />\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                                <Popper open={openStatusSel} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n                                    {({ TransitionProps, placement }) => (\r\n                                        <Grow\r\n                                            {...TransitionProps}\r\n                                            style={{\r\n                                                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                                            }}\r\n                                        >\r\n                                            <Paper>\r\n                                                <ClickAwayListener onClickAway={handleStatSellClose}>\r\n                                                    <MenuList id=\"split-button-menu\">\r\n                                                        {allowedStatuses.map((option, index) => (\r\n                                                            <MenuItem\r\n                                                                key={option.name}\r\n                                                                //  disabled={index === 2}\r\n                                                                selected={index === statusSelIndex}\r\n                                                                onClick={(event) => handleMenuItemClick(event, index)}\r\n                                                            >\r\n                                                                {option.name}\r\n                                                            </MenuItem>\r\n                                                        ))}\r\n                                                    </MenuList>\r\n                                                </ClickAwayListener>\r\n                                            </Paper>\r\n                                        </Grow>\r\n                                    )}\r\n                                </Popper>\r\n\r\n                            </div>\r\n                        }\r\n                    </Card>\r\n                </div>\r\n            }\r\n        </div >\r\n    );\r\n}\r\nexport default TasksList;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamTasks.js",["132","133","134"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../../Services/Globals';\r\nimport { getTasks, changeTaskStatus } from \"../../Services/TasksService\";\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport TasksList from \"../Tasks/TasksList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n}));\r\n\r\nconst leaderID = getCurrentUser().userDetails.employeeDTO.id;\r\nconst TeamTasks = () => {\r\n    const classes = useStyles();\r\n    const [team, setTeam] = useState({});\r\n\r\n    useEffect(() => {\r\n        getTeam();\r\n    }, []);\r\n\r\n    const getTeam = () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        fetch(APIURL + `teams/leader/${leaderID}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (\r\n                setTeam(data)\r\n            ));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {team.id === undefined ? null :\r\n                <TasksList teamId={team.id} />\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default TeamTasks;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\CreateTask.js",["135","136","137","138","139"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DarkTextField, DarkSelect, DarkChipList } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals'\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\n\r\nimport { Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from \"moment\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainConteiner: {\r\n        marginTop: \"1.8rem\",\r\n        background: theme.palette.grey[800],\r\n        paddingBottom: '20px'\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    formGrid: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr 1fr\",\r\n        gridTemplateRows: \"1fr 1fr 1fr\",\r\n        justifyContent: \"space-between\",\r\n        alignContent: \"space-between\",\r\n        gridGap: \"0.7rem 0.7rem\",\r\n    },\r\n    nameInput: {\r\n        gridRowStart: '1',\r\n        gridColumnStart: '1',\r\n        gridRowEnd: '2',\r\n        gridColumnEnd: '3',\r\n        display: \"grid\",\r\n    },\r\n    descriptionInput: {\r\n        gridRowStart: '2',\r\n        gridColumnStart: '1',\r\n        gridRowEnd: '3',\r\n        gridColumnEnd: '3',\r\n        display: \"grid\"\r\n    },\r\n    datePickerST: {\r\n        marginTop: '0',\r\n        marginLeft: \"20px\",\r\n        gridRowStart: '3',\r\n        gridColumnStart: '1',\r\n        gridRowEnd: '4',\r\n        gridColumnEnd: '2',\r\n    },\r\n    datePickerD: {\r\n        marginTop: '0',\r\n        marginRight: '8px',\r\n        gridRowStart: '3',\r\n        gridColumnStart: '2',\r\n        gridRowEnd: '4',\r\n        gridColumnEnd: '3',\r\n    },\r\n    addSubtaskButton: {\r\n        width: '10rem',\r\n    },\r\n    subtasksContainer: {\r\n        display: 'grid',\r\n        gridRowStart: '4',\r\n        gridColumnStart: '1',\r\n        gridRowEnd: '5',\r\n        gridColumnEnd: '3',\r\n        padding: '20px',\r\n        paddingTop: '0px'\r\n    },\r\n    createButton: {\r\n        margin: '0 auto',\r\n        display: 'block',\r\n        width: \"19rem\",\r\n    },\r\n    subtaskAccordion: {\r\n        backgroundColor: '#bdbdbd',\r\n        color: \"black\",\r\n        marginTop: \"8px\",\r\n        marginBottom: '4px',\r\n        borderRadius: '4px',\r\n        padding: '0px',\r\n        '&::before': {\r\n            height: 0\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    modalContent: {\r\n        color: \"white\",\r\n        backgroundColor: \"#424242\",\r\n        boxShadow: theme.shadows[2],\r\n        padding: theme.spacing(2, 4, 3),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-between\",\r\n        minWidth: \"260px\",\r\n        minHeight: \"280px\",\r\n    },\r\n}));\r\n\r\nconst leaderID = getCurrentUser().userDetails.employeeDTO.id;\r\nconst CreateTask = () => {\r\n    const classes = useStyles();\r\n    const [task, setTask] = useState({})\r\n    const [subtasks, setSubtasks] = useState([])\r\n    const [newSubtask, setNewSubtask] = useState({})\r\n    const [expandedSubTask, setExpandedSubTask] = useState('');\r\n    const [allEmployees, setAllEmployees] = useState([])\r\n    const [employeesToAssign, setEmployeesToAssign] = useState([])\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const [allertProps, setAllertProps] = useState({\r\n        text: '',\r\n        open: false\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getMembers();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTask({\r\n            ...task,\r\n            subtasks: subtasks\r\n        })\r\n    }, [subtasks]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (employeesToAssign.length === 1) {\r\n            setTask({\r\n                ...task,\r\n                assignedEmployeeId: employeesToAssign[0].id,\r\n            })\r\n        } else\r\n            setTask({\r\n                ...task,\r\n                assignedEmployeeId: 0,\r\n            })\r\n    }, [employeesToAssign]);\r\n\r\n    const getMembers = () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        fetch(APIURL + `teams/leader/${leaderID}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (\r\n                data.members.map(member => {\r\n                    setAllEmployees(old => [...old, {\r\n                        id: member.id,\r\n                        name: member.person.name + \" \" + member.person.surname\r\n                    }])\r\n                })\r\n            ));\r\n    }\r\n\r\n    const PostTask = (formData) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formData),\r\n        };\r\n        fetch(APIURL + 'tasks', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data),\r\n                setAllertProps({\r\n                    text: \"Task Created\",\r\n                    open: true\r\n                })\r\n            );\r\n    }\r\n\r\n    const PostTasks = (formData) => {\r\n        let employeesId = [];\r\n        employeesToAssign.map(employee => {\r\n            employeesId.push(employee.id);\r\n        })\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                employeeTaskDTO: formData,\r\n                employeesID: employeesId\r\n            }),\r\n        };\r\n        fetch(APIURL + 'tasks/multi', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data),\r\n                setAllertProps({\r\n                    text: \"Tasks Created\",\r\n                    open: true\r\n                }));\r\n    }\r\n\r\n    const headleFormChange = e => {\r\n        if (e.target.name === \"employeeSelect\") {\r\n            if (employeesToAssign.length === 0) {\r\n                setEmployeesToAssign([e.target.value]);\r\n            } else {\r\n                let isPicked = false;\r\n                employeesToAssign.forEach(element => {\r\n                    if (element.id === e.target.value.id) {\r\n                        isPicked = true;\r\n                    }\r\n                });\r\n                if (!isPicked) {\r\n                    setEmployeesToAssign([...employeesToAssign, e.target.value]);\r\n                }\r\n            }\r\n        }\r\n\r\n        setTask({\r\n            ...task,\r\n            name: e.target.name === \"taskName\" ? e.target.value : task.name,\r\n            description: e.target.name === \"taskDescription\" ? e.target.value : task.description,\r\n            status: \"Requested\",\r\n            startTime: task.startTime === undefined ? moment().format('yyy-MM-DD') : task.startTime,\r\n            deadline: task.deadline === undefined ? moment().format('yyyy-MM-DD') : task.deadline,\r\n        })\r\n    }\r\n    const headleModalFormChange = e => {\r\n        setNewSubtask({\r\n            ...newSubtask,\r\n            ...task,\r\n            name: e.target.name === \"subtaskName\" ? e.target.value : newSubtask.name,\r\n            description: e.target.name === \"subtaskDescription\" ? e.target.value : newSubtask.description,\r\n            status: \"Requested\",\r\n            startTime: task.startTime === undefined ? moment().format('yyy-MM-DD') : task.startTime,\r\n            deadline: task.deadline === undefined ? moment().format('yyyy-MM-DD') : task.deadline,\r\n        });\r\n    }\r\n\r\n    const hendlePermissionDelete = chipToDelete => {\r\n        setEmployeesToAssign(chips => chips.filter(chip => chip.name !== chipToDelete.name));\r\n    }\r\n\r\n    const hendlePostTask = () => {\r\n        if (employeesToAssign.length === 0) {\r\n            PostTask(task);\r\n            return;\r\n        }\r\n        PostTasks(task);\r\n    }\r\n\r\n    const handleSubTaskExpand = (index) => (event, newExpanded) => {\r\n        setExpandedSubTask(newExpanded ? index : false);\r\n    }\r\n\r\n    const handleModalOpen = () => {\r\n        setModalIsOpen(true);\r\n    };\r\n\r\n    const handleModalClose = () => {\r\n        setModalIsOpen(false);\r\n    };\r\n\r\n    const handleModalConfirm = () => {\r\n        setSubtasks(old => [\r\n            ...old, newSubtask\r\n        ])\r\n        setModalIsOpen(false);\r\n    };\r\n    const subtaskModal = () => {\r\n        return (\r\n            <Modal\r\n                aria-labelledby=\"modal-title\"\r\n                className={classes.modal}\r\n                open={modalIsOpen}\r\n                onClose={handleModalClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={modalIsOpen}>\r\n                    <div className={classes.modalContent}>\r\n                        <h2 id=\"modal-title\">Create New Subtask</h2>\r\n                        <DarkTextField\r\n                            label=\"Subtask Name\"\r\n                            name=\"subtaskName\"\r\n                            onChange={headleModalFormChange}\r\n                        />\r\n                        <DarkTextField\r\n                            label=\"Description\"\r\n                            maxRows={5}\r\n                            name=\"subtaskDescription\"\r\n                            onChange={headleModalFormChange}\r\n                        />\r\n                        <Button\r\n                            style={{ margin: \"10px\", marginBottom: \"0\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleModalConfirm}\r\n                        >Create</Button>\r\n                    </div>\r\n\r\n                </Fade>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    const handleAllertClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAllertProps({ ...allertProps, open: false });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.mainConteiner}>\r\n            {subtaskModal()}\r\n            <Snackbar open={allertProps.open} autoHideDuration={4000} onClose={handleAllertClose}>\r\n                <Alert onClose={handleAllertClose} severity=\"success\">\r\n                    {allertProps.text}\r\n                </Alert>\r\n            </Snackbar>\r\n            <div boxshadow={2} className={classes.title}>\r\n                <h3 >Create New Task</h3>\r\n            </div>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <div className={classes.formGrid}>\r\n                    <div className={classes.nameInput}>\r\n                        <DarkTextField\r\n                            label=\" Task Name\"\r\n                            name=\"taskName\"\r\n                            onChange={headleFormChange}\r\n                        />\r\n                    </div>\r\n                    <div className={classes.descriptionInput} >\r\n                        <DarkTextField\r\n\r\n                            label=\"Description\"\r\n                            maxRows={5}\r\n                            name=\"taskDescription\"\r\n                            onChange={headleFormChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <KeyboardDatePicker\r\n                            className={classes.datePickerST}\r\n                            disableToolbar\r\n                            name=\"dateStart\"\r\n                            variant=\"inline\"\r\n                            format=\"yyyy-MM-DD\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Start Time\"\r\n                            value={task.startTime}\r\n                            onChange={(date) => {\r\n                                setTask({ ...task, startTime: date.format('yyyy-MM-DD') })\r\n                            }}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <KeyboardDatePicker\r\n                            className={classes.datePickerD}\r\n                            disableToolbar\r\n                            name=\"dateDeadline\"\r\n                            variant=\"inline\"\r\n                            format=\"yyyy-MM-DD\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Deadline\"\r\n                            value={task.Deadline}\r\n                            onChange={(date) => {\r\n                                setTask({ ...task, deadline: date.format('yyyy-MM-DD') })\r\n                            }}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                    <div className={classes.subtasksContainer}>\r\n                        <Button\r\n                            className={classes.addSubtaskButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleModalOpen}\r\n                            endIcon={<AddCircleIcon />}\r\n                        >Add Subtask</Button>\r\n                        {subtasks.length < 1 ? null :\r\n                            <div >\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n                                <Typography noWrap variant=\"subtitle1\" style={{ color: \"white\" }}>\r\n                                    Subtasks:\r\n                                </Typography>\r\n                                {subtasks.map((subtask, index) => (\r\n                                    <Accordion\r\n                                        expanded={expandedSubTask === index}\r\n                                        onChange={handleSubTaskExpand(index)}\r\n                                        key={\"subt\" + index}\r\n                                        className={classes.subtaskAccordion}\r\n                                    >\r\n                                        <AccordionSummary\r\n                                            expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                        >\r\n                                            <Typography>\r\n                                                {subtask.name}\r\n                                            </Typography>\r\n                                        </AccordionSummary>\r\n                                        <AccordionDetails>\r\n                                            {subtask.description}\r\n                                        </AccordionDetails>\r\n                                    </Accordion>\r\n                                ))}\r\n\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <DarkChipList\r\n                    label=\"Employees\"\r\n                    name=\"employeeSelect\"\r\n                    collection={allEmployees}\r\n                    clipListCollection={employeesToAssign}\r\n                    onChange={headleFormChange}\r\n                    onDelete={hendlePermissionDelete}\r\n                />\r\n                <Button\r\n                    className={classes.createButton}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={hendlePostTask}\r\n                >Create</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateTask;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeForm.js",["140","141"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DarkTextField, DarkSelect, DarkChipList } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals'\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { format } from 'date-fns'\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainConteiner: {\r\n        marginTop: \"1.8rem\",\r\n        background: theme.palette.grey[800],\r\n        paddingBottom: '20px'\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    formGrid: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr 1fr 1fr\",\r\n        justifyContent: \"space-between\",\r\n        alignContent: \"space-between\",\r\n        gridGap: \"1.2rem 1.2rem\",\r\n    },\r\n    datePicker: {\r\n        marginTop: '0',\r\n        marginLeft: \"20px\"\r\n    },\r\n    createButton: {\r\n        margin: '0 auto',\r\n        display: 'block',\r\n        width: \"19rem\",\r\n    }\r\n}));\r\n\r\nconst EmployeeForm = () => {\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const [seniorityLvs] = useState([\r\n        { id: 1, name: \"Junior\" },\r\n        { id: 2, name: \"Regular\" },\r\n        { id: 3, name: \"Senior\" },\r\n    ]);\r\n    const [employee, setEmployee] = useState(\r\n        location.employee !== undefined ? location.employee.employee :\r\n            {\r\n                id: 0,\r\n                employmentDate: format(new Date(), \"yyy-MM-dd\"),\r\n                remoteWork: false,\r\n                person: {\r\n                    id: 0,\r\n                    name: \"\",\r\n                    surname: \"\",\r\n                    phoneNumber: \"\",\r\n                    email: \"\",\r\n                    employeeAddress: {\r\n                        id: 0,\r\n                        city: \"\",\r\n                        postCode: \"\",\r\n                        street: \"\"\r\n                    }\r\n                },\r\n                position: {\r\n                    id: 0,\r\n                    name: \"\",\r\n                },\r\n                department: {\r\n                    id: 0,\r\n                    name: \"\",\r\n                },\r\n                seniority: \"\",\r\n                permissions: []\r\n            });\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const remoteWork = [\r\n        { id: false, name: \"Office\" },\r\n        { id: true, name: \"Remote\" }\r\n    ];\r\n    const [allPermissions, setAllPermissions] = useState([]);\r\n    const [employeePermissions, setEmployeePermissions] = useState(\r\n        location.employee !== undefined ? location.employee.employee.permissions : []\r\n    );\r\n    const [allertProps, setAllertProps] = useState({\r\n        text: '',\r\n        open: false,\r\n        type: 'success'\r\n    });\r\n\r\n    useEffect(() => {\r\n        getEmployeeProps()\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setEmployee({\r\n            ...employee,\r\n            ['permissions']: employeePermissions\r\n        })\r\n    }, [employeePermissions]);\r\n\r\n    const PostEmployee = (formData) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formData),\r\n        };\r\n        fetch(APIURL + 'employee/create', requestOptions)\r\n            .then(response => response.json())\r\n            .then(() => {\r\n                setAllertProps({\r\n                    text: \"Employee Created\",\r\n                    open: true,\r\n                    type: \"success\"\r\n                })\r\n            }\r\n                , (err) => {\r\n                    console.log(err)\r\n                    setAllertProps({\r\n                        text: \"Employee Creation Error!\",\r\n                        open: true,\r\n                        type: \"error\"\r\n                    })\r\n                });\r\n    }\r\n\r\n    const PutEmployee = (id, formData) => {\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formData),\r\n        };\r\n        fetch(APIURL + 'employee/put/' + id, requestOptions)\r\n            .then(() => setAllertProps({\r\n                text: \"Employee Modified\",\r\n                open: true,\r\n                type: 'success'\r\n            })\r\n                , (err) => {\r\n                    console.log(err)\r\n                    setAllertProps({\r\n                        text: \"Employee Edit Error!\",\r\n                        open: true,\r\n                        type: \"error\"\r\n                    })\r\n                }\r\n            );\r\n    }\r\n\r\n    const getEmployeeProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setDepartments(data));\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setPositions(data));\r\n\r\n        await fetch(APIURL + `permissions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setAllPermissions(data));\r\n    }\r\n\r\n    const headleFormChange = e => {\r\n\r\n        if (e.target.name === \"permissionSelect\") {\r\n            if (employeePermissions.length === 0) {\r\n                setEmployeePermissions([e.target.value]);\r\n            } else {\r\n                let isPicked = false;\r\n                employeePermissions.forEach(element => {\r\n                    if (element.id === e.target.value.id) {\r\n                        isPicked = true;\r\n                    }\r\n                });\r\n                if (!isPicked) {\r\n                    setEmployeePermissions([...employeePermissions, e.target.value]);\r\n                }\r\n            }\r\n        }\r\n        setEmployee({\r\n            ...employee,\r\n            person: {\r\n                ...employee.person,\r\n                name: e.target.name === \"employeeName\" ? e.target.value : employee.person.name,\r\n                surname: e.target.name === \"employeeSurname\" ? e.target.value : employee.person.surname,\r\n                phoneNumber: e.target.name === \"employeePhone\" ? e.target.value : employee.person.phoneNumber,\r\n                email: e.target.name === \"employeeEmail\" ? e.target.value : employee.person.email,\r\n                employeeAddress: {\r\n                    ...employee.person.employeeAddress,\r\n                    city: e.target.name === \"employeeCity\" ? e.target.value : employee.person.employeeAddress.city,\r\n                    postCode: e.target.name === \"employeePostCode\" ? e.target.value : employee.person.employeeAddress.postCode,\r\n                    street: e.target.name === \"employeeStreet\" ? e.target.value : employee.person.employeeAddress.street\r\n                }\r\n            },\r\n            position: e.target.name === \"positionSelect\" ? e.target.value : employee.position,\r\n            department: e.target.name === \"departmentSelect\" ? e.target.value : employee.department,\r\n            employmentDate: employee.employmentDate,\r\n            remoteWork: e.target.name === \"remoteWork\" ? e.target.value.id : employee.remoteWork,\r\n            seniority: e.target.name === \"seniority\" ? e.target.value.name : employee.seniority,\r\n            permissions: employee.permissions\r\n        })\r\n    }\r\n\r\n    const headleDateChange = (e) => {\r\n        setEmployee({ ...employee, employmentDate: e })\r\n    }\r\n    const hendlePermissionDelete = chipToDelete => {\r\n        setEmployeePermissions(chips => chips.filter(chip => chip.name !== chipToDelete.name));\r\n    }\r\n\r\n    const hendleSubmitEmployee = () => {\r\n        console.log(employee);\r\n        if (location.employee !== undefined) {\r\n            PutEmployee(employee.id, employee)\r\n            return;\r\n        }\r\n        PostEmployee(employee);\r\n    }\r\n\r\n    const setSelectVall = (colection, objId) => {\r\n        if (colection[0] === undefined || objId === 0)\r\n            return '';\r\n\r\n        return colection[colection.findIndex((item) => item.id === objId)];\r\n    }\r\n\r\n    const handleAllertClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAllertProps({ ...allertProps, open: false });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.mainConteiner}>\r\n            <Snackbar open={allertProps.open} autoHideDuration={4000} onClose={handleAllertClose}>\r\n                <Alert onClose={handleAllertClose} severity={allertProps.type}>\r\n                    {allertProps.text}\r\n                </Alert>\r\n            </Snackbar>\r\n            <div boxshadow={2} className={classes.title}>\r\n                {employee.id !== 0 ?\r\n                    <h3 >{'Edit Employee: ' + employee.id}</h3> :\r\n                    <h3 >Create New Employee</h3>\r\n                }\r\n            </div>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <div className={classes.formGrid}>\r\n                    <DarkTextField\r\n                        label=\"Name\"\r\n                        name=\"employeeName\"\r\n                        value={employee.person.name}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Surname\"\r\n                        name=\"employeeSurname\"\r\n                        value={employee.person.surname}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Phone Number\"\r\n                        name=\"employeePhone\"\r\n                        type=\"tel\"\r\n                        value={employee.person.phoneNumber}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Email\"\r\n                        name=\"employeeEmail\"\r\n                        value={employee.person.email}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"City\"\r\n                        name=\"employeeCity\"\r\n                        value={employee.person.employeeAddress.city}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Post Code\"\r\n                        name=\"employeePostCode\"\r\n                        value={employee.person.employeeAddress.postCode}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Street\"\r\n                        name=\"employeeStreet\"\r\n                        value={employee.person.employeeAddress.street}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Department\"\r\n                        name=\"departmentSelect\"\r\n                        collection={departments}\r\n                        value={setSelectVall(departments, employee.department.id)}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Position\"\r\n                        name=\"positionSelect\"\r\n                        collection={positions}\r\n                        value={setSelectVall(positions, employee.position.id)}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Seniority\"\r\n                        name=\"seniority\"\r\n                        collection={seniorityLvs}\r\n                        value={\r\n                            seniorityLvs[seniorityLvs.findIndex((item) => item.name === employee.seniority)]} //sen\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Work Type\"\r\n                        name=\"remoteWork\"\r\n                        collection={remoteWork}\r\n                        value={employee.remoteWork === false ? remoteWork[0] : remoteWork[1]}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                            className={classes.datePicker}\r\n                            disableToolbar\r\n                            name=\"datePicker\"\r\n                            variant=\"inline\"\r\n                            format=\"yyyy-MM-dd\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Employment Date\"\r\n                            value={employee.employmentDate}\r\n                            onChange={headleDateChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                </div>\r\n                <DarkChipList\r\n                    label=\"Permissions\"\r\n                    name=\"permissionSelect\"\r\n                    collection={allPermissions}\r\n                    clipListCollection={employeePermissions}\r\n                    onChange={headleFormChange}\r\n                    onDelete={hendlePermissionDelete}\r\n                />\r\n                <Button\r\n                    className={classes.createButton}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={hendleSubmitEmployee}\r\n                >Submit </Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport default EmployeeForm;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\Team_Dashboard.js",["142","143","144","145","146","147","148","149","150"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../../Services/Globals';\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport { Link } from \"react-router-dom\";\r\nimport { getTasks } from \"../../Services/TasksService\";\r\nimport { StatBar } from \"../GlobalComponents\"\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 550,\r\n    },\r\n    statsMain: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    statsContainer: {\r\n        display: 'flex',\r\n        padding: '0 6px 4px',\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '2px 6px 2px',\r\n        marginBottom: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        width: '100%',\r\n    },\r\n    statsBox: {\r\n        width: \"120px\",\r\n        height: \"60px\",\r\n        padding: \"12px\",\r\n        marginRight: '22px',\r\n        marginBottom: '22px',\r\n        position: \"relative\",\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800],\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n    currentTask: {\r\n        borderRadius: '4px',\r\n        backgroundColor: \"green\",\r\n        color: \"white\",\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    noTask: {\r\n        borderRadius: '4px',\r\n        backgroundColor: \"#bd0000\",\r\n        color: \"white\",\r\n        boxShadow: theme.shadows[2],\r\n    }\r\n}));\r\nconst leaderID = getCurrentUser().userDetails.employeeDTO.id;\r\nconst Team_Dashboard = () => {\r\n    const classes = useStyles();\r\n\r\n    const [team, setTeam] = useState({});\r\n    const [idleMembers, setIdleMembers] = useState(0);\r\n    const [tasksStats, setTasksStats] = useState({});\r\n    const [currentTasks, setCurrentTasks] = useState([]);\r\n    useEffect(() => {\r\n        getData();\r\n    }, []);\r\n    useEffect(() => {\r\n        if (team.members !== undefined && currentTasks.length === team.members.length) {\r\n            let couter = 0;\r\n            currentTasks.forEach(element => {\r\n                if (element === undefined) {\r\n                    couter++;\r\n                }\r\n            });\r\n            setIdleMembers(couter)\r\n        }\r\n    }, [currentTasks]);\r\n    const getData = () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        fetch(APIURL + `teams/leader/${leaderID}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (\r\n                setTeam(data),\r\n                getTasksStats(data.id),\r\n                data.members.map((member) => {\r\n                    getTasks(1, 1, member.id, undefined, \"In-Progress\").then((data) => {\r\n                        setCurrentTasks(old => [\r\n                            ...old, data.items[0]\r\n                        ])\r\n                    })\r\n                })\r\n            ));\r\n    }\r\n\r\n    const getTasksStats = (teamId) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        fetch(APIURL + `tasks/stats?teamid=${teamId}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (setTasksStats(data)));\r\n\r\n    }\r\n\r\n    const currentTaskBar = (memberId) => {\r\n        let boxStyle = classes.currentTask;\r\n        let text = loadCurrrentTask(memberId);\r\n        if (text === undefined) {\r\n            boxStyle = classes.noTask;\r\n            text = \"No Task Assigned\";\r\n        }\r\n        return (\r\n            <Typography variant=\"body1\" className={boxStyle}>\r\n                {text}\r\n            </Typography>\r\n        );\r\n    }\r\n    const loadCurrrentTask = (id) => {\r\n        let currTask;\r\n        currentTasks.map(task => {\r\n            if (task !== undefined) {\r\n                if (task.assignedEmployeeId === id) {\r\n                    currTask = task.name;\r\n                }\r\n            }\r\n        });\r\n        return currTask;\r\n    }\r\n    return (\r\n        <div>\r\n            {tasksStats.monthTotal === undefined ? null :\r\n                <div className={classes.statsMain}>\r\n                    <Card style={{ width: 'max-content', marginRight: '22px', marginBottom: '22px' }}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\">Today Tasks: {tasksStats.todayTotal}</Typography>\r\n                        </div>\r\n                        <div className={classes.statsContainer}>\r\n                            <StatBar\r\n                                valueMax={tasksStats.todayTotal}\r\n                                valueCurrent={tasksStats.todayRequested}\r\n                                text={\"Requested: \" + tasksStats.todayRequested}\r\n                                bcolor='rgb(231, 170, 35)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.todayTotal}\r\n                                valueCurrent={tasksStats.todayProgress}\r\n                                text={\"In-Progress: \" + tasksStats.todayProgress}\r\n                                bcolor='rgb(56, 81, 216)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.todayTotal}\r\n                                valueCurrent={tasksStats.todayCompleted}\r\n                                text={\"Completed: \" + tasksStats.todayCompleted}\r\n                                bcolor='rgb(0, 158, 7)'\r\n                            />\r\n                        </div>\r\n                    </Card>\r\n                    <Card style={{ width: 'max-content', marginRight: '22px', marginBottom: '22px' }}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\">This Week Tasks: {tasksStats.weekTotal}</Typography>\r\n                        </div>\r\n                        <div className={classes.statsContainer}>\r\n                            <StatBar\r\n                                valueMax={tasksStats.weekTotal}\r\n                                valueCurrent={tasksStats.weekRequested}\r\n                                text={\"Requested: \" + tasksStats.weekRequested}\r\n                                bcolor='rgb(231, 170, 35)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.weekTotal}\r\n                                valueCurrent={tasksStats.weekProgress}\r\n                                text={\"In-Progress: \" + tasksStats.weekProgress}\r\n                                bcolor='rgb(56, 81, 216)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.weekTotal}\r\n                                valueCurrent={tasksStats.weekCompleted}\r\n                                text={\"Completed: \" + tasksStats.weekCompleted}\r\n                                bcolor='rgb(0, 158, 7)'\r\n                            />\r\n                        </div>\r\n                    </Card>\r\n                    <Card style={{ width: 'max-content', marginRight: '22px', marginBottom: '22px' }}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\">This Month Tasks: {tasksStats.monthTotal}</Typography>\r\n                        </div>\r\n                        <div className={classes.statsContainer}>\r\n                            <StatBar\r\n                                valueMax={tasksStats.monthTotal}\r\n                                valueCurrent={tasksStats.monthRequested}\r\n                                text={\"Requested: \" + tasksStats.monthRequested}\r\n                                bcolor='rgb(231, 170, 35)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.monthTotal}\r\n                                valueCurrent={tasksStats.monthProgress}\r\n                                text={\"In-Progress: \" + tasksStats.monthProgress}\r\n                                bcolor='rgb(56, 81, 216)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.monthTotal}\r\n                                valueCurrent={tasksStats.monthCompleted}\r\n                                text={\"Completed: \" + tasksStats.monthCompleted}\r\n                                bcolor='rgb(0, 158, 7)'\r\n                            />\r\n                        </div>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{tasksStats.totalDelayedTasks}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Delayed Tasks</Typography>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{idleMembers}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Idle Members</Typography>\r\n                    </Card>\r\n                </div>\r\n            }\r\n            {team.members === undefined ? <div></div> :\r\n                <Card className={classes.root}>\r\n                    <CardHeader\r\n                        title={'\"' + team.name + '\"' + \" Team Members:\"}\r\n                    />\r\n\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        #\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Now Working On\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell>\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {team.members.map((employee, index) => (\r\n                                    <TableRow hover key={employee.id}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {index + 1}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.remoteWork === true ?\r\n                                                <CheckCircleIcon /> : <CloseIcon />}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {currentTasks.length !== team.members.length ? null :\r\n                                                currentTaskBar(employee.id)\r\n                                            }\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${employee.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Card>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default Team_Dashboard;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamList.js",["151","152","153","154"],{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","replacedBy":"158"},{"ruleId":"159","severity":1,"message":"160","line":2,"column":17,"nodeType":"161","messageId":"162","endLine":2,"endColumn":26},{"ruleId":"159","severity":1,"message":"163","line":2,"column":28,"nodeType":"161","messageId":"162","endLine":2,"endColumn":36},{"ruleId":"159","severity":1,"message":"164","line":3,"column":50,"nodeType":"161","messageId":"162","endLine":3,"endColumn":54},{"ruleId":"165","severity":1,"message":"166","line":284,"column":1,"nodeType":"167","endLine":290,"endColumn":3},{"ruleId":"168","severity":1,"message":"169","line":62,"column":9,"nodeType":"161","messageId":"170","endLine":62,"endColumn":21},{"ruleId":"159","severity":1,"message":"160","line":1,"column":17,"nodeType":"161","messageId":"162","endLine":1,"endColumn":26},{"ruleId":"159","severity":1,"message":"171","line":5,"column":8,"nodeType":"161","messageId":"162","endLine":5,"endColumn":28},{"ruleId":"159","severity":1,"message":"172","line":8,"column":8,"nodeType":"161","messageId":"162","endLine":8,"endColumn":17},{"ruleId":"173","severity":1,"message":"174","line":77,"column":9,"nodeType":"175","messageId":"176","endLine":84,"endColumn":10},{"ruleId":"177","severity":1,"message":"178","line":158,"column":29,"nodeType":"179","endLine":158,"endColumn":45},{"ruleId":"177","severity":1,"message":"180","line":179,"column":29,"nodeType":"179","endLine":179,"endColumn":47},{"ruleId":"159","severity":1,"message":"181","line":9,"column":8,"nodeType":"161","messageId":"162","endLine":9,"endColumn":17},{"ruleId":"182","severity":1,"message":"183","line":113,"column":9,"nodeType":"184","messageId":"185","endLine":118,"endColumn":10,"fix":"186"},{"ruleId":"182","severity":1,"message":"187","line":119,"column":9,"nodeType":"184","messageId":"185","endLine":124,"endColumn":10,"fix":"188"},{"ruleId":"182","severity":1,"message":"189","line":125,"column":9,"nodeType":"184","messageId":"185","endLine":130,"endColumn":10,"fix":"190"},{"ruleId":"173","severity":1,"message":"174","line":150,"column":21,"nodeType":"175","messageId":"176","endLine":160,"endColumn":22},{"ruleId":"191","severity":1,"message":"192","line":164,"column":8,"nodeType":"193","endLine":164,"endColumn":20,"suggestions":"194"},{"ruleId":"173","severity":1,"message":"174","line":223,"column":9,"nodeType":"175","messageId":"176","endLine":246,"endColumn":10},{"ruleId":"191","severity":1,"message":"195","line":126,"column":8,"nodeType":"193","endLine":126,"endColumn":27,"suggestions":"196"},{"ruleId":"191","severity":1,"message":"197","line":130,"column":8,"nodeType":"193","endLine":130,"endColumn":10,"suggestions":"198"},{"ruleId":"199","severity":1,"message":"200","line":147,"column":52,"nodeType":"201","messageId":"202","endLine":147,"endColumn":53},{"ruleId":"191","severity":1,"message":"203","line":59,"column":8,"nodeType":"193","endLine":59,"endColumn":10,"suggestions":"204"},{"ruleId":"159","severity":1,"message":"205","line":16,"column":8,"nodeType":"161","messageId":"162","endLine":16,"endColumn":14},{"ruleId":"199","severity":1,"message":"200","line":131,"column":52,"nodeType":"201","messageId":"202","endLine":131,"endColumn":53},{"ruleId":"159","severity":1,"message":"206","line":12,"column":11,"nodeType":"161","messageId":"162","endLine":12,"endColumn":29},{"ruleId":"159","severity":1,"message":"207","line":4,"column":10,"nodeType":"161","messageId":"162","endLine":4,"endColumn":24},{"ruleId":"191","severity":1,"message":"208","line":232,"column":8,"nodeType":"193","endLine":232,"endColumn":10,"suggestions":"209"},{"ruleId":"191","severity":1,"message":"210","line":238,"column":8,"nodeType":"193","endLine":238,"endColumn":30,"suggestions":"211"},{"ruleId":"173","severity":1,"message":"174","line":307,"column":13,"nodeType":"175","messageId":"176","endLine":344,"endColumn":14},{"ruleId":"159","severity":1,"message":"212","line":4,"column":10,"nodeType":"161","messageId":"162","endLine":4,"endColumn":18},{"ruleId":"159","severity":1,"message":"213","line":4,"column":20,"nodeType":"161","messageId":"162","endLine":4,"endColumn":36},{"ruleId":"159","severity":1,"message":"214","line":14,"column":11,"nodeType":"161","messageId":"162","endLine":14,"endColumn":18},{"ruleId":"159","severity":1,"message":"215","line":3,"column":25,"nodeType":"161","messageId":"162","endLine":3,"endColumn":35},{"ruleId":"191","severity":1,"message":"216","line":148,"column":8,"nodeType":"193","endLine":148,"endColumn":18,"suggestions":"217"},{"ruleId":"191","severity":1,"message":"216","line":162,"column":8,"nodeType":"193","endLine":162,"endColumn":27,"suggestions":"218"},{"ruleId":"219","severity":1,"message":"220","line":172,"column":41,"nodeType":"221","messageId":"222","endLine":172,"endColumn":43},{"ruleId":"219","severity":1,"message":"220","line":199,"column":40,"nodeType":"221","messageId":"222","endLine":199,"endColumn":42},{"ruleId":"182","severity":1,"message":"223","line":109,"column":13,"nodeType":"184","messageId":"185","endLine":109,"endColumn":49,"fix":"224"},{"ruleId":"191","severity":1,"message":"225","line":111,"column":8,"nodeType":"193","endLine":111,"endColumn":29,"suggestions":"226"},{"ruleId":"159","severity":1,"message":"227","line":11,"column":8,"nodeType":"161","messageId":"162","endLine":11,"endColumn":13},{"ruleId":"159","severity":1,"message":"228","line":17,"column":8,"nodeType":"161","messageId":"162","endLine":17,"endColumn":23},{"ruleId":"159","severity":1,"message":"205","line":19,"column":8,"nodeType":"161","messageId":"162","endLine":19,"endColumn":14},{"ruleId":"191","severity":1,"message":"229","line":106,"column":8,"nodeType":"193","endLine":106,"endColumn":10,"suggestions":"230"},{"ruleId":"191","severity":1,"message":"231","line":117,"column":8,"nodeType":"193","endLine":117,"endColumn":22,"suggestions":"232"},{"ruleId":"199","severity":1,"message":"200","line":126,"column":30,"nodeType":"201","messageId":"202","endLine":126,"endColumn":31},{"ruleId":"219","severity":1,"message":"220","line":128,"column":43,"nodeType":"221","messageId":"222","endLine":128,"endColumn":45},{"ruleId":"219","severity":1,"message":"220","line":164,"column":31,"nodeType":"221","messageId":"222","endLine":164,"endColumn":33},{"ruleId":"233","severity":1,"message":"234","line":265,"column":54,"nodeType":"235","messageId":"236","endLine":265,"endColumn":55},{"ruleId":"159","severity":1,"message":"237","line":2,"column":22,"nodeType":"161","messageId":"162","endLine":2,"endColumn":32},{"ruleId":"159","severity":1,"message":"238","line":117,"column":12,"nodeType":"161","messageId":"162","endLine":117,"endColumn":24},{"ruleId":"159","severity":1,"message":"239","line":117,"column":26,"nodeType":"161","messageId":"162","endLine":117,"endColumn":41},{"ruleId":"191","severity":1,"message":"240","line":131,"column":8,"nodeType":"193","endLine":131,"endColumn":10,"suggestions":"241"},"no-native-reassign",["242"],"no-negated-in-lhs",["243"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Link' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-const-assign","'allowedViews' is constant.","const","'CreateJobApplication' is defined but never used.","'LoginUser' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-pascal-case","Imported JSX component HR_Dashboard must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component Team_Dashboard must be in PascalCase or SCREAMING_SNAKE_CASE","'CardMedia' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['requested'] found.","Property","unnecessarilyComputedProperty",{"range":"244","text":"245"},"Unnecessarily computed property ['inprogress'] found.",{"range":"246","text":"247"},"Unnecessarily computed property ['completed'] found.",{"range":"248","text":"249"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'adddItemsToColumn'. Either include it or remove the dependency array.","ArrayExpression",["250"],"React Hook useEffect has a missing dependency: 'getEmploees'. Either include it or remove the dependency array.",["251"],"React Hook useEffect has a missing dependency: 'getSearchProps'. Either include it or remove the dependency array.",["252"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["253"],"'Button' is defined but never used.","'PostJobApplication' is assigned a value but never used.","'getCurrentUser' is defined but never used.","React Hook useEffect has missing dependencies: 'loadTasksList', 'pagination.page', and 'pagination.size'. Either include them or remove the dependency array.",["254"],"React Hook useEffect has a missing dependency: 'props.teamId'. Either include it or remove the dependency array.",["255"],"'getTasks' is defined but never used.","'changeTaskStatus' is defined but never used.","'classes' is assigned a value but never used.","'DarkSelect' is defined but never used.","React Hook useEffect has a missing dependency: 'task'. Either include it or remove the dependency array. You can also do a functional update 'setTask(t => ...)' if you only need 'task' in the 'setTask' call.",["256"],["257"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Unnecessarily computed property ['permissions'] found.",{"range":"258","text":"259"},"React Hook useEffect has a missing dependency: 'employee'. Either include it or remove the dependency array. You can also do a functional update 'setEmployee(e => ...)' if you only need 'employee' in the 'setEmployee' call.",["260"],"'Paper' is defined but never used.","'TablePagination' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["261"],"React Hook useEffect has a missing dependency: 'team.members'. Either include it or remove the dependency array.",["262"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'withStyles' is defined but never used.","'searchParams' is assigned a value but never used.","'setSearchParams' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'pagination.page' and 'pagination.size'. Either include them or remove the dependency array.",["263"],"no-global-assign","no-unsafe-negation",[3539,3552],"'requested'",[3706,3720],"'inprogress'",[3879,3892],"'completed'",{"desc":"264","fix":"265"},{"desc":"266","fix":"267"},{"desc":"268","fix":"269"},{"desc":"270","fix":"271"},{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},[3463,3478],"'permissions'",{"desc":"280","fix":"281"},{"desc":"282","fix":"283"},{"desc":"284","fix":"285"},{"desc":"286","fix":"287"},"Update the dependencies array to be: [adddItemsToColumn, taskFilter]",{"range":"288","text":"289"},"Update the dependencies array to be: [getEmploees, page, rowsPerPage]",{"range":"290","text":"291"},"Update the dependencies array to be: [getSearchProps]",{"range":"292","text":"293"},"Update the dependencies array to be: [params.id]",{"range":"294","text":"295"},"Update the dependencies array to be: [loadTasksList, pagination.page, pagination.size]",{"range":"296","text":"297"},"Update the dependencies array to be: [props.teamId, selectedIndex, tasks]",{"range":"298","text":"299"},"Update the dependencies array to be: [subtasks, task]",{"range":"300","text":"301"},"Update the dependencies array to be: [employeesToAssign, task]",{"range":"302","text":"303"},"Update the dependencies array to be: [employee, employeePermissions]",{"range":"304","text":"305"},"Update the dependencies array to be: [getData]",{"range":"306","text":"307"},"Update the dependencies array to be: [currentTasks, team.members]",{"range":"308","text":"309"},"Update the dependencies array to be: [pagination.page, pagination.size]",{"range":"310","text":"311"},[5086,5098],"[adddItemsToColumn, taskFilter]",[4282,4301],"[getEmploees, page, rowsPerPage]",[4363,4365],"[getSearchProps]",[1569,1571],"[params.id]",[7664,7666],"[loadTasksList, pagination.page, pagination.size]",[7869,7891],"[props.teamId, selectedIndex, tasks]",[4448,4458],"[subtasks, task]",[4791,4810],"[employeesToAssign, task]",[3520,3541],"[employee, employeePermissions]",[3396,3398],"[getData]",[3758,3772],"[currentTasks, team.members]",[4290,4292],"[pagination.page, pagination.size]"]