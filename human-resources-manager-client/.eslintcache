[{"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\index.js":"1","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\App.js":"2","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\reportWebVitals.js":"3","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\GlobalComponents.js":"4","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\AuthService.js":"5","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\MainComponent.js":"6","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\Globals.js":"7","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\StartPage.js":"8","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksColumns.js":"9","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeList.js":"10","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeDetails.js":"11","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\LoginUser.js":"12","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Dashboard.js":"13","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\JobApplication\\CreateJobApplication.js":"14","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\TasksService.js":"15","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksList.js":"16","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamTasks.js":"17","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\CreateTask.js":"18","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeForm.js":"19","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\Team_Dashboard.js":"20","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamList.js":"21","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\AddTeamMembers.js":"22","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\CreateTeam.js":"23","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Manager.js":"24","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\UsersList.js":"25","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\UserForm.js":"26","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\Profile.js":"27"},{"size":242,"mtime":1626196431129,"results":"28","hashOfConfig":"29"},{"size":1025,"mtime":1642248061865,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"29"},{"size":9655,"mtime":1646394722616,"results":"32","hashOfConfig":"29"},{"size":1966,"mtime":1646913397590,"results":"33","hashOfConfig":"29"},{"size":17499,"mtime":1648463127606,"results":"34","hashOfConfig":"29"},{"size":70,"mtime":1641207518125,"results":"35","hashOfConfig":"29"},{"size":1991,"mtime":1644314466755,"results":"36","hashOfConfig":"29"},{"size":23372,"mtime":1649927377284,"results":"37","hashOfConfig":"29"},{"size":18681,"mtime":1650710956355,"results":"38","hashOfConfig":"29"},{"size":5995,"mtime":1650707753912,"results":"39","hashOfConfig":"29"},{"size":3733,"mtime":1649929477871,"results":"40","hashOfConfig":"29"},{"size":21878,"mtime":1650708039693,"results":"41","hashOfConfig":"29"},{"size":2650,"mtime":1642248358913,"results":"42","hashOfConfig":"29"},{"size":3832,"mtime":1650710694132,"results":"43","hashOfConfig":"29"},{"size":34248,"mtime":1650710659491,"results":"44","hashOfConfig":"29"},{"size":1016,"mtime":1650709236260,"results":"45","hashOfConfig":"29"},{"size":16963,"mtime":1650708251544,"results":"46","hashOfConfig":"29"},{"size":15071,"mtime":1650710794410,"results":"47","hashOfConfig":"29"},{"size":19828,"mtime":1650708727683,"results":"48","hashOfConfig":"29"},{"size":24867,"mtime":1650708828960,"results":"49","hashOfConfig":"29"},{"size":21257,"mtime":1650708579195,"results":"50","hashOfConfig":"29"},{"size":13400,"mtime":1650708630367,"results":"51","hashOfConfig":"29"},{"size":18481,"mtime":1650708149120,"results":"52","hashOfConfig":"29"},{"size":16878,"mtime":1648629578124,"results":"53","hashOfConfig":"29"},{"size":5460,"mtime":1650709132194,"results":"54","hashOfConfig":"29"},{"size":16749,"mtime":1650709044718,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"157fim5",{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"58"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"58"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":"79","usedDeprecatedRules":"58"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"58"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"95","messages":"96","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"97","messages":"98","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"103","messages":"104","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"111","messages":"112","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\index.js",[],["118","119"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\App.js",["120","121","122"],"import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { createTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport LoginUser from './Components/Users/LoginUser';\nimport MainComponent from './Components/MainComponent';\nimport StartPage from './Components/StartPage';\n\nconst theme = createTheme({\n  palette: {\n    secondary: {\n      light: \"#3b783d\",\n      main: \"#367338\",\n      dark: \"#2e6630\",\n      contrastText: \"#fff\"\n    },\n    type: 'dark'\n  }\n})\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <StartPage />\n          </Route>\n          <Route path=\"/login\">\n            <LoginUser />\n          </Route>\n          <Route path=\"/main\" >\n            <MainComponent />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\reportWebVitals.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\GlobalComponents.js",["123"],"import { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst StyledTextField = withStyles({\r\n    root: {\r\n\r\n        '& .MuiInputBase-root': {\r\n            color: \"white\",\r\n            marginRight: \"10px\",\r\n            marginLeft: \"20px\",\r\n            marginBottom: \"11px\",\r\n        },\r\n\r\n        '& .MuiFormLabel-root': {\r\n            color: \"#999999\",\r\n            marginLeft: \"20px\",\r\n        },\r\n\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiInput-underline:hover:not(.Mui-disabled):before': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottomColor: '#999999',\r\n        },\r\n        '& input[type=\"password\" i]': {\r\n            webkitTextSecurity: 'disc !important'\r\n        }\r\n    },\r\n})(TextField);\r\n\r\nconst StyledSelectFC = withStyles({\r\n    root: {\r\n        '& .MuiInputBase-root': {\r\n            color: \"white\",\r\n            marginRight: \"10px\",\r\n            marginLeft: \"20px\",\r\n            marginBottom: \"11px\",\r\n        },\r\n\r\n        '& .MuiFormLabel-root': {\r\n            color: \"#999999\",\r\n            marginLeft: \"20px\",\r\n        },\r\n\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiInput-underline:hover:not(.Mui-disabled):before': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottomColor: '#999999',\r\n        },\r\n        '& .MuiSelect-icon': {\r\n            color: '#999999',\r\n        },\r\n    },\r\n})(FormControl);\r\n\r\nconst BorderLinearProgress = withStyles((theme) => {\r\n    return {\r\n        root: {\r\n            borderRadius: \"6px\",\r\n            width: \"32px\",\r\n            height: \"100%\",\r\n            marginBottom: \"2px\"\r\n        },\r\n        colorPrimary: {\r\n            boxShadow: 'inset 0px 3px 3px -2px rgb(0 0 0 / 20%), inset 0px 3px 4px 0px rgb(0 0 0 / 14%), inset 0px 1px 8px 0px rgb(0 0 0 / 12%), ' + theme.shadows[1],\r\n            backgroundColor: '#a9a6a6',\r\n            borderRadius: '4px',\r\n        },\r\n        bar: {\r\n            borderRadius: \"6px\",\r\n            boxShadow: theme.shadows[3],\r\n            transform: ({ value }) => {\r\n                return `translateY(${value}%) !important`;\r\n            },\r\n            backgroundColor: ({ bcolor }) => { return bcolor }\r\n        },\r\n    };\r\n})(LinearProgress);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 138,\r\n    },\r\n    darkChipListBox: {\r\n        display: 'flex',\r\n    },\r\n    chipListContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        listStyle: 'none',\r\n        padding: theme.spacing(0.5),\r\n        paddingTop: \"12px\",\r\n        width: \"max-content\",\r\n        margin: \"0\",\r\n    },\r\n    chipItem: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '2px 6px 2px',\r\n        marginBottom: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        width: '100%',\r\n    },\r\n    barBox: {\r\n        minHeight: \"160px\",\r\n        display: \"flex\",\r\n        padding: \"0\",\r\n        margin: '6px',\r\n        width: \"max-content\",\r\n        boxshadow: theme.shadows[2]\r\n    },\r\n    stats: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n        backgroundColor: '#bdbdbd',\r\n        color: 'black'\r\n    }\r\n}));\r\n\r\nexport const DarkTextField = ({ onChange, label, name, type, maxRows, value, defaultValue, disabled }) => {\r\n    return (\r\n        <StyledTextField\r\n            onChange={onChange}\r\n            multiline={maxRows !== undefined ? true : false}\r\n            maxRows={maxRows}\r\n            label={label}\r\n            name={name}\r\n            type={type}\r\n            value={value}\r\n            defaultValue={defaultValue}\r\n            disabled={disabled}\r\n        />\r\n    );\r\n};\r\n\r\nexport const DarkSelect = ({ onChange, label, name, value, firstVal, collection, defaultValue }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <StyledSelectFC className={classes.formControl}>\r\n            <InputLabel id=\"select-params-label\">{label}</InputLabel>\r\n            <Select\r\n                labelId=\"select-params-label\"\r\n                id=\"select-params\"\r\n                name={name}\r\n                onChange={onChange}\r\n                value={value}\r\n                defaultValue={defaultValue === undefined ? '' : defaultValue}\r\n            >\r\n                {\r\n                    firstVal === undefined ? null :\r\n                        <MenuItem key={0} value={firstVal.id} >{firstVal.name}</MenuItem>\r\n                }\r\n                {collection === undefined ? null :\r\n                    collection.map((item, index) => (\r\n                        <MenuItem key={index + 1} value={item}>{item.name}</MenuItem>\r\n                    ))\r\n                }\r\n            </Select>\r\n        </StyledSelectFC>\r\n    );\r\n};\r\n\r\nexport const DarkChipList = ({ onChange, label, name, value, firstVal, firstLabel, collection, clipListCollection, onDelete }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.darkChipListBox}>\r\n            <StyledSelectFC className={classes.formControl}>\r\n                <InputLabel id=\"select-params-label\">{label}</InputLabel>\r\n                <Select\r\n                    labelId=\"select-params-label\"\r\n                    id=\"select-params\"\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    value={value}\r\n                >\r\n                    {firstVal === undefined ? <div></div> :\r\n                        <MenuItem value={firstVal}>{firstLabel}</MenuItem>\r\n                    }\r\n                    {collection === undefined ? <div></div> :\r\n                        collection.map((item, index) => (\r\n                            <MenuItem id={\"chipMenuItem\" + item.id} key={\"chipKey\" + item.id} value={item}>{item.name}</MenuItem>\r\n                        ))\r\n                    }\r\n                </Select>\r\n            </StyledSelectFC>\r\n            <ul className={classes.chipListContainer}>\r\n                {clipListCollection === undefined ? <div></div> :\r\n                    clipListCollection.map((data, index) => {\r\n                        return (\r\n                            <li key={index}>\r\n                                <Chip\r\n                                    className={classes.chipItem}\r\n                                    label={data.name}\r\n                                    onDelete={() => onDelete(data)}\r\n                                />\r\n                            </li>\r\n                        );\r\n                    })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const StatBar = ({ valueMax, valueCurrent, text, bcolor }) => {\r\n    const classes = useStyles();\r\n\r\n    const barLvl = valueMax === 0 && valueCurrent === 0 ? 100 :\r\n        100 - (valueCurrent * 100) / valueMax;\r\n\r\n    return (\r\n        <Card className={classes.barBox}>\r\n\r\n            <div className={classes.stats}>\r\n                <div className={classes.title}>\r\n                    <Typography noWrap variant=\"body2\">{text}</Typography>\r\n                </div>\r\n                <BorderLinearProgress variant=\"determinate\" bcolor={bcolor} value={barLvl} />\r\n                <Typography variant=\"button\">{Math.round(100 - barLvl)}%</Typography>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport const ConfirmDialog = (props) => {\r\n    const { title, children, open, setOpen, onConfirm } = props;\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={() => setOpen(false)}\r\n            aria-labelledby=\"confirm-dialog\"\r\n        >\r\n            <DialogTitle id=\"confirm-dialog\">{title}</DialogTitle>\r\n            <DialogContent>{children}</DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => setOpen(false)}\r\n                    color=\"secondary\"\r\n                >\r\n                    No\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => {\r\n                        setOpen(false);\r\n                        onConfirm();\r\n                    }}\r\n                    color=\"default\"\r\n                >\r\n                    Yes\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default {\r\n    DarkChipList,\r\n    DarkSelect,\r\n    DarkTextField,\r\n    StatBar,\r\n    ConfirmDialog\r\n};","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\AuthService.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\MainComponent.js",["124","125","126","127","128","129"],"import React, { useEffect, useState } from \"react\";\r\nimport { BrowserRouter as Router, Switch, Route, Link, useHistory } from \"react-router-dom\";\r\nimport { getUserAccess, logout, getCurrentUser } from '../Services/AuthService';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport EmployeeList from './Employees/EmployeeList';\r\nimport HR_Dashboard from './Employees/HR_Dashboard';\r\nimport HR_Manager from './Employees/HR_Manager';\r\nimport CreateJobApplication from './JobApplication/CreateJobApplication';\r\nimport EmployeeForm from './Employees/EmployeeForm';\r\nimport { EmployeeDetails } from './Employees/EmployeeDetails';\r\nimport Profile from './Users/Profile'\r\nimport UsersList from \"./Users/UsersList\";\r\nimport UserForm from './Users/UserForm';\r\nimport Team_Dashboard from './Teams/Team_Dashboard';\r\nimport TeamTasks from \"./Teams/TeamTasks\";\r\nimport TasksColumns from './Tasks/TasksColumns';\r\nimport TasksList from \"./Tasks/TasksList\";\r\nimport CreateTask from \"./Tasks/CreateTask\";\r\nimport TeamList from \"./Teams/TeamList\"\r\nimport CreateTeam from \"./Teams/CreateTeam\";\r\nimport AddTeamMembers from \"./Teams/AddTeamMembers\"\r\n\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport ChevronLeftIcon from '@material-ui/icons/ChevronLeft';\r\nimport EventNoteIcon from '@material-ui/icons/EventNote';\r\nimport PollIcon from '@material-ui/icons/Poll';\r\nimport AssignmentIndIcon from '@material-ui/icons/AssignmentInd';\r\nimport AssignmentIcon from '@material-ui/icons/Assignment';\r\nimport PeopleAltIcon from '@material-ui/icons/PeopleAlt';\r\nimport DateRangeIcon from '@material-ui/icons/DateRange';\r\nimport FormatListBulletedIcon from '@material-ui/icons/FormatListBulleted';\r\nimport DeveloperBoardIcon from '@material-ui/icons/DeveloperBoard';\r\nimport RecentActorsIcon from '@material-ui/icons/RecentActors';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport GroupWorkIcon from '@material-ui/icons/GroupWork';\r\n\r\nconst drawerWidth = 240;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    appBar: {\r\n        zIndex: theme.zIndex.drawer + 1\r\n    },\r\n    menuButton: {\r\n        marginRight: 36,\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n        whiteSpace: 'nowrap',\r\n        marginTop: '123px'\r\n    },\r\n    drawerOpen: {\r\n        width: drawerWidth,\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    drawerClose: {\r\n        transition: theme.transitions.create('width', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        overflowX: 'hidden',\r\n        width: theme.spacing(7) + 1,\r\n        [theme.breakpoints.up('sm')]: {\r\n            width: theme.spacing(9) + 1,\r\n        },\r\n    },\r\n    drawerContainer: {\r\n        marginTop: '65px',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        padding: '1.5rem',\r\n        paddingTop: '5rem',\r\n        padding: theme.spacing(3),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth + 73,\r\n    },\r\n    contentShift: {\r\n        flexGrow: 1,\r\n        padding: '1.5rem',\r\n        paddingTop: '5rem',\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    navList: {\r\n        '& .MuiSvgIcon-root': {\r\n            marginLeft: '4px',\r\n            width: '32px',\r\n            height: '32px',\r\n        },\r\n    },\r\n    linkButtons: {\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n    },\r\n}));\r\n\r\nconst MainComponent = () => {\r\n    const history = useHistory();\r\n    const [userAccess] = useState(getUserAccess());\r\n    const [navIsOpen, setNavIsOpen] = useState(false);\r\n    const [currentLocation, setCurrentLocation] = useState(\r\n        history.location.pathname.substr(history.location.pathname.lastIndexOf('/') + 1));\r\n\r\n\r\n    const isNavItemmSelected = (name) => {\r\n        if (name === currentLocation) {\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    const handleLogout = () => {\r\n        logout();\r\n        history.push(\"/login\");\r\n    }\r\n    const classes = useStyles();\r\n    return (\r\n        <Router>\r\n            <div className={classes.root}>\r\n                <AppBar\r\n                    position=\"fixed\"\r\n                    className={classes.appBar}\r\n                >\r\n                    <Toolbar>\r\n                        {navIsOpen ?\r\n                            <IconButton\r\n                                onClick={() => setNavIsOpen(false)}\r\n                                edge=\"start\"\r\n                                className={classes.menuButton}\r\n                            >\r\n                                <ChevronLeftIcon />\r\n                            </IconButton> :\r\n                            <IconButton\r\n                                color=\"inherit\"\r\n                                onClick={() => setNavIsOpen(true)}\r\n                                edge=\"start\"\r\n                                className={classes.menuButton}\r\n                            >\r\n                                <MenuIcon />\r\n                            </IconButton>\r\n                        }\r\n                        <Typography variant=\"h6\" component=\"div\" style={{ flexGrow: 1 }}>\r\n                            Human Resources Manager\r\n                        </Typography>\r\n                        <Link className={classes.linkButtons} to=\"/main/profile\">\r\n                            <IconButton size='small' aria-label=\"delete\">\r\n                                <AccountCircleIcon />\r\n                            </IconButton>\r\n                        </Link>\r\n\r\n                        <Button onClick={handleLogout}>Logout</Button>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    className={\r\n                        classes.drawer +\r\n                            navIsOpen ? classes.drawerOpen :\r\n                            classes.drawerClose\r\n                    }\r\n                    variant=\"permanent\"\r\n                    classes={{\r\n                        paper: navIsOpen ? classes.drawerOpen :\r\n                            classes.drawerClose\r\n                    }}\r\n                >\r\n                    <div className={classes.drawerContainer}>\r\n\r\n                        <List component=\"nav\" className={classes.navList}>\r\n                            {userAccess.humanResources === false ? null :\r\n                                <React.Fragment>\r\n                                    <Link className={classes.linkButtons} to=\"/main/dashboard\">\r\n                                        <ListItem button\r\n                                            selected={isNavItemmSelected('dashboard')}\r\n                                            onClick={() => setCurrentLocation('dashboard')}\r\n                                        >\r\n                                            <ListItemIcon><PollIcon /></ListItemIcon>\r\n                                            <ListItemText primary={<Typography noWrap>Dashboard</Typography>} />\r\n                                        </ListItem>\r\n                                    </Link>\r\n                                    <Link className={classes.linkButtons} to=\"/main/hr-manager\">\r\n                                        <ListItem button\r\n                                            selected={isNavItemmSelected('hr-manager')}\r\n                                            onClick={() => setCurrentLocation('hr-manager')}\r\n                                        >\r\n                                            <ListItemIcon><AssignmentIndIcon /></ListItemIcon>\r\n                                            <ListItemText primary={<Typography noWrap>HR-Manager</Typography>} />\r\n                                        </ListItem>\r\n                                    </Link>\r\n                                    <Link className={classes.linkButtons} to=\"/main/employees\">\r\n                                        <ListItem button\r\n                                            selected={isNavItemmSelected('employees')}\r\n                                            onClick={() => setCurrentLocation('employees')}\r\n                                        >\r\n                                            <ListItemIcon><PeopleAltIcon /></ListItemIcon>\r\n                                            <ListItemText primary={<Typography noWrap>Employees</Typography>} />\r\n                                        </ListItem>\r\n                                    </Link>\r\n                                    <Link className={classes.linkButtons} to=\"/main/team-list\">\r\n                                        <ListItem button\r\n                                            selected={isNavItemmSelected('team-list')}\r\n                                            onClick={() => setCurrentLocation('team-list')}\r\n                                        >\r\n                                            <ListItemIcon><GroupWorkIcon /></ListItemIcon>\r\n                                            <ListItemText primary={<Typography noWrap>Team List</Typography>} />\r\n                                        </ListItem>\r\n                                    </Link>\r\n                                    <Link className={classes.linkButtons} to=\"/main/applications\">\r\n                                        <ListItem button\r\n                                            selected={isNavItemmSelected('applications')}\r\n                                            onClick={() => setCurrentLocation('applications')}\r\n                                        >\r\n                                            <ListItemIcon><AssignmentIcon /></ListItemIcon>\r\n                                            <ListItemText primary={<Typography noWrap>Job Applications</Typography>} />\r\n                                        </ListItem>\r\n                                    </Link>\r\n                                    <Divider />\r\n                                </React.Fragment>\r\n                            }\r\n                            <Link className={classes.linkButtons} to=\"/main/tasks-columns\">\r\n                                <ListItem button\r\n                                    selected={isNavItemmSelected('tasks-columns')}\r\n                                    onClick={() => setCurrentLocation('tasks-columns')}\r\n                                >\r\n                                    <ListItemIcon><DateRangeIcon /></ListItemIcon>\r\n                                    <ListItemText primary={<Typography noWrap>Tasks</Typography>} />\r\n                                </ListItem>\r\n                            </Link>\r\n                            <Link className={classes.linkButtons} to=\"/main/tasks-list\">\r\n                                <ListItem button\r\n                                    selected={isNavItemmSelected('tasks-list')}\r\n                                    onClick={() => setCurrentLocation('tasks-list')}\r\n                                >\r\n                                    <ListItemIcon><FormatListBulletedIcon /></ListItemIcon>\r\n                                    <ListItemText primary={<Typography noWrap>Task List</Typography>} />\r\n                                </ListItem>\r\n                            </Link>\r\n                            <Divider />\r\n                            {userAccess.teamManager === false ? null :\r\n                                <React.Fragment>\r\n                                    <Link className={classes.linkButtons} to=\"/main/team-manager\">\r\n                                        <ListItem button\r\n                                            selected={isNavItemmSelected('team-manager')}\r\n                                            onClick={() => setCurrentLocation('team-manager')}\r\n                                        >\r\n                                            <ListItemIcon><DeveloperBoardIcon /></ListItemIcon>\r\n                                            <ListItemText primary={<Typography noWrap>Team Manager</Typography>} />\r\n                                        </ListItem>\r\n                                    </Link>\r\n                                    <Link className={classes.linkButtons} to=\"/main/team-tasks\">\r\n                                        <ListItem button\r\n                                            selected={isNavItemmSelected('team-tasks')}\r\n                                            onClick={() => setCurrentLocation('team-tasks')}\r\n                                        >\r\n                                            <ListItemIcon><EventNoteIcon /></ListItemIcon>\r\n                                            <ListItemText primary={<Typography noWrap>Team Tasks</Typography>} />\r\n                                        </ListItem>\r\n                                    </Link>\r\n                                    <Divider />\r\n                                </React.Fragment>}\r\n                            {userAccess.admin === false ? null :\r\n                                <React.Fragment>\r\n                                    <Link className={classes.linkButtons} to=\"/main/users-list\">\r\n                                        <ListItem button\r\n                                            selected={isNavItemmSelected('users-list')}\r\n                                            onClick={() => setCurrentLocation('users-list')}\r\n                                        >\r\n                                            <ListItemIcon><RecentActorsIcon /></ListItemIcon>\r\n                                            <ListItemText primary={<Typography noWrap>Users</Typography>} />\r\n                                        </ListItem>\r\n                                    </Link>\r\n                                    <Divider />\r\n                                </React.Fragment>}\r\n                        </List>\r\n                    </div>\r\n                </Drawer>\r\n                <main className={navIsOpen ? classes.contentShift : classes.content}>\r\n                    <Switch>\r\n                        <Route path=\"/main/dashboard\">\r\n                            <HR_Dashboard />\r\n                        </Route>\r\n                        <Route path=\"/main/hr-manager\">\r\n                            <HR_Manager />\r\n                        </Route>\r\n                        <Route path=\"/main/tasks-columns\">\r\n                            <TasksColumns />\r\n                        </Route>\r\n                        <Route path=\"/main/tasks-list\">\r\n                            <TasksList userId={getCurrentUser().userDetails.employeeDTO.id} />\r\n                        </Route>\r\n                        <Route path=\"/main/employee-form\">\r\n                            <EmployeeForm />\r\n                        </Route>\r\n                        <Route path=\"/main/employees\" >\r\n                            <EmployeeList />\r\n                        </Route>\r\n                        <Route path=\"/main/employee-details/:id\" >\r\n                            <EmployeeDetails />\r\n                        </Route>\r\n                        <Route path=\"/main/team-list\">\r\n                            <TeamList />\r\n                        </Route>\r\n                        <Route path=\"/main/team-manager\">\r\n                            <Team_Dashboard />\r\n                        </Route>\r\n                        <Route path=\"/main/create-team\">\r\n                            <CreateTeam />\r\n                        </Route>\r\n                        <Route path=\"/main/add-team-members\">\r\n                            <AddTeamMembers />\r\n                        </Route>\r\n                        <Route path=\"/main/team-tasks\">\r\n                            <TeamTasks />\r\n                        </Route>\r\n                        <Route path=\"/main/create-task\">\r\n                            <CreateTask />\r\n                        </Route>\r\n                        <Route path=\"/main/profile\">\r\n                            <Profile />\r\n                        </Route>\r\n                        <Route path=\"/main/users-list\">\r\n                            <UsersList />\r\n                        </Route>\r\n                        <Route path=\"/main/user-form\">\r\n                            <UserForm />\r\n                        </Route>\r\n                    </Switch>\r\n                </main>\r\n            </div >\r\n        </Router >\r\n    );\r\n}\r\nexport default MainComponent;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\Globals.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\StartPage.js",["130"],"import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    redirectButton: {\r\n        margin: '8px',\r\n        width: \"10rem\",\r\n    },\r\n    mainCard: {\r\n        margin: '0 auto',\r\n        marginTop: '32px',\r\n        display: 'block',\r\n        maxWidth: 750,\r\n    },\r\n    cardMedia: {\r\n        height: 350,\r\n    },\r\n}));\r\n\r\nconst StartPage = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.mainCard}>\r\n                <CardActionArea>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            Human Resources Manager\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                            A prototype application. To store employees data, and assign tasks to them.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    <Link style={{ textDecoration: \"none\" }} to=\"/login\">\r\n                        <Button\r\n                            className={classes.redirectButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >To Login Page</Button>\r\n                    </Link>\r\n                </CardActions>\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default StartPage;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksColumns.js",["131","132","133","134","135","136","137"],"import React, { useEffect, useState } from \"react\";\r\nimport { DragDropContext, Draggable, Droppable } from \"react-beautiful-dnd\";\r\nimport { getTasks, changeTaskStatus, getUserTasksStats } from '../../Services/TasksService';\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport { Link } from \"react-router-dom\";\r\nimport moment from \"moment\";\r\n\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from '@material-ui/core/Button';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    taskTabContainer: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignItems: 'flex-start'\r\n    },\r\n    topBar: {\r\n        display: 'flex',\r\n        flexDirection: 'row'\r\n    },\r\n    filterBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.8rem\",\r\n        paddingRight: \"1.8rem\",\r\n        borderRadius: '4px',\r\n        marginLeft: '8px',\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n    },\r\n    delayedDisplay: {\r\n        width: \"max-content\",\r\n        padding: \"0 8px 0\",\r\n        marginLeft: '8px',\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        background: theme.palette.grey[800],\r\n        \"& a\": {\r\n            color: \"white\",\r\n            textDecoration: \"none\",\r\n        }\r\n\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n    columsContainer: {\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n        height: \"100%\",\r\n        width: \"100%\",\r\n    },\r\n    column: {\r\n        margin: \"8px\",\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        width: \"100%\",\r\n        height: '70vh'\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '8px',\r\n        marginBottom: '2px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        width: '100%',\r\n    },\r\n    accordionSummary: {\r\n        '& .MuiAccordionSummary-content': {\r\n            margin: 0,\r\n        }\r\n    },\r\n    chipContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignContent: 'space-around',\r\n        alignItems: 'stretch',\r\n        flexwrap: 'nowrap',\r\n        justifyContent: 'space-evenly',\r\n        marginBottom: '6px'\r\n    },\r\n    timeChip: {\r\n        margin: \"2px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"11px\",\r\n        fontWeight: \"550\"\r\n    },\r\n}));\r\n\r\nconst filter = {\r\n    name: \"\",\r\n    status: \"Delayed\",\r\n    isBStartTime: false,\r\n    bStartTime: undefined,\r\n    isAStartTime: false,\r\n    aStartTime: undefined,\r\n    isBDeadline: false,\r\n    bDeadline: undefined,\r\n    isADeadline: false,\r\n    aDeadline: undefined\r\n};\r\n\r\nconst TasksColumns = () => {\r\n    const classes = useStyles();\r\n    const userID = getCurrentUser().userDetails.employeeDTO.id;\r\n    const [expandedTask, setExpandedTask] = useState('');\r\n    const [expandedSubTask, setExpandedSubTask] = useState('');\r\n    const [userTaskStats, setUserTaskStats] = useState({});\r\n    const [taskFilter, setTaskFilter] = useState({\r\n        filterMode: \"Today\",\r\n        beforeStartTime: moment().format(\"YYYY-MM-DD\"),\r\n        afterStartTime: moment().format(\"YYYY-MM-DD\"),\r\n    });\r\n    const [columns, setColumns] = useState({\r\n\r\n        ['requested']: {\r\n            columnId: \"requested\",\r\n            name: \"Requested\",\r\n            statusName: \"Requested\",\r\n            items: []\r\n        },\r\n        ['inprogress']: {\r\n            columnId: \"inprogress\",\r\n            name: \"In Progress\",\r\n            statusName: \"In-Progress\",\r\n            items: []\r\n        },\r\n        ['completed']: {\r\n            columnId: \"completed\",\r\n            name: \"Completed\",\r\n            statusName: \"Completed\",\r\n            items: []\r\n        }\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getUserTasksStats(userID).then((data) => {\r\n            setUserTaskStats(data)\r\n        });\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        let completed = [];\r\n        let requested = [];\r\n        let progress = [];\r\n        getTasks(1, 50, userID,\r\n            '', undefined,\r\n            taskFilter.beforeStartTime,\r\n            taskFilter.afterStartTime)\r\n            .then((data) => {\r\n                data.items.forEach(item => {\r\n                    switch (item.status) {\r\n                        case \"Requested\":\r\n                            requested.push(item)\r\n                            break;\r\n                        case \"Completed\":\r\n                            completed.push(item)\r\n                            break;\r\n                        case \"In-Progress\":\r\n                            progress.push(item)\r\n                            break;\r\n                    }\r\n                });\r\n                adddItemsToColumn(completed, requested, progress);\r\n            });;\r\n    }, [taskFilter]);\r\n\r\n    const adddItemsToColumn = (com, req, prog) => {\r\n        const completedCol = columns.completed;\r\n        const requestedCol = columns.requested;\r\n        const progressCol = columns.inprogress;\r\n        setColumns({\r\n            ...columns, [completedCol.columnId]: {\r\n                ...completedCol,\r\n                items: com\r\n            }, [requestedCol.columnId]: {\r\n                ...requestedCol,\r\n                items: req\r\n            }, [progressCol.columnId]: {\r\n                ...progressCol,\r\n                items: prog\r\n            },\r\n        })\r\n    }\r\n\r\n    const onDragEnd = (result, columns, setColumns) => {\r\n        if (!result.destination) return;\r\n        const { source, destination } = result;\r\n        if (source.droppableId !== destination.droppableId) {\r\n            const newStatus = columns[destination.droppableId].statusName;\r\n            const sourceColumn = columns[source.droppableId];\r\n            const destColumn = columns[destination.droppableId];\r\n            const sourceItems = [...sourceColumn.items];\r\n            const destItems = [...destColumn.items];\r\n\r\n            const [changed] = sourceItems.splice(source.index, 1);\r\n            changed.status = newStatus;\r\n            destItems.splice(destItems.length, 0, changed);\r\n            //destItems.splice(destination.index, 0, removed);\r\n\r\n            changeTaskStatus(changed.id, changed.status).then(() => { });\r\n\r\n            setColumns({\r\n                ...columns,\r\n                [source.droppableId]: {\r\n                    ...sourceColumn,\r\n                    items: sourceItems\r\n                },\r\n                [destination.droppableId]: {\r\n                    ...destColumn,\r\n                    items: destItems\r\n                }\r\n            });\r\n        }\r\n    };\r\n\r\n    const handleTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedTask(newExpanded ? taskId : false);\r\n    }\r\n    const handleSubTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedSubTask(newExpanded ? taskId : false);\r\n    }\r\n    const handleFilterChange = (mode) => {\r\n        const today = moment();\r\n        switch (mode) {\r\n            case 'today':\r\n                setTaskFilter({\r\n                    filterMode: 'Today',\r\n                    beforeStartTime: today.format(\"YYYY-MM-DD\"),\r\n                    afterStartTime: today.format(\"YYYY-MM-DD\"),\r\n                });\r\n                break;\r\n            case 'week':\r\n                setTaskFilter({\r\n                    filterMode: 'This Week',\r\n                    beforeStartTime: today.endOf('isoWeek').format(\"YYYY-MM-DD\"),\r\n                    afterStartTime: today.startOf('isoWeek').format(\"YYYY-MM-DD\")\r\n\r\n                });\r\n                break;\r\n            case 'month':\r\n                setTaskFilter({\r\n                    filterMode: 'This Month',\r\n                    beforeStartTime: today.endOf('month').format(\"YYYY-MM-DD\"),\r\n                    afterStartTime: today.startOf('month').format(\"YYYY-MM-DD\")\r\n                });\r\n                break;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={classes.taskTabContainer}>\r\n            <div className={classes.topBar}>\r\n                <Toolbar className={classes.filterBox}>\r\n                    <h3 className={classes.whiteText}>Tasks From: </h3>\r\n\r\n                    <ButtonGroup variant=\"contained\">\r\n                        <Button\r\n                            color={taskFilter.filterMode === 'Today' ? 'primary' : 'default'}\r\n                            onClick={() => { handleFilterChange('today') }}\r\n                        >\r\n                            Today\r\n                        </Button>\r\n                        <Button\r\n                            color={taskFilter.filterMode === 'This Week' ? 'primary' : 'default'}\r\n                            onClick={() => { handleFilterChange('week') }}\r\n                        >\r\n                            This Week\r\n                        </Button>\r\n                        <Button\r\n                            color={taskFilter.filterMode === 'This Month' ? 'primary' : 'default'}\r\n                            onClick={() => { handleFilterChange('month') }}\r\n                        >\r\n                            This Month\r\n                        </Button>\r\n                    </ButtonGroup>\r\n                </Toolbar>\r\n                {userTaskStats.totalDelayedTasks === undefined ? null :\r\n                    <Card className={classes.delayedDisplay}>\r\n                        <Link to={\r\n                            {\r\n                                pathname: \"/main/tasks-list\",\r\n                                filter: { filter }\r\n                            }}>\r\n                            <Typography noWrap variant=\"h6\">\r\n                                {'Delayed Tasks: ' + userTaskStats.totalDelayedTasks}\r\n                            </Typography>\r\n                        </Link>\r\n                    </Card>\r\n                }\r\n\r\n            </div>\r\n            <div className={classes.columsContainer}>\r\n                <DragDropContext\r\n                    onDragEnd={(result) => onDragEnd(result, columns, setColumns)}\r\n                >\r\n                    {Object.entries(columns).map(([columnId, column], index) => {\r\n                        return (\r\n                            <Card className={classes.column}\r\n\r\n                                key={columnId}\r\n                            >\r\n                                <div className={classes.title}>\r\n                                    <Typography noWrap variant=\"h5\">{column.name}</Typography>\r\n                                </div>\r\n                                <Droppable droppableId={columnId} key={columnId}>\r\n                                    {(provided, snapshot) => {\r\n                                        return (\r\n                                            <CardContent {...provided.droppableProps}\r\n                                                ref={provided.innerRef}\r\n                                                style={{\r\n                                                    background: snapshot.isDraggingOver\r\n                                                        ? \"rgb(128 128 128)\"\r\n                                                        : \"#424242\",\r\n                                                    padding: \"10px\",\r\n                                                    paddingBottom: \"0\",\r\n                                                    minWidth: \"300px\",\r\n                                                    height: \"100%\",\r\n                                                    overflowY: 'auto',\r\n                                                    WebkitScrollbarButton: {\r\n                                                        height: '100%'\r\n                                                    }\r\n                                                }}\r\n                                            >\r\n                                                {column.items.map((item, index) => {\r\n                                                    return (\r\n                                                        <Draggable\r\n                                                            key={item.id}\r\n                                                            draggableId={String(item.id)}\r\n                                                            index={index}\r\n                                                        >\r\n                                                            {(provided) => {\r\n                                                                return (\r\n                                                                    <Accordion\r\n                                                                        expanded={expandedTask === item.id}\r\n                                                                        onChange={handleTaskExpand(item.id)}\r\n                                                                        ref={provided.innerRef}\r\n                                                                        {...provided.draggableProps}\r\n                                                                        {...provided.dragHandleProps}\r\n                                                                        style={{\r\n                                                                            userSelect: \"none\",\r\n                                                                            backgroundColor:\r\n                                                                                item.status === \"In-Progress\"\r\n                                                                                    ? \"rgb(56 81 216)\"\r\n                                                                                    : item.status === \"Requested\"\r\n                                                                                        ? \"rgb(231 170 35)\"\r\n                                                                                        : \"rgb(0 158 7)\",\r\n                                                                            color: item.status === \"In-Progress\" ? \"white\" : \"black\",\r\n                                                                            textAlign: 'justify',\r\n                                                                            borderRadius: '4px',\r\n                                                                            marginBottom: '4px',\r\n                                                                            ...provided.draggableProps.style\r\n                                                                        }}\r\n                                                                    >\r\n\r\n                                                                        <AccordionSummary\r\n                                                                            className={classes.accordionSummary}\r\n                                                                            expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                                                            style={{ paddingLeft: '8px', minHeight: '25px' }}\r\n                                                                        >\r\n                                                                            <Typography variant=\"subtitle1\">{item.name}</Typography>\r\n                                                                        </AccordionSummary>\r\n                                                                        <AccordionDetails style={{\r\n                                                                            display: \"flex\",\r\n\r\n                                                                            alignContent: \"flex-start\",\r\n                                                                            flexDirection: 'column',\r\n                                                                            padding: '0px',\r\n                                                                        }}>\r\n                                                                            <div className={classes.chipContainer}>\r\n                                                                                <Chip\r\n                                                                                    className={classes.timeChip}\r\n                                                                                    label={\"Start: \" + item.startTime.toString().split('T')[0]}\r\n                                                                                    color=\"primary\"\r\n                                                                                />\r\n                                                                                <Chip\r\n                                                                                    className={classes.timeChip}\r\n                                                                                    label={\"Deadline: \" + item.deadline.toString().split('T')[0]}\r\n                                                                                    color=\"primary\"\r\n                                                                                />\r\n                                                                            </div>\r\n                                                                            <Typography\r\n                                                                                variant=\"body1\"\r\n                                                                                style={{ margin: '8px' }}\r\n                                                                            >\r\n                                                                                {item.description}\r\n                                                                            </Typography>\r\n                                                                            {item.subtasks.length === 0 ? null :\r\n                                                                                <div style={{\r\n                                                                                    paddingLeft: '8px',\r\n                                                                                    paddingRight: '8px'\r\n\r\n                                                                                }}>\r\n                                                                                    <Typography variant=\"h6\">\r\n                                                                                        Subtasks:\r\n                                                                                    </Typography>\r\n                                                                                    {item.subtasks.map((subtask) => {\r\n                                                                                        return (\r\n                                                                                            <Accordion\r\n                                                                                                expanded={expandedSubTask === subtask.id}\r\n                                                                                                onChange={handleSubTaskExpand(subtask.id)}\r\n                                                                                                key={subtask.id}\r\n                                                                                                style={{\r\n                                                                                                    backgroundColor: '#bdbdbd',\r\n                                                                                                    color: \"black\",\r\n                                                                                                    marginBottom: '8px',\r\n                                                                                                    borderRadius: '4px',\r\n                                                                                                    padding: '0px'\r\n\r\n                                                                                                }}>\r\n                                                                                                <AccordionSummary\r\n                                                                                                    expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                                                                                >\r\n                                                                                                    <Typography>\r\n                                                                                                        {subtask.name}\r\n                                                                                                    </Typography>\r\n                                                                                                </AccordionSummary>\r\n                                                                                                <AccordionDetails>\r\n                                                                                                    {subtask.description}\r\n                                                                                                </AccordionDetails>\r\n                                                                                            </Accordion>\r\n                                                                                        );\r\n                                                                                    })}\r\n                                                                                </div>\r\n                                                                            }\r\n                                                                        </AccordionDetails>\r\n                                                                    </Accordion>\r\n                                                                );\r\n                                                            }}\r\n                                                        </Draggable>\r\n                                                    );\r\n                                                })}\r\n                                                {provided.placeholder}\r\n                                            </CardContent>\r\n                                        );\r\n                                    }}\r\n                                </Droppable>\r\n                            </Card>\r\n                        );\r\n                    })}\r\n                </DragDropContext>\r\n            </div >\r\n        </div>\r\n    );\r\n}\r\nexport default TasksColumns;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeList.js",["138","139","140","141"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeDetails.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\LoginUser.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Dashboard.js",["142"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\JobApplication\\CreateJobApplication.js",["143"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals'\r\n\r\nconst CreateJobApplication = () => {\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [isSelected, setIsSelected] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const PostJobApplication = () => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"id\": 0, \"name\": \"Json\", \"surname\": \"j\",\r\n                \"phoneNumber\": 0, \"email\": \"temp@mail.net\",\r\n                \"EmployeeAddressId\": 0,\r\n                \"employeeAddress\":\r\n                    { \"id\": 0, \"city\": \"New York\", \"postCode\": \"11-111\", \"street\": \"str 11\" }\r\n            })\r\n        };\r\n        fetch(APIURL + 'JobApplications', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data));\r\n    }\r\n\r\n    const changeHandler = (event) => {\r\n        setSelectedFile(event.target.files[0]);\r\n        setIsSelected(true);\r\n    };\r\n\r\n    const handleSubmission = () => {\r\n        const formData = new FormData();\r\n\r\n        formData.append('Id', 0);\r\n        formData.append('Name', \"Json\");\r\n        formData.append('Surname', \"xy\");\r\n        formData.append('Email', \"e3@gr\");\r\n        formData.append('Content', \"bzdury\");\r\n        formData.append('PositionId', 1);\r\n        formData.append('ApplicationDate', \"2021-02-01\");\r\n        formData.append('CVPath', \"\");\r\n        formData.append('CVFile', selectedFile);\r\n\r\n        fetch(\r\n            'http://localhost:5000/api/JobApplications',\r\n            {\r\n                method: 'POST',\r\n                body: formData,\r\n            }\r\n        )\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                console.log('Success:', result);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" name=\"file\" onChange={changeHandler} />\r\n            {isSelected ? (\r\n                <div>\r\n                    <p>Filename: {selectedFile.name}</p>\r\n                    <p>Filetype: {selectedFile.type}</p>\r\n                    <p>Size in bytes: {selectedFile.size}</p>\r\n\r\n                </div>\r\n            ) : (\r\n                <p>Select a file to show details</p>\r\n            )}\r\n            <div>\r\n                <button onClick={handleSubmission}>Submit</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateJobApplication;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\TasksService.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksList.js",["144","145","146"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamTasks.js",["147"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\CreateTask.js",["148","149","150","151","152","153"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeForm.js",["154","155"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\Team_Dashboard.js",["156","157","158","159","160","161","162","163","164"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamList.js",["165","166","167","168","169","170"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\AddTeamMembers.js",["171","172","173","174","175","176","177","178","179"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\CreateTeam.js",["180"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Manager.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\UsersList.js",["181","182","183"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../../Services/Globals';\r\nimport { authHeader } from '../../Services/AuthService'\r\nimport { Link } from \"react-router-dom\";\r\nimport { DarkTextField, DarkSelect, ConfirmDialog } from '../GlobalComponents';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Skeleton from '@material-ui/lab/Skeleton';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1rem',\r\n        width: '100%',\r\n    },\r\n    tabTop: {\r\n        display: 'flex',\r\n        padding: '9px',\r\n        justifyContent: 'space-between',\r\n        \"& h2\": {\r\n            margin: 0,\r\n        },\r\n        \"& a\": {\r\n            textDecoration: \"none\",\r\n            color: \"white\",\r\n        }\r\n    },\r\n    container: {\r\n        maxHeight: 550,\r\n    },\r\n    pagination: {\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800],\r\n    },\r\n    searchBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.8rem\",\r\n        paddingRight: \"1.8rem\",\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n}));\r\n\r\n\r\nconst UsersList = () => {\r\n    const classes = useStyles();\r\n    const [users, setUsers] = useState([]);\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 9,\r\n        totalItems: 1,\r\n        totalPages: 1\r\n    });\r\n    const firstRecord = { id: 0, name: \"All\" };\r\n    const [orderOptions] = useState([\r\n        { id: \"name\", name: \"Name\" },\r\n        { id: \"surname\", name: \"Surame\" },\r\n        { id: \"department\", name: \"Department\" },\r\n        { id: \"position\", name: \"Position\" },\r\n        { id: \"date-asc\", name: \"Date-asc\" },\r\n        { id: \"date-desc\", name: \"Date-desc\" }\r\n    ]);\r\n    const [remoteOptions] = useState([\r\n        { id: '', name: \"All\" },\r\n        { id: true, name: \"Remote\" },\r\n        { id: false, name: \"Office\" },\r\n    ]);\r\n    const [seniorityLvs] = useState([\r\n        firstRecord,\r\n        { id: 1, name: \"Junior\" },\r\n        { id: 2, name: \"Regular\" },\r\n        { id: 3, name: \"Senior\" },\r\n    ]);\r\n    const [searchParams, setSearchParams] = useState({\r\n        searchString: '',\r\n        department: firstRecord,\r\n        position: firstRecord,\r\n        seniority: firstRecord,\r\n        orderBy: orderOptions[4],\r\n        isRemote: remoteOptions[0]\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(searchParams);\r\n        getUsers(\r\n            pagination.page,\r\n            pagination.size\r\n        );\r\n    }, [pagination.page, pagination.size]);\r\n\r\n    useEffect(() => {\r\n        getSearchProps()\r\n    }, []);\r\n\r\n    const getSearchProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setDepartments(data) });\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setPositions(data) });\r\n    }\r\n\r\n    const getUsers = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: new Headers({ 'Content-Type': 'application/json', 'Authorization': authHeader() }),\r\n        };\r\n\r\n        await fetch(APIURL +\r\n            `users?page=${page + 1}&size=${size}&order=${searchParams.orderBy.id}` +\r\n            `&search=${searchParams.searchString}` +\r\n            `&department=${searchParams.department.id}` +\r\n            `&position=${searchParams.position.id}` +\r\n            `&seniority=${searchParams.seniority.id === 0 ? '' : searchParams.seniority.name}` +\r\n            `&isremote=${searchParams.isRemote.id}`,\r\n            requestOptions)\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                setPagination({\r\n                    ...pagination,\r\n                    totalItems: data.totalItems,\r\n                    totalPages: data.totalPages,\r\n                })\r\n                setUsers(data.items);\r\n            });\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        console.log(newPage);\r\n        setPagination({ ...pagination, page: newPage });\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setPagination({\r\n            ...pagination,\r\n            size: event.target.value\r\n        });\r\n    };\r\n\r\n    const handleChangeSearchParams = event => {\r\n        setSearchParams({\r\n            searchParams,\r\n            searchString: event.target.name === \"searchInput\" ? event.target.value : searchParams.searchString,\r\n            department: event.target.name === \"departmentSelect\" ? event.target.value : searchParams.department,\r\n            position: event.target.name === \"positionSelect\" ? event.target.value : searchParams.position,\r\n            seniority: event.target.name === \"senioritySelect\" ? event.target.value : searchParams.seniority,\r\n            orderBy: event.target.name === \"orderBy\" ? event.target.value : searchParams.orderBy,\r\n            isRemote: event.target.name === \"isRemote\" ? event.target.value : searchParams.isRemote,\r\n        });\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        getUsers(0, pagination.size)\r\n    };\r\n\r\n    const tabSkeleton = () => {\r\n        return (\r\n            <Paper className={classes.root}>\r\n                <Skeleton style={{ marginLeft: '8px', marginTop: '16px' }} animation=\"wave\" width=\"21%\" height=\"50px\" />\r\n                <Skeleton style={{ margin: '8px 8px 20px' }} animation=\"wave\" width=\"98%\" height=\"36px\" />\r\n                <div style={{ padding: '4px', backgroundColor: '#bdbdbd' }}>\r\n                    <Skeleton style={{ marginLeft: '8px' }} width=\"98%\" height=\"75px\" />\r\n                    <Skeleton style={{ marginLeft: '8px' }} width=\"98%\" height=\"75px\" />\r\n                    <Skeleton style={{ marginLeft: '8px' }} width=\"98%\" height=\"75px\" />\r\n                    <Skeleton style={{ marginLeft: '8px' }} width=\"98%\" height=\"75px\" />\r\n                    <Skeleton style={{ marginLeft: '8px' }} width=\"98%\" height=\"75px\" />\r\n                    <Skeleton style={{ marginLeft: '8px' }} width=\"98%\" height=\"75px\" />\r\n                    <Skeleton style={{ marginLeft: '8px' }} width=\"98%\" height=\"75px\" />\r\n                </div>\r\n            </Paper>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Toolbar className={classes.searchBox}>\r\n                <h3 className={classes.whiteText}>Employees</h3>\r\n                <DarkTextField\r\n                    onChange={handleChangeSearchParams}\r\n                    label='Search...'\r\n                    name='searchInput'\r\n                />\r\n                <DarkSelect\r\n                    label=\"Department\"\r\n                    name=\"departmentSelect\"\r\n                    collection={departments}\r\n                    value={searchParams.department}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Position\"\r\n                    name=\"positionSelect\"\r\n                    collection={positions}\r\n                    value={searchParams.position}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Seniority\"\r\n                    name=\"senioritySelect\"\r\n                    collection={seniorityLvs}\r\n                    value={searchParams.seniority}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Order by\"\r\n                    name=\"orderBy\"\r\n                    collection={orderOptions}\r\n                    value={searchParams.orderBy}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Work Type\"\r\n                    name=\"isRemote\"\r\n                    collection={remoteOptions}\r\n                    value={searchParams.isRemote}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>Search</Button>\r\n            </Toolbar>\r\n\r\n            {users.length === 0 ? tabSkeleton() :\r\n                <Paper className={classes.root}>\r\n                    <div className={classes.tabTop}>\r\n                        <h2 >Users List:</h2>\r\n                        <Link to=\"/main/user-form\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n\r\n                                endIcon={<AddCircleIcon />}\r\n                                onClick={handleSearch}\r\n                            >\r\n                                New User\r\n                            </Button>\r\n                        </Link>\r\n                    </div>\r\n                    <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Username\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Seniority\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Action\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {users.map((user, index) => (\r\n                                    <TableRow hover key={index}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.username}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.seniority}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.department.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${user.employeeDTO.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                            <Link to={{ pathname: `/main/user-form`, user: { user } }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"edit\">\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                            <IconButton\r\n                                                className={classes.button}\r\n                                                size=\"small\"\r\n                                                onClick={() => console.log('todo')}\r\n                                            >\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        className={classes.pagination}\r\n                        rowsPerPageOptions={pagination.totalPages < 10 ?\r\n                            [pagination.totalPages] :\r\n                            [10, 25, 35]}\r\n                        component=\"div\"\r\n                        count={pagination.totalItems}\r\n                        rowsPerPage={pagination.size}\r\n                        page={pagination.page}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default UsersList;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\UserForm.js",["184"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\Profile.js",["185"],{"ruleId":"186","replacedBy":"187"},{"ruleId":"188","replacedBy":"189"},{"ruleId":"190","severity":1,"message":"191","line":2,"column":17,"nodeType":"192","messageId":"193","endLine":2,"endColumn":26},{"ruleId":"190","severity":1,"message":"194","line":2,"column":28,"nodeType":"192","messageId":"193","endLine":2,"endColumn":36},{"ruleId":"190","severity":1,"message":"195","line":3,"column":50,"nodeType":"192","messageId":"193","endLine":3,"endColumn":54},{"ruleId":"196","severity":1,"message":"197","line":289,"column":1,"nodeType":"198","endLine":295,"endColumn":3},{"ruleId":"190","severity":1,"message":"191","line":1,"column":17,"nodeType":"192","messageId":"193","endLine":1,"endColumn":26},{"ruleId":"190","severity":1,"message":"199","line":8,"column":8,"nodeType":"192","messageId":"193","endLine":8,"endColumn":28},{"ruleId":"200","severity":1,"message":"201","line":95,"column":9,"nodeType":"202","messageId":"203","endLine":95,"endColumn":16},{"ruleId":"204","severity":1,"message":"205","line":306,"column":29,"nodeType":"206","endLine":306,"endColumn":45},{"ruleId":"204","severity":1,"message":"207","line":309,"column":29,"nodeType":"206","endLine":309,"endColumn":43},{"ruleId":"204","severity":1,"message":"208","line":330,"column":29,"nodeType":"206","endLine":330,"endColumn":47},{"ruleId":"190","severity":1,"message":"209","line":9,"column":8,"nodeType":"192","messageId":"193","endLine":9,"endColumn":17},{"ruleId":"210","severity":1,"message":"211","line":128,"column":9,"nodeType":"212","messageId":"213","endLine":133,"endColumn":10,"fix":"214"},{"ruleId":"210","severity":1,"message":"215","line":134,"column":9,"nodeType":"212","messageId":"213","endLine":139,"endColumn":10,"fix":"216"},{"ruleId":"210","severity":1,"message":"217","line":140,"column":9,"nodeType":"212","messageId":"213","endLine":145,"endColumn":10,"fix":"218"},{"ruleId":"219","severity":1,"message":"220","line":153,"column":8,"nodeType":"221","endLine":153,"endColumn":10,"suggestions":"222"},{"ruleId":"223","severity":1,"message":"224","line":165,"column":21,"nodeType":"225","messageId":"226","endLine":175,"endColumn":22},{"ruleId":"219","severity":1,"message":"227","line":179,"column":8,"nodeType":"221","endLine":179,"endColumn":20,"suggestions":"228"},{"ruleId":"223","severity":1,"message":"224","line":238,"column":9,"nodeType":"225","messageId":"226","endLine":261,"endColumn":10},{"ruleId":"190","severity":1,"message":"229","line":27,"column":10,"nodeType":"192","messageId":"193","endLine":27,"endColumn":16},{"ruleId":"219","severity":1,"message":"230","line":129,"column":8,"nodeType":"221","endLine":129,"endColumn":27,"suggestions":"231"},{"ruleId":"219","severity":1,"message":"232","line":133,"column":8,"nodeType":"221","endLine":133,"endColumn":10,"suggestions":"233"},{"ruleId":"234","severity":1,"message":"235","line":150,"column":52,"nodeType":"236","messageId":"237","endLine":150,"endColumn":53},{"ruleId":"190","severity":1,"message":"238","line":19,"column":8,"nodeType":"192","messageId":"193","endLine":19,"endColumn":14},{"ruleId":"190","severity":1,"message":"239","line":12,"column":11,"nodeType":"192","messageId":"193","endLine":12,"endColumn":29},{"ruleId":"219","severity":1,"message":"240","line":233,"column":8,"nodeType":"221","endLine":233,"endColumn":10,"suggestions":"241"},{"ruleId":"219","severity":1,"message":"242","line":239,"column":8,"nodeType":"221","endLine":239,"endColumn":30,"suggestions":"243"},{"ruleId":"223","severity":1,"message":"224","line":308,"column":13,"nodeType":"225","messageId":"226","endLine":345,"endColumn":14},{"ruleId":"219","severity":1,"message":"244","line":12,"column":8,"nodeType":"221","endLine":12,"endColumn":10,"suggestions":"245"},{"ruleId":"190","severity":1,"message":"246","line":3,"column":25,"nodeType":"192","messageId":"193","endLine":3,"endColumn":35},{"ruleId":"219","severity":1,"message":"247","line":142,"column":8,"nodeType":"221","endLine":142,"endColumn":10,"suggestions":"248"},{"ruleId":"219","severity":1,"message":"249","line":149,"column":8,"nodeType":"221","endLine":149,"endColumn":18,"suggestions":"250"},{"ruleId":"219","severity":1,"message":"249","line":163,"column":8,"nodeType":"221","endLine":163,"endColumn":27,"suggestions":"251"},{"ruleId":"252","severity":1,"message":"253","line":173,"column":41,"nodeType":"254","messageId":"255","endLine":173,"endColumn":43},{"ruleId":"252","severity":1,"message":"253","line":200,"column":40,"nodeType":"254","messageId":"255","endLine":200,"endColumn":42},{"ruleId":"210","severity":1,"message":"256","line":112,"column":13,"nodeType":"212","messageId":"213","endLine":112,"endColumn":49,"fix":"257"},{"ruleId":"219","severity":1,"message":"258","line":114,"column":8,"nodeType":"221","endLine":114,"endColumn":29,"suggestions":"259"},{"ruleId":"190","severity":1,"message":"260","line":12,"column":8,"nodeType":"192","messageId":"193","endLine":12,"endColumn":13},{"ruleId":"190","severity":1,"message":"261","line":18,"column":8,"nodeType":"192","messageId":"193","endLine":18,"endColumn":23},{"ruleId":"190","severity":1,"message":"238","line":20,"column":8,"nodeType":"192","messageId":"193","endLine":20,"endColumn":14},{"ruleId":"219","severity":1,"message":"262","line":125,"column":8,"nodeType":"221","endLine":125,"endColumn":10,"suggestions":"263"},{"ruleId":"219","severity":1,"message":"264","line":137,"column":8,"nodeType":"221","endLine":137,"endColumn":22,"suggestions":"265"},{"ruleId":"234","severity":1,"message":"235","line":147,"column":30,"nodeType":"236","messageId":"237","endLine":147,"endColumn":31},{"ruleId":"252","severity":1,"message":"253","line":149,"column":43,"nodeType":"254","messageId":"255","endLine":149,"endColumn":45},{"ruleId":"252","severity":1,"message":"253","line":185,"column":31,"nodeType":"254","messageId":"255","endLine":185,"endColumn":33},{"ruleId":"266","severity":1,"message":"267","line":345,"column":54,"nodeType":"268","messageId":"269","endLine":345,"endColumn":55},{"ruleId":"190","severity":1,"message":"270","line":129,"column":12,"nodeType":"192","messageId":"193","endLine":129,"endColumn":24},{"ruleId":"219","severity":1,"message":"271","line":153,"column":8,"nodeType":"221","endLine":153,"endColumn":10,"suggestions":"272"},{"ruleId":"190","severity":1,"message":"273","line":208,"column":11,"nodeType":"192","messageId":"193","endLine":208,"endColumn":28},{"ruleId":"223","severity":1,"message":"224","line":300,"column":9,"nodeType":"225","messageId":"226","endLine":307,"endColumn":10},{"ruleId":"274","severity":1,"message":"275","line":336,"column":21,"nodeType":"206","endLine":336,"endColumn":55},{"ruleId":"276","severity":1,"message":"277","line":336,"column":21,"nodeType":"206","endLine":336,"endColumn":55},{"ruleId":"190","severity":1,"message":"278","line":2,"column":37,"nodeType":"192","messageId":"193","endLine":2,"endColumn":50},{"ruleId":"219","severity":1,"message":"230","line":155,"column":8,"nodeType":"221","endLine":155,"endColumn":27,"suggestions":"279"},{"ruleId":"219","severity":1,"message":"232","line":159,"column":8,"nodeType":"221","endLine":159,"endColumn":10,"suggestions":"280"},{"ruleId":"234","severity":1,"message":"235","line":179,"column":49,"nodeType":"236","messageId":"237","endLine":179,"endColumn":50},{"ruleId":"281","severity":1,"message":"282","line":185,"column":22,"nodeType":"268","messageId":"203","endLine":185,"endColumn":24},{"ruleId":"281","severity":1,"message":"282","line":185,"column":47,"nodeType":"268","messageId":"203","endLine":185,"endColumn":49},{"ruleId":"281","severity":1,"message":"282","line":188,"column":25,"nodeType":"268","messageId":"203","endLine":188,"endColumn":27},{"ruleId":"281","severity":1,"message":"282","line":278,"column":64,"nodeType":"268","messageId":"203","endLine":278,"endColumn":66},{"ruleId":"281","severity":1,"message":"282","line":303,"column":65,"nodeType":"268","messageId":"203","endLine":303,"endColumn":67},{"ruleId":"223","severity":1,"message":"224","line":121,"column":9,"nodeType":"225","messageId":"226","endLine":137,"endColumn":10},{"ruleId":"190","severity":1,"message":"278","line":6,"column":37,"nodeType":"192","messageId":"193","endLine":6,"endColumn":50},{"ruleId":"219","severity":1,"message":"283","line":130,"column":8,"nodeType":"221","endLine":130,"endColumn":42,"suggestions":"284"},{"ruleId":"219","severity":1,"message":"232","line":134,"column":8,"nodeType":"221","endLine":134,"endColumn":10,"suggestions":"285"},{"ruleId":"190","severity":1,"message":"246","line":3,"column":25,"nodeType":"192","messageId":"193","endLine":3,"endColumn":35},{"ruleId":"190","severity":1,"message":"246","line":3,"column":25,"nodeType":"192","messageId":"193","endLine":3,"endColumn":35},"no-native-reassign",["286"],"no-negated-in-lhs",["287"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Link' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'CreateJobApplication' is defined but never used.","no-dupe-keys","Duplicate key 'padding'.","ObjectExpression","unexpected","react/jsx-pascal-case","Imported JSX component HR_Dashboard must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component HR_Manager must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Team_Dashboard must be in PascalCase or SCREAMING_SNAKE_CASE","'CardMedia' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['requested'] found.","Property","unnecessarilyComputedProperty",{"range":"288","text":"289"},"Unnecessarily computed property ['inprogress'] found.",{"range":"290","text":"291"},"Unnecessarily computed property ['completed'] found.",{"range":"292","text":"293"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userID'. Either include it or remove the dependency array.","ArrayExpression",["294"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","React Hook useEffect has missing dependencies: 'adddItemsToColumn' and 'userID'. Either include them or remove the dependency array.",["295"],"'logDOM' is defined but never used.","React Hook useEffect has a missing dependency: 'getEmploees'. Either include it or remove the dependency array.",["296"],"React Hook useEffect has a missing dependency: 'getSearchProps'. Either include it or remove the dependency array.",["297"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","'Button' is defined but never used.","'PostJobApplication' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadTasksList', 'pagination.page', and 'pagination.size'. Either include them or remove the dependency array.",["298"],"React Hook useEffect has a missing dependency: 'props.teamId'. Either include it or remove the dependency array.",["299"],"React Hook useEffect has a missing dependency: 'getTeam'. Either include it or remove the dependency array.",["300"],"'DarkSelect' is defined but never used.","React Hook useEffect has a missing dependency: 'getMembers'. Either include it or remove the dependency array.",["301"],"React Hook useEffect has a missing dependency: 'task'. Either include it or remove the dependency array. You can also do a functional update 'setTask(t => ...)' if you only need 'task' in the 'setTask' call.",["302"],["303"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Unnecessarily computed property ['permissions'] found.",{"range":"304","text":"305"},"React Hook useEffect has a missing dependency: 'employee'. Either include it or remove the dependency array. You can also do a functional update 'setEmployee(e => ...)' if you only need 'employee' in the 'setEmployee' call.",["306"],"'Paper' is defined but never used.","'TablePagination' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["307"],"React Hook useEffect has a missing dependency: 'team.members'. Either include it or remove the dependency array.",["308"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'menuAnchorEl' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'loadTeams', 'pagination.page', and 'pagination.size'. Either include them or remove the dependency array.",["309"],"'handleOptinsClick' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'ConfirmDialog' is defined but never used.",["310"],["311"],"eqeqeq","Expected '===' and instead saw '=='.","React Hook useEffect has missing dependencies: 'getUsers' and 'searchParams'. Either include them or remove the dependency array.",["312"],["313"],"no-global-assign","no-unsafe-negation",[3921,3934],"'requested'",[4088,4102],"'inprogress'",[4261,4274],"'completed'",{"desc":"314","fix":"315"},{"desc":"316","fix":"317"},{"desc":"318","fix":"319"},{"desc":"320","fix":"321"},{"desc":"322","fix":"323"},{"desc":"324","fix":"325"},{"desc":"326","fix":"327"},{"desc":"328","fix":"329"},{"desc":"330","fix":"331"},{"desc":"332","fix":"333"},[3801,3816],"'permissions'",{"desc":"334","fix":"335"},{"desc":"336","fix":"337"},{"desc":"338","fix":"339"},{"desc":"340","fix":"341"},{"desc":"318","fix":"342"},{"desc":"320","fix":"343"},{"desc":"344","fix":"345"},{"desc":"320","fix":"346"},"Update the dependencies array to be: [userID]",{"range":"347","text":"348"},"Update the dependencies array to be: [adddItemsToColumn, taskFilter, userID]",{"range":"349","text":"350"},"Update the dependencies array to be: [getEmploees, page, rowsPerPage]",{"range":"351","text":"352"},"Update the dependencies array to be: [getSearchProps]",{"range":"353","text":"354"},"Update the dependencies array to be: [loadTasksList, pagination.page, pagination.size]",{"range":"355","text":"356"},"Update the dependencies array to be: [props.teamId, selectedIndex, tasks]",{"range":"357","text":"358"},"Update the dependencies array to be: [getTeam]",{"range":"359","text":"360"},"Update the dependencies array to be: [getMembers]",{"range":"361","text":"362"},"Update the dependencies array to be: [subtasks, task]",{"range":"363","text":"364"},"Update the dependencies array to be: [employeesToAssign, task]",{"range":"365","text":"366"},"Update the dependencies array to be: [employee, employeePermissions]",{"range":"367","text":"368"},"Update the dependencies array to be: [getData]",{"range":"369","text":"370"},"Update the dependencies array to be: [currentTasks, team.members]",{"range":"371","text":"372"},"Update the dependencies array to be: [loadTeams, pagination.page, pagination.size]",{"range":"373","text":"374"},{"range":"375","text":"352"},{"range":"376","text":"354"},"Update the dependencies array to be: [getUsers, pagination.page, pagination.size, searchParams]",{"range":"377","text":"378"},{"range":"379","text":"354"},[4563,4565],"[userID]",[5468,5480],"[adddItemsToColumn, taskFilter, userID]",[4440,4459],"[getEmploees, page, rowsPerPage]",[4521,4523],"[getSearchProps]",[7710,7712],"[loadTasksList, pagination.page, pagination.size]",[7915,7937],"[props.teamId, selectedIndex, tasks]",[409,411],"[getTeam]",[4386,4388],"[getMembers]",[4509,4519],"[subtasks, task]",[4852,4871],"[employeesToAssign, task]",[3858,3879],"[employee, employeePermissions]",[3926,3928],"[getData]",[4290,4304],"[currentTasks, team.members]",[5040,5042],"[loadTeams, pagination.page, pagination.size]",[5081,5100],[5162,5164],[4224,4258],"[getUsers, pagination.page, pagination.size, searchParams]",[4320,4322]]