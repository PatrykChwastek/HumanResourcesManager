[{"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\index.js":"1","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\App.js":"2","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\reportWebVitals.js":"3","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\EmployeeList.js":"4","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\CreateEmployee.js":"5","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\EmployeeDetails.js":"6","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\CreateJobApplication.js":"7","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\GlobalComponents.js":"8","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\LoginUser.js":"9","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\AuthService.js":"10","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\MainComponent.js":"11","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Dashboard.js":"12","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\Globals.js":"13","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\TeamManager.js":"14","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\StartPage.js":"15"},{"size":242,"mtime":1626196431129,"results":"16","hashOfConfig":"17"},{"size":1019,"mtime":1641546606228,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":499162500000,"results":"19","hashOfConfig":"17"},{"size":13503,"mtime":1641299634710,"results":"20","hashOfConfig":"17"},{"size":10166,"mtime":1641205936236,"results":"21","hashOfConfig":"17"},{"size":5263,"mtime":1641205994946,"results":"22","hashOfConfig":"17"},{"size":2647,"mtime":1641205919490,"results":"23","hashOfConfig":"17"},{"size":5630,"mtime":1641206151551,"results":"24","hashOfConfig":"17"},{"size":2637,"mtime":1641554359664,"results":"25","hashOfConfig":"17"},{"size":2325,"mtime":1641555333470,"results":"26","hashOfConfig":"17"},{"size":6302,"mtime":1641550076513,"results":"27","hashOfConfig":"17"},{"size":11178,"mtime":1641298946226,"results":"28","hashOfConfig":"17"},{"size":70,"mtime":1641207518125,"results":"29","hashOfConfig":"17"},{"size":247,"mtime":1641296074226,"results":"30","hashOfConfig":"17"},{"size":766,"mtime":1641546900095,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"yin7gd",{"filePath":"35","messages":"36","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"44","usedDeprecatedRules":"34"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"34"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"50","usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"34"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\index.js",[],["70","71"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\App.js",["72","73","74"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\reportWebVitals.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\EmployeeList.js",["75","76","77"],"import React, { useEffect, useState } from \"react\";\r\nimport { DarkTextField, DarkSelect } from './GlobalComponents';\r\nimport APIURL from '../Services/Globals'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\n\r\n\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1rem',\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 550,\r\n    },\r\n    pagination: {\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800],\r\n    },\r\n    searchBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.8rem\",\r\n        paddingRight: \"1.8rem\",\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n}));\r\n\r\nconst EmployList = () => {\r\n    const classes = useStyles();\r\n    const [employees, setEmployees] = useState([]);\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [totalItems, setTotalItems] = useState(1);\r\n    const firstRecord = { id: 0, name: \"All\" };\r\n    const [orderOptions] = useState([\r\n        { id: \"name\", name: \"Name\" },\r\n        { id: \"surname\", name: \"Surame\" },\r\n        { id: \"department\", name: \"Department\" },\r\n        { id: \"position\", name: \"Position\" },\r\n        { id: \"date-asc\", name: \"Date-asc\" },\r\n        { id: \"date-desc\", name: \"Date-desc\" }\r\n    ]);\r\n    const [remoteOptions] = useState([\r\n        { id: '', name: \"All\" },\r\n        { id: true, name: \"Remote\" },\r\n        { id: false, name: \"Office\" },\r\n    ]);\r\n    const [searchParams, setSearchParams] = useState({\r\n        searchString: '',\r\n        department: firstRecord,\r\n        position: firstRecord,\r\n        orderBy: orderOptions[4],\r\n        isRemote: remoteOptions[0]\r\n    });\r\n    useEffect(() => {\r\n        getEmploees(page + 1, rowsPerPage);\r\n    }, [page, rowsPerPage]);\r\n\r\n    useEffect(() => {\r\n        getSearchProps()\r\n    }, []);\r\n\r\n    const getEmploees = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL +\r\n            `employee/all?page=${page}&size=${size}&order=${searchParams.orderBy.id}&search=${searchParams.searchString}&department=${searchParams.department.id}&position=${searchParams.position.id}&isremote=${searchParams.isRemote.id}`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => (setEmployees(data.items), setTotalItems(data.totalItems)));\r\n    }\r\n\r\n    const getSearchProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setDepartments(data) });\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setPositions(data) });\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeSearchParams = event => {\r\n        setSearchParams({\r\n            searchParams,\r\n            searchString: event.target.name === \"searchInput\" ? event.target.value : searchParams.searchString,\r\n            department: event.target.name === \"departmentSelect\" ? event.target.value : searchParams.department,\r\n            position: event.target.name === \"positionSelect\" ? event.target.value : searchParams.position,\r\n            orderBy: event.target.name === \"orderBy\" ? event.target.value : searchParams.orderBy,\r\n            isRemote: event.target.name === \"isRemote\" ? event.target.value : searchParams.isRemote,\r\n        });\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        getEmploees(1, rowsPerPage);\r\n        console.log(searchParams);\r\n    };\r\n    return (\r\n        <div>\r\n            <Toolbar className={classes.searchBox}>\r\n                <h3 className={classes.whiteText}>Employees</h3>\r\n                <DarkTextField\r\n                    onChange={handleChangeSearchParams}\r\n                    label='Search...'\r\n                    name='searchInput'\r\n                />\r\n                <DarkSelect\r\n                    label=\"Department\"\r\n                    name=\"departmentSelect\"\r\n                    collection={departments}\r\n                    value={searchParams.department}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Position\"\r\n                    name=\"positionSelect\"\r\n                    collection={positions}\r\n                    value={searchParams.position}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Order by\"\r\n                    name=\"orderBy\"\r\n                    collection={orderOptions}\r\n                    value={searchParams.orderBy}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Work Type\"\r\n                    name=\"isRemote\"\r\n                    collection={remoteOptions}\r\n                    value={searchParams.isRemote}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>Search</Button>\r\n            </Toolbar>\r\n\r\n            {employees === undefined ? <div></div> :\r\n                <Paper className={classes.root}>\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        #\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Employment Date\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Action\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {employees.map((employee, index) => (\r\n                                    <TableRow hover key={index}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {index + 1}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.department.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.remoteWork === true ?\r\n                                                <CheckCircleIcon /> : <CloseIcon />}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.employmentDate.toString().split('T')[0]}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${employee.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                            <IconButton className={classes.button} size=\"small\" aria-label=\"edit\">\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                            <IconButton className={classes.button} size=\"small\" aria-label=\"del\">\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        className={classes.pagination}\r\n                        rowsPerPageOptions={[10, 25, 35]}\r\n                        component=\"div\"\r\n                        count={totalItems}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default EmployList;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\CreateEmployee.js",["78","79"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DarkTextField, DarkSelect, DarkChipList } from './GlobalComponents';\r\nimport APIURL from '../Services/Globals'\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { format } from 'date-fns'\r\n\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainConteiner: {\r\n        marginTop: \"1.8rem\",\r\n        background: theme.palette.grey[800],\r\n        paddingBottom: '20px'\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    formGrid: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr 1fr 1fr\",\r\n        justifyContent: \"space-between\",\r\n        alignContent: \"space-between\",\r\n        gridGap: \"1.2rem 1.2rem\",\r\n    },\r\n    datePicker: {\r\n        marginTop: '0',\r\n        marginLeft: \"20px\"\r\n    },\r\n    createButton: {\r\n        margin: '0 auto',\r\n        display: 'block',\r\n        width: \"19rem\",\r\n    }\r\n}));\r\n\r\nconst CreateEmploy = () => {\r\n    const classes = useStyles();\r\n    const [employee, setEmployee] = useState({\r\n        id: 0,\r\n        employmentDate: format(new Date(), \"yyy-MM-dd\"),\r\n        remoteWork: false,\r\n        person: {\r\n            id: 0,\r\n            name: \"\",\r\n            surname: \"\",\r\n            phoneNumber: \"\",\r\n            email: \"\",\r\n            employeeAddress: {\r\n                id: 0,\r\n                city: \"\",\r\n                postCode: \"\",\r\n                street: \"\"\r\n            }\r\n        },\r\n        position: {\r\n            id: 0,\r\n            name: \"\",\r\n        },\r\n        department: {\r\n            id: 0,\r\n            name: \"\",\r\n        },\r\n        permissions: []\r\n    });\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const remoteWork = [\r\n        { id: false, name: \"Office\" },\r\n        { id: true, name: \"Remote\" }\r\n    ];\r\n    const [allPermissions, setAllPermissions] = useState([]);\r\n    const [employeePermissions, setEmployeePermissions] = useState([]);\r\n    useEffect(() => {\r\n        getEmployeeProps()\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setEmployee({\r\n            ...employee,\r\n            ['permissions']: employeePermissions\r\n        })\r\n    }, [employeePermissions]);\r\n\r\n    const PostEmployee = (formData) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formData),\r\n        };\r\n        fetch(APIURL + 'employee/create', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data));\r\n    }\r\n\r\n    const getEmployeeProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setDepartments(data));\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setPositions(data));\r\n\r\n        await fetch(APIURL + `permissions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setAllPermissions(data));\r\n    }\r\n\r\n    const headleFormChange = e => {\r\n\r\n        if (e.target.name === \"permissionSelect\") {\r\n            if (employeePermissions.length === 0) {\r\n                setEmployeePermissions([e.target.value]);\r\n            } else {\r\n                let isPicked = false;\r\n                employeePermissions.forEach(element => {\r\n                    if (element.id === e.target.value.id) {\r\n                        isPicked = true;\r\n                    }\r\n                });\r\n                if (!isPicked) {\r\n                    setEmployeePermissions([...employeePermissions, e.target.value]);\r\n                }\r\n            }\r\n        }\r\n\r\n        setEmployee({\r\n            id: 0,\r\n            person: {\r\n                id: 0,\r\n                name: e.target.name === \"employeeName\" ? e.target.value : employee.person.name,\r\n                surname: e.target.name === \"employeeSurname\" ? e.target.value : employee.person.surname,\r\n                phoneNumber: e.target.name === \"employeePhone\" ? e.target.value : employee.person.phoneNumber,\r\n                email: e.target.name === \"employeeEmail\" ? e.target.value : employee.person.email,\r\n                employeeAddress: {\r\n                    id: 0,\r\n                    city: e.target.name === \"employeeCity\" ? e.target.value : employee.person.employeeAddress.city,\r\n                    postCode: e.target.name === \"employeePostCode\" ? e.target.value : employee.person.employeeAddress.postCode,\r\n                    street: e.target.name === \"employeeStreet\" ? e.target.value : employee.person.employeeAddress.street\r\n                }\r\n            },\r\n            position: e.target.name === \"positionSelect\" ? e.target.value : employee.position,\r\n            department: e.target.name === \"departmentSelect\" ? e.target.value : employee.department,\r\n            employmentDate: employee.employmentDate,\r\n            remoteWork: e.target.name === \"remoteWork\" ? e.target.value.id : employee.remoteWork,\r\n            permissions: employee.permissions\r\n        })\r\n    }\r\n\r\n    const headleDateChange = (e) => {\r\n        setEmployee({ ...employee, employmentDate: e })\r\n    }\r\n    const hendlePermissionDelete = chipToDelete => {\r\n        setEmployeePermissions(chips => chips.filter(chip => chip.name !== chipToDelete.name));\r\n    }\r\n\r\n    const hendlePostEmployee = () => {\r\n        console.log(employee);\r\n        PostEmployee(employee);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mainConteiner}>\r\n            <div boxShadow={2} className={classes.title}>\r\n                <h3 >Create new employee</h3>\r\n            </div>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <div className={classes.formGrid}>\r\n                    <DarkTextField\r\n                        label=\"Name\"\r\n                        name=\"employeeName\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Surname\"\r\n                        name=\"employeeSurname\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Phone Number\"\r\n                        name=\"employeePhone\"\r\n                        type=\"tel\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Email\"\r\n                        name=\"employeeEmail\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"City\"\r\n                        name=\"employeeCity\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Post Code\"\r\n                        name=\"employeePostCode\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Street\"\r\n                        name=\"employeeStreet\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Department\"\r\n                        name=\"departmentSelect\"\r\n                        collection={departments}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Position\"\r\n                        name=\"positionSelect\"\r\n                        collection={positions}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Work Type\"\r\n                        name=\"remoteWork\"\r\n                        collection={remoteWork}\r\n                        value={employee.remoteWork === false ? remoteWork[0] : remoteWork[1]}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                            className={classes.datePicker}\r\n                            disableToolbar\r\n                            name=\"datePicker\"\r\n                            variant=\"inline\"\r\n                            format=\"yyyy-MM-dd\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Employment Date\"\r\n                            value={employee.employmentDate}\r\n                            onChange={headleDateChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                </div>\r\n                <DarkChipList\r\n                    label=\"Permissions\"\r\n                    name=\"permissionSelect\"\r\n                    collection={allPermissions}\r\n                    clipListCollection={employeePermissions}\r\n                    onChange={headleFormChange}\r\n                    onDelete={hendlePermissionDelete}\r\n                />\r\n                <Button\r\n                    className={classes.createButton}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={hendlePostEmployee}\r\n                >Create</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateEmploy;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\EmployeeDetails.js",["80"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../Services/Globals'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainConteiner: {\r\n        marginTop: \"1.8rem\",\r\n        background: theme.palette.grey[800],\r\n        padding: '1.5rem',\r\n        color: theme.palette.text.primary,\r\n    },\r\n    title: {\r\n        margin: \"-1.5rem\",\r\n        textAlign: 'center',\r\n        padding: '1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    gridConteiner: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: `1fr 1fr 1fr`,\r\n        gridTemplateRows: \"1fr \",\r\n        justifyContent: \"space-evenly\",\r\n        alignContent: \"center\",\r\n        marginTop: \"0.5rem\",\r\n        '& p': {\r\n            margin: \"5px\",\r\n            display: 'inline',\r\n            fontSize: \"17px\"\r\n        },\r\n        '& h3': {\r\n            margin: \"5px\",\r\n            display: 'inline',\r\n\r\n        }\r\n    },\r\n    permitionChip: {\r\n        margin: \"2px\",\r\n        marginLeft: \"5px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"14px\",\r\n        fontWeight: \"501\"\r\n\r\n    }\r\n}));\r\n\r\nexport const EmployeeDetails = () => {\r\n    const classes = useStyles();\r\n    const [employee, setEmployee] = useState({});\r\n    const params = useParams();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getEmploee(params.id);\r\n    }, [])\r\n\r\n    const getEmploee = async (empID) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL + `employee/get/` + empID,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setEmployee(data));\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mainConteiner}>\r\n            <div className={classes.title}>\r\n                <h2>Employee Details:</h2>\r\n            </div>\r\n            {employee.person === undefined ? null :\r\n                <div className={classes.gridConteiner}>\r\n                    <div>\r\n                        <h2 className={classes.header}>Personsal Info</h2>\r\n                        <div>\r\n                            <h3>Name: </h3>\r\n                            <p>{employee.person.name}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Surname: </h3>\r\n                            <p>{employee.person.surname}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Phone Number: </h3>\r\n                            <p>{employee.person.phoneNumber}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Email: </h3>\r\n                            <p>{employee.person.email}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h2 className={classes.header}>Address:</h2>\r\n                        <div  >\r\n                            <h3>City: </h3>\r\n                            <p>{employee.person.employeeAddress.city}</p>\r\n                        </div>\r\n                        <div   >\r\n                            <h3>Street: </h3>\r\n                            <p>{employee.person.employeeAddress.street}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Post Code: </h3>\r\n                            <p>{employee.person.employeeAddress.postCode}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <h2 className={classes.header}>Occupation info</h2>\r\n                        <div  >\r\n                            <h3>Employment Date: </h3>\r\n                            <p>{employee.employmentDate.toString().split('T')[0]}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Position: </h3>\r\n                            <p>{employee.position.name}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Department: </h3>\r\n                            <p>{employee.department.name}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Work Type: </h3>\r\n                            <p>{employee.remoteWork === true ? \"Remote\" : \"Office\"}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            }\r\n            {employee.permissions === undefined ||\r\n                employee.permissions.length === 0 ? null :\r\n                <div>\r\n                    <h2>Employee Permissions: </h2>\r\n                    {employee.permissions.map((permition, index) => (\r\n                        <Chip\r\n                            className={classes.permitionChip}\r\n                            key={index}\r\n                            label={permition.name}\r\n                            color=\"primary\"\r\n                        />\r\n\r\n                    ))}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\CreateJobApplication.js",["81"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../Services/Globals'\r\n\r\nconst CreateJobApplication = () => {\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [isSelected, setIsSelected] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const PostJobApplication = () => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"id\": 0, \"name\": \"Json\", \"surname\": \"j\",\r\n                \"phoneNumber\": 0, \"email\": \"temp@mail.net\",\r\n                \"EmployeeAddressId\": 0,\r\n                \"employeeAddress\":\r\n                    { \"id\": 0, \"city\": \"New York\", \"postCode\": \"11-111\", \"street\": \"str 11\" }\r\n            })\r\n        };\r\n        fetch(APIURL + 'JobApplications', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data));\r\n    }\r\n\r\n    const changeHandler = (event) => {\r\n        setSelectedFile(event.target.files[0]);\r\n        setIsSelected(true);\r\n    };\r\n\r\n    const handleSubmission = () => {\r\n        const formData = new FormData();\r\n\r\n        formData.append('Id', 0);\r\n        formData.append('Name', \"Json\");\r\n        formData.append('Surname', \"xy\");\r\n        formData.append('Email', \"e3@gr\");\r\n        formData.append('Content', \"bzdury\");\r\n        formData.append('PositionId', 1);\r\n        formData.append('ApplicationDate', \"2021-02-01\");\r\n        formData.append('CVPath', \"\");\r\n        formData.append('CVFile', selectedFile);\r\n\r\n        fetch(\r\n            'http://localhost:5000/api/JobApplications',\r\n            {\r\n                method: 'POST',\r\n                body: formData,\r\n            }\r\n        )\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                console.log('Success:', result);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" name=\"file\" onChange={changeHandler} />\r\n            {isSelected ? (\r\n                <div>\r\n                    <p>Filename: {selectedFile.name}</p>\r\n                    <p>Filetype: {selectedFile.type}</p>\r\n                    <p>Size in bytes: {selectedFile.size}</p>\r\n\r\n                </div>\r\n            ) : (\r\n                <p>Select a file to show details</p>\r\n            )}\r\n            <div>\r\n                <button onClick={handleSubmission}>Submit</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateJobApplication;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\GlobalComponents.js",["82","83"],"import { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Paper from '@material-ui/core/Paper';\r\n\r\nconst StyledTextField = withStyles({\r\n    root: {\r\n\r\n        '& .MuiInputBase-root': {\r\n            color: \"white\",\r\n            marginRight: \"10px\",\r\n            marginLeft: \"20px\",\r\n            marginBottom: \"11px\",\r\n        },\r\n\r\n        '& .MuiFormLabel-root': {\r\n            color: \"#999999\",\r\n            marginLeft: \"20px\",\r\n        },\r\n\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiInput-underline:hover:not(.Mui-disabled):before': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottomColor: '#999999',\r\n        },\r\n    },\r\n})(TextField);\r\n\r\nconst StyledSelectFC = withStyles({\r\n    root: {\r\n        '& .MuiInputBase-root': {\r\n            color: \"white\",\r\n            marginRight: \"10px\",\r\n            marginLeft: \"20px\",\r\n            marginBottom: \"11px\",\r\n        },\r\n\r\n        '& .MuiFormLabel-root': {\r\n            color: \"#999999\",\r\n            marginLeft: \"20px\",\r\n        },\r\n\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiInput-underline:hover:not(.Mui-disabled):before': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottomColor: '#999999',\r\n        },\r\n        '& .MuiSelect-icon': {\r\n            color: '#999999',\r\n        },\r\n    },\r\n})(FormControl);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 138,\r\n    },\r\n    darkChipListBox: {\r\n        display: 'flex',\r\n    },\r\n    chipListContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        listStyle: 'none',\r\n        padding: theme.spacing(0.5),\r\n        paddingTop: \"12px\",\r\n        width: \"max-content\",\r\n        margin: \"0\",\r\n    },\r\n    chipItem: {\r\n        margin: theme.spacing(0.5),\r\n    }\r\n}));\r\n\r\nexport const DarkTextField = ({ onChange, label, name, type }) => {\r\n    return (\r\n        <StyledTextField\r\n            onChange={onChange}\r\n            label={label}\r\n            name={name}\r\n            type={type}\r\n        />\r\n    );\r\n};\r\n\r\nexport const DarkSelect = ({ onChange, label, name, value, firstVal, collection }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <StyledSelectFC className={classes.formControl}>\r\n            <InputLabel id=\"select-params-label\">{label}</InputLabel>\r\n            <Select\r\n                labelId=\"select-params-label\"\r\n                id=\"select-params\"\r\n                name={name}\r\n                onChange={onChange}\r\n                value={value}\r\n                defaultValue=\"\"\r\n            >\r\n                {\r\n                    firstVal === undefined ? null :\r\n                        <MenuItem key={0} value={firstVal.id} >{firstVal.name}</MenuItem>\r\n                }\r\n                {collection === undefined ? null :\r\n                    collection.map((item, index) => (\r\n                        <MenuItem key={index + 1} value={item}>{item.name}</MenuItem>\r\n                    ))\r\n                }\r\n            </Select>\r\n        </StyledSelectFC>\r\n    );\r\n};\r\n\r\nexport const DarkChipList = ({ onChange, label, name, value, firstVal, firstLabel, collection, clipListCollection, onDelete }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.darkChipListBox}>\r\n            <StyledSelectFC className={classes.formControl}>\r\n                <InputLabel id=\"select-params-label\">{label}</InputLabel>\r\n                <Select\r\n                    labelId=\"select-params-label\"\r\n                    id=\"select-params\"\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    value={value}\r\n                >\r\n                    {firstVal === undefined ? <div></div> :\r\n                        <MenuItem value={firstVal}>{firstLabel}</MenuItem>\r\n                    }\r\n                    {collection === undefined ? <div></div> :\r\n                        collection.map((item, index) => (\r\n                            <MenuItem id={\"permissionMenuItem\" + item.id} key={index} value={item}>{item.name}</MenuItem>\r\n                        ))\r\n                    }\r\n                </Select>\r\n            </StyledSelectFC>\r\n            <ul className={classes.chipListContainer}>\r\n                {clipListCollection === undefined ? <div></div> :\r\n                    clipListCollection.map((data, index) => {\r\n                        return (\r\n                            <li key={index}>\r\n                                <Chip\r\n                                    className={classes.chipItem}\r\n                                    label={data.name}\r\n                                    onDelete={() => onDelete(data)}\r\n                                />\r\n                            </li>\r\n                        );\r\n                    })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default {\r\n    DarkChipList,\r\n    DarkSelect,\r\n    DarkTextField\r\n};","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\LoginUser.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\AuthService.js",["84"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\MainComponent.js",["85","86","87","88"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Dashboard.js",["89","90"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../Services/Globals'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\n\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.progressBox} position=\"relative\" display=\"inline-flex\">\r\n            <CircularProgress className={classes.progressBox} variant=\"determinate\" {...props} />\r\n            <Box\r\n                top={0}\r\n                left={0}\r\n                bottom={0}\r\n                right={0}\r\n                position=\"absolute\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Typography variant=\"h5\" component=\"div\">{`${Math.round(\r\n                    props.value,\r\n                )}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1.5rem',\r\n        width: '100%',\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    remoteWorkBox: {\r\n        marginTop: '1.5rem',\r\n        width: \"307px\",\r\n        padding: \"10px\",\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    statsBox: {\r\n        marginTop: '1.5rem',\r\n        marginLeft: '1.5rem',\r\n        width: \"120px\",\r\n        height: \"60px\",\r\n        padding: \"12px\",\r\n        position: \"relative\",\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    progressBox: {\r\n        width: \"100% !important\",\r\n        height: \"100% !important\",\r\n    },\r\n    container: {\r\n        maxHeight: 540,\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800]\r\n    },\r\n}));\r\n\r\nconst Dashboard = () => {\r\n    const classes = useStyles();\r\n    const [employees, setEmployees] = useState([]);\r\n    const [stats, setStats] = useState();\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        if (stats !== undefined) {\r\n            const timer = setInterval(() => {\r\n                setProgress((prevProgress) => (prevProgress === stats.remoteEmploeesPercentage\r\n                    ? stats.remoteEmploeesPercentage\r\n                    : prevProgress + 1));\r\n            }, 45);\r\n            return () => {\r\n                clearInterval(timer);\r\n            };\r\n        }\r\n    }, [stats]);\r\n\r\n    useEffect(() => {\r\n        console.log(APIURL);\r\n        getEmploees(1, 5);\r\n        getStats();\r\n    }, []);\r\n\r\n    const getEmploees = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL +\r\n            `employee/all?page=${page}&size=${size}&order=date-desc`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (setEmployees(data.items), console.log(data.items)));\r\n    }\r\n\r\n    const getStats = async () => {\r\n        const requestOptions = {\r\n            method: 'Get'\r\n        };\r\n        await fetch(APIURL + `home/stats`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (setStats(data)));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {stats === undefined ? <div></div> :\r\n                <Grid container>\r\n                    <Card className={classes.remoteWorkBox}>\r\n                        <Grid container item spacing={4}>\r\n                            <Grid item xs={7} >\r\n                                <Typography noWrap variant=\"h5\">{stats.totalRemoteEmployees} Employees</Typography>\r\n                                <Typography noWrap variant=\"subtitle1\">Work Remotely</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={5}>\r\n                                <CircularProgressWithLabel value={progress} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{stats.totalEmployees}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Total Employees</Typography>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{stats.totalJobApplications}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Job Applicatios</Typography>\r\n                    </Card>\r\n                </Grid>\r\n            }\r\n            {employees === undefined ? <div></div> :\r\n                <Card className={classes.root}>\r\n                    <CardHeader\r\n                        title=\"Newly Hired Employees:\"\r\n                    />\r\n\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        #\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Employment Date\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell>\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {employees.map((employee, index) => (\r\n                                    <TableRow hover key={employee.id}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {index + 1}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.department.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.remoteWork === true ?\r\n                                                <CheckCircleIcon /> : <CloseIcon />}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.employmentDate.toString().split('T')[0]}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${employee.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Card>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default Dashboard;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\Globals.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\TeamManager.js",["91","92","93"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../Services/Globals';\r\n\r\nconst TeamManager = () => {\r\n\r\n    return (\r\n        <div>\r\n            <h2>Team Manager</h2>\r\n        </div>\r\n    );\r\n}\r\nexport default TeamManager;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\StartPage.js",[],{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","replacedBy":"97"},{"ruleId":"98","severity":1,"message":"99","line":2,"column":17,"nodeType":"100","messageId":"101","endLine":2,"endColumn":26},{"ruleId":"98","severity":1,"message":"102","line":2,"column":28,"nodeType":"100","messageId":"101","endLine":2,"endColumn":36},{"ruleId":"98","severity":1,"message":"103","line":3,"column":50,"nodeType":"100","messageId":"101","endLine":3,"endColumn":54},{"ruleId":"104","severity":1,"message":"105","line":104,"column":8,"nodeType":"106","endLine":104,"endColumn":27,"suggestions":"107"},{"ruleId":"104","severity":1,"message":"108","line":108,"column":8,"nodeType":"106","endLine":108,"endColumn":10,"suggestions":"109"},{"ruleId":"110","severity":1,"message":"111","line":120,"column":52,"nodeType":"112","messageId":"113","endLine":120,"endColumn":53},{"ruleId":"114","severity":1,"message":"115","line":88,"column":13,"nodeType":"116","messageId":"117","endLine":88,"endColumn":49,"fix":"118"},{"ruleId":"104","severity":1,"message":"119","line":90,"column":8,"nodeType":"106","endLine":90,"endColumn":29,"suggestions":"120"},{"ruleId":"104","severity":1,"message":"121","line":58,"column":8,"nodeType":"106","endLine":58,"endColumn":10,"suggestions":"122"},{"ruleId":"98","severity":1,"message":"123","line":12,"column":11,"nodeType":"100","messageId":"101","endLine":12,"endColumn":29},{"ruleId":"98","severity":1,"message":"124","line":8,"column":8,"nodeType":"100","messageId":"101","endLine":8,"endColumn":13},{"ruleId":"125","severity":1,"message":"126","line":173,"column":1,"nodeType":"127","endLine":177,"endColumn":3},{"ruleId":"128","severity":1,"message":"129","line":63,"column":9,"nodeType":"100","messageId":"130","endLine":63,"endColumn":21},{"ruleId":"98","severity":1,"message":"131","line":5,"column":8,"nodeType":"100","messageId":"101","endLine":5,"endColumn":28},{"ruleId":"98","severity":1,"message":"132","line":8,"column":8,"nodeType":"100","messageId":"101","endLine":8,"endColumn":17},{"ruleId":"98","severity":1,"message":"133","line":55,"column":24,"nodeType":"100","messageId":"101","endLine":55,"endColumn":37},{"ruleId":"104","severity":1,"message":"134","line":60,"column":8,"nodeType":"106","endLine":60,"endColumn":10,"suggestions":"135"},{"ruleId":"98","severity":1,"message":"136","line":16,"column":8,"nodeType":"100","messageId":"101","endLine":16,"endColumn":14},{"ruleId":"110","severity":1,"message":"111","line":132,"column":52,"nodeType":"112","messageId":"113","endLine":132,"endColumn":53},{"ruleId":"98","severity":1,"message":"99","line":1,"column":17,"nodeType":"100","messageId":"101","endLine":1,"endColumn":26},{"ruleId":"98","severity":1,"message":"102","line":1,"column":28,"nodeType":"100","messageId":"101","endLine":1,"endColumn":36},{"ruleId":"98","severity":1,"message":"137","line":2,"column":8,"nodeType":"100","messageId":"101","endLine":2,"endColumn":14},"no-native-reassign",["138"],"no-negated-in-lhs",["139"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Link' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getEmploees'. Either include it or remove the dependency array.","ArrayExpression",["140"],"React Hook useEffect has a missing dependency: 'getSearchProps'. Either include it or remove the dependency array.",["141"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-useless-computed-key","Unnecessarily computed property ['permissions'] found.","Property","unnecessarilyComputedProperty",{"range":"142","text":"143"},"React Hook useEffect has a missing dependency: 'employee'. Either include it or remove the dependency array. You can also do a functional update 'setEmployee(e => ...)' if you only need 'employee' in the 'setEmployee' call.",["144"],"React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["145"],"'PostJobApplication' is assigned a value but never used.","'Paper' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-const-assign","'allowedViews' is constant.","const","'CreateJobApplication' is defined but never used.","'LoginUser' is defined but never used.","'setUserAccess' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'userAccess'. Either include it or remove the dependency array.",["146"],"'Button' is defined but never used.","'APIURL' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"147","fix":"148"},{"desc":"149","fix":"150"},[2476,2491],"'permissions'",{"desc":"151","fix":"152"},{"desc":"153","fix":"154"},{"desc":"155","fix":"156"},"Update the dependencies array to be: [getEmploees, page, rowsPerPage]",{"range":"157","text":"158"},"Update the dependencies array to be: [getSearchProps]",{"range":"159","text":"160"},"Update the dependencies array to be: [employee, employeePermissions]",{"range":"161","text":"162"},"Update the dependencies array to be: [params.id]",{"range":"163","text":"164"},"Update the dependencies array to be: [userAccess]",{"range":"165","text":"166"},[3564,3583],"[getEmploees, page, rowsPerPage]",[3645,3647],"[getSearchProps]",[2533,2554],"[employee, employeePermissions]",[1524,1526],"[params.id]",[1866,1868],"[userAccess]"]