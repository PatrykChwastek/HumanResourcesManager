[{"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\index.js":"1","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\App.js":"2","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\reportWebVitals.js":"3","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\GlobalComponents.js":"4","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\AuthService.js":"5","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\MainComponent.js":"6","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\Globals.js":"7","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\StartPage.js":"8","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksColumns.js":"9","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeList.js":"10","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeDetails.js":"11","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\LoginUser.js":"12","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Dashboard.js":"13","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\JobApplication\\CreateJobApplication.js":"14","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\TasksService.js":"15","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksList.js":"16","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamTasks.js":"17","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\CreateTask.js":"18","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeForm.js":"19","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\Team_Dashboard.js":"20","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamList.js":"21","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\AddTeamMembers.js":"22","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\CreateTeam.js":"23","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Manager.js":"24","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\UsersList.js":"25","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\UserForm.js":"26","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\Profile.js":"27"},{"size":242,"mtime":1626196431129,"results":"28","hashOfConfig":"29"},{"size":1025,"mtime":1642248061865,"results":"30","hashOfConfig":"29"},{"size":362,"mtime":499162500000,"results":"31","hashOfConfig":"29"},{"size":9655,"mtime":1646394722616,"results":"32","hashOfConfig":"29"},{"size":1966,"mtime":1646913397590,"results":"33","hashOfConfig":"29"},{"size":10022,"mtime":1647247600985,"results":"34","hashOfConfig":"29"},{"size":70,"mtime":1641207518125,"results":"35","hashOfConfig":"29"},{"size":1991,"mtime":1644314466755,"results":"36","hashOfConfig":"29"},{"size":23766,"mtime":1647245884881,"results":"37","hashOfConfig":"29"},{"size":17228,"mtime":1645180967923,"results":"38","hashOfConfig":"29"},{"size":5898,"mtime":1645091111544,"results":"39","hashOfConfig":"29"},{"size":2696,"mtime":1647246669063,"results":"40","hashOfConfig":"29"},{"size":11157,"mtime":1645179615793,"results":"41","hashOfConfig":"29"},{"size":2650,"mtime":1642248358913,"results":"42","hashOfConfig":"29"},{"size":3612,"mtime":1645444477007,"results":"43","hashOfConfig":"29"},{"size":32080,"mtime":1645444478369,"results":"44","hashOfConfig":"29"},{"size":1181,"mtime":1647245852892,"results":"45","hashOfConfig":"29"},{"size":16774,"mtime":1647245913457,"results":"46","hashOfConfig":"29"},{"size":14821,"mtime":1646392440163,"results":"47","hashOfConfig":"29"},{"size":15683,"mtime":1647245611511,"results":"48","hashOfConfig":"29"},{"size":17355,"mtime":1645692376283,"results":"49","hashOfConfig":"29"},{"size":19219,"mtime":1645711457728,"results":"50","hashOfConfig":"29"},{"size":7779,"mtime":1645715130209,"results":"51","hashOfConfig":"29"},{"size":17580,"mtime":1645794348677,"results":"52","hashOfConfig":"29"},{"size":15839,"mtime":1646392320114,"results":"53","hashOfConfig":"29"},{"size":5326,"mtime":1647249652882,"results":"54","hashOfConfig":"29"},{"size":5435,"mtime":1647252657738,"results":"55","hashOfConfig":"29"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},"yin7gd",{"filePath":"59","messages":"60","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"58"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"58"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"58"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"58"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"58"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"58"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"58"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"58"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"58"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"99","messages":"100","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"101","messages":"102","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"103","usedDeprecatedRules":"58"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"58"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"58"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"58"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"58"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"58"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"123","messages":"124","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\index.js",[],["125","126"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\App.js",["127","128","129"],"import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { createTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport LoginUser from './Components/Users/LoginUser';\nimport MainComponent from './Components/MainComponent';\nimport StartPage from './Components/StartPage';\n\nconst theme = createTheme({\n  palette: {\n    secondary: {\n      light: \"#3b783d\",\n      main: \"#367338\",\n      dark: \"#2e6630\",\n      contrastText: \"#fff\"\n    },\n    type: 'dark'\n  }\n})\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <StartPage />\n          </Route>\n          <Route path=\"/login\">\n            <LoginUser />\n          </Route>\n          <Route path=\"/main\" >\n            <MainComponent />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\reportWebVitals.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\GlobalComponents.js",["130"],"import { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst StyledTextField = withStyles({\r\n    root: {\r\n\r\n        '& .MuiInputBase-root': {\r\n            color: \"white\",\r\n            marginRight: \"10px\",\r\n            marginLeft: \"20px\",\r\n            marginBottom: \"11px\",\r\n        },\r\n\r\n        '& .MuiFormLabel-root': {\r\n            color: \"#999999\",\r\n            marginLeft: \"20px\",\r\n        },\r\n\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiInput-underline:hover:not(.Mui-disabled):before': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottomColor: '#999999',\r\n        },\r\n        '& input[type=\"password\" i]': {\r\n            webkitTextSecurity: 'disc !important'\r\n        }\r\n    },\r\n})(TextField);\r\n\r\nconst StyledSelectFC = withStyles({\r\n    root: {\r\n        '& .MuiInputBase-root': {\r\n            color: \"white\",\r\n            marginRight: \"10px\",\r\n            marginLeft: \"20px\",\r\n            marginBottom: \"11px\",\r\n        },\r\n\r\n        '& .MuiFormLabel-root': {\r\n            color: \"#999999\",\r\n            marginLeft: \"20px\",\r\n        },\r\n\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiInput-underline:hover:not(.Mui-disabled):before': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottomColor: '#999999',\r\n        },\r\n        '& .MuiSelect-icon': {\r\n            color: '#999999',\r\n        },\r\n    },\r\n})(FormControl);\r\n\r\nconst BorderLinearProgress = withStyles((theme) => {\r\n    return {\r\n        root: {\r\n            borderRadius: \"6px\",\r\n            width: \"32px\",\r\n            height: \"100%\",\r\n            marginBottom: \"2px\"\r\n        },\r\n        colorPrimary: {\r\n            boxShadow: 'inset 0px 3px 3px -2px rgb(0 0 0 / 20%), inset 0px 3px 4px 0px rgb(0 0 0 / 14%), inset 0px 1px 8px 0px rgb(0 0 0 / 12%), ' + theme.shadows[1],\r\n            backgroundColor: '#a9a6a6',\r\n            borderRadius: '4px',\r\n        },\r\n        bar: {\r\n            borderRadius: \"6px\",\r\n            boxShadow: theme.shadows[3],\r\n            transform: ({ value }) => {\r\n                return `translateY(${value}%) !important`;\r\n            },\r\n            backgroundColor: ({ bcolor }) => { return bcolor }\r\n        },\r\n    };\r\n})(LinearProgress);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 138,\r\n    },\r\n    darkChipListBox: {\r\n        display: 'flex',\r\n    },\r\n    chipListContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        listStyle: 'none',\r\n        padding: theme.spacing(0.5),\r\n        paddingTop: \"12px\",\r\n        width: \"max-content\",\r\n        margin: \"0\",\r\n    },\r\n    chipItem: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '2px 6px 2px',\r\n        marginBottom: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        width: '100%',\r\n    },\r\n    barBox: {\r\n        minHeight: \"160px\",\r\n        display: \"flex\",\r\n        padding: \"0\",\r\n        margin: '6px',\r\n        width: \"max-content\",\r\n        boxshadow: theme.shadows[2]\r\n    },\r\n    stats: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n        backgroundColor: '#bdbdbd',\r\n        color: 'black'\r\n    }\r\n}));\r\n\r\nexport const DarkTextField = ({ onChange, label, name, type, maxRows, value, defaultValue, disabled }) => {\r\n    return (\r\n        <StyledTextField\r\n            onChange={onChange}\r\n            multiline={maxRows !== undefined ? true : false}\r\n            maxRows={maxRows}\r\n            label={label}\r\n            name={name}\r\n            type={type}\r\n            value={value}\r\n            defaultValue={defaultValue}\r\n            disabled={disabled}\r\n        />\r\n    );\r\n};\r\n\r\nexport const DarkSelect = ({ onChange, label, name, value, firstVal, collection, defaultValue }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <StyledSelectFC className={classes.formControl}>\r\n            <InputLabel id=\"select-params-label\">{label}</InputLabel>\r\n            <Select\r\n                labelId=\"select-params-label\"\r\n                id=\"select-params\"\r\n                name={name}\r\n                onChange={onChange}\r\n                value={value}\r\n                defaultValue={defaultValue === undefined ? '' : defaultValue}\r\n            >\r\n                {\r\n                    firstVal === undefined ? null :\r\n                        <MenuItem key={0} value={firstVal.id} >{firstVal.name}</MenuItem>\r\n                }\r\n                {collection === undefined ? null :\r\n                    collection.map((item, index) => (\r\n                        <MenuItem key={index + 1} value={item}>{item.name}</MenuItem>\r\n                    ))\r\n                }\r\n            </Select>\r\n        </StyledSelectFC>\r\n    );\r\n};\r\n\r\nexport const DarkChipList = ({ onChange, label, name, value, firstVal, firstLabel, collection, clipListCollection, onDelete }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.darkChipListBox}>\r\n            <StyledSelectFC className={classes.formControl}>\r\n                <InputLabel id=\"select-params-label\">{label}</InputLabel>\r\n                <Select\r\n                    labelId=\"select-params-label\"\r\n                    id=\"select-params\"\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    value={value}\r\n                >\r\n                    {firstVal === undefined ? <div></div> :\r\n                        <MenuItem value={firstVal}>{firstLabel}</MenuItem>\r\n                    }\r\n                    {collection === undefined ? <div></div> :\r\n                        collection.map((item, index) => (\r\n                            <MenuItem id={\"chipMenuItem\" + item.id} key={\"chipKey\" + item.id} value={item}>{item.name}</MenuItem>\r\n                        ))\r\n                    }\r\n                </Select>\r\n            </StyledSelectFC>\r\n            <ul className={classes.chipListContainer}>\r\n                {clipListCollection === undefined ? <div></div> :\r\n                    clipListCollection.map((data, index) => {\r\n                        return (\r\n                            <li key={index}>\r\n                                <Chip\r\n                                    className={classes.chipItem}\r\n                                    label={data.name}\r\n                                    onDelete={() => onDelete(data)}\r\n                                />\r\n                            </li>\r\n                        );\r\n                    })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const StatBar = ({ valueMax, valueCurrent, text, bcolor }) => {\r\n    const classes = useStyles();\r\n\r\n    const barLvl = valueMax === 0 && valueCurrent === 0 ? 100 :\r\n        100 - (valueCurrent * 100) / valueMax;\r\n\r\n    return (\r\n        <Card className={classes.barBox}>\r\n\r\n            <div className={classes.stats}>\r\n                <div className={classes.title}>\r\n                    <Typography noWrap variant=\"body2\">{text}</Typography>\r\n                </div>\r\n                <BorderLinearProgress variant=\"determinate\" bcolor={bcolor} value={barLvl} />\r\n                <Typography variant=\"button\">{Math.round(100 - barLvl)}%</Typography>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport const ConfirmDialog = (props) => {\r\n    const { title, children, open, setOpen, onConfirm } = props;\r\n    return (\r\n        <Dialog\r\n            open={open}\r\n            onClose={() => setOpen(false)}\r\n            aria-labelledby=\"confirm-dialog\"\r\n        >\r\n            <DialogTitle id=\"confirm-dialog\">{title}</DialogTitle>\r\n            <DialogContent>{children}</DialogContent>\r\n            <DialogActions>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => setOpen(false)}\r\n                    color=\"secondary\"\r\n                >\r\n                    No\r\n                </Button>\r\n                <Button\r\n                    variant=\"contained\"\r\n                    onClick={() => {\r\n                        setOpen(false);\r\n                        onConfirm();\r\n                    }}\r\n                    color=\"default\"\r\n                >\r\n                    Yes\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n    );\r\n};\r\n\r\nexport default {\r\n    DarkChipList,\r\n    DarkSelect,\r\n    DarkTextField,\r\n    StatBar,\r\n    ConfirmDialog\r\n};","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\AuthService.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\MainComponent.js",["131","132","133","134","135","136"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\Globals.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\StartPage.js",["137"],"import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    redirectButton: {\r\n        margin: '8px',\r\n        width: \"10rem\",\r\n    },\r\n    mainCard: {\r\n        margin: '0 auto',\r\n        marginTop: '32px',\r\n        display: 'block',\r\n        maxWidth: 750,\r\n    },\r\n    cardMedia: {\r\n        height: 350,\r\n    },\r\n}));\r\n\r\nconst StartPage = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.mainCard}>\r\n                <CardActionArea>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            Human Resources Manager\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                            A prototype application. To store employees data, and assign tasks to them.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    <Link style={{ textDecoration: \"none\" }} to=\"/login\">\r\n                        <Button\r\n                            className={classes.redirectButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >To Login Page</Button>\r\n                    </Link>\r\n                </CardActions>\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default StartPage;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksColumns.js",["138","139","140","141","142","143","144"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeList.js",["145","146","147"],"import React, { useEffect, useState } from \"react\";\r\nimport { DarkTextField, DarkSelect, ConfirmDialog } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1rem',\r\n        width: '100%',\r\n    },\r\n    tabTop: {\r\n        display: 'flex',\r\n        padding: '9px',\r\n        justifyContent: 'space-between',\r\n        \"& h2\": {\r\n            margin: 0,\r\n        },\r\n        \"& a\": {\r\n            textDecoration: \"none\",\r\n            color: \"white\",\r\n        }\r\n    },\r\n    container: {\r\n        maxHeight: 550,\r\n    },\r\n    pagination: {\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800],\r\n    },\r\n    searchBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.8rem\",\r\n        paddingRight: \"1.8rem\",\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n}));\r\n\r\nconst EmployList = () => {\r\n    const classes = useStyles();\r\n    const [employees, setEmployees] = useState([]);\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const [delDialogProps, setDelDialogProps] = useState({\r\n        open: false,\r\n        employeeId: null,\r\n    });\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [totalItems, setTotalItems] = useState(1);\r\n    const firstRecord = { id: 0, name: \"All\" };\r\n    const [orderOptions] = useState([\r\n        { id: \"name\", name: \"Name\" },\r\n        { id: \"surname\", name: \"Surame\" },\r\n        { id: \"department\", name: \"Department\" },\r\n        { id: \"position\", name: \"Position\" },\r\n        { id: \"date-asc\", name: \"Date-asc\" },\r\n        { id: \"date-desc\", name: \"Date-desc\" }\r\n    ]);\r\n    const [remoteOptions] = useState([\r\n        { id: '', name: \"All\" },\r\n        { id: true, name: \"Remote\" },\r\n        { id: false, name: \"Office\" },\r\n    ]);\r\n    const [seniorityLvs] = useState([\r\n        firstRecord,\r\n        { id: 1, name: \"Junior\" },\r\n        { id: 2, name: \"Regular\" },\r\n        { id: 3, name: \"Senior\" },\r\n    ]);\r\n    const [searchParams, setSearchParams] = useState({\r\n        searchString: '',\r\n        department: firstRecord,\r\n        position: firstRecord,\r\n        seniority: firstRecord,\r\n        orderBy: orderOptions[4],\r\n        isRemote: remoteOptions[0]\r\n    });\r\n    useEffect(() => {\r\n        getEmploees(page + 1, rowsPerPage);\r\n    }, [page, rowsPerPage]);\r\n\r\n    useEffect(() => {\r\n        getSearchProps()\r\n    }, []);\r\n\r\n    const getEmploees = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL +\r\n            `employee/all?page=${page}&size=${size}&order=${searchParams.orderBy.id}` +\r\n            `&search=${searchParams.searchString}` +\r\n            `&department=${searchParams.department.id}` +\r\n            `&position=${searchParams.position.id}` +\r\n            `&seniority=${searchParams.seniority.id === 0 ? '' : searchParams.seniority.name}` +\r\n            `&isremote=${searchParams.isRemote.id}`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => (setEmployees(data.items), setTotalItems(data.totalItems)));\r\n    }\r\n\r\n    const getSearchProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setDepartments(data) });\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setPositions(data) });\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeSearchParams = event => {\r\n        setSearchParams({\r\n            searchParams,\r\n            searchString: event.target.name === \"searchInput\" ? event.target.value : searchParams.searchString,\r\n            department: event.target.name === \"departmentSelect\" ? event.target.value : searchParams.department,\r\n            position: event.target.name === \"positionSelect\" ? event.target.value : searchParams.position,\r\n            seniority: event.target.name === \"senioritySelect\" ? event.target.value : searchParams.seniority,\r\n            orderBy: event.target.name === \"orderBy\" ? event.target.value : searchParams.orderBy,\r\n            isRemote: event.target.name === \"isRemote\" ? event.target.value : searchParams.isRemote,\r\n        });\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        getEmploees(1, rowsPerPage);\r\n    };\r\n\r\n    const hendleDeleteEmployee = () => {\r\n        const requestOptions = {\r\n            method: 'Delete',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        fetch(APIURL +\r\n            `employee/delete/${delDialogProps.employeeId}`,\r\n            requestOptions\r\n        ).then(data => console.log(data), setPage(0));\r\n    };\r\n\r\n    const delDialogOpen = () => {\r\n        setDelDialogProps({ ...delDialogProps, open: !delDialogProps.open })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ConfirmDialog\r\n                title={\"Delete Employee: \" + delDialogProps.employeeId}\r\n                open={delDialogProps.open}\r\n                setOpen={delDialogOpen}\r\n                onConfirm={hendleDeleteEmployee}\r\n            >\r\n                Are you sure you want to delete employee?\r\n            </ConfirmDialog>\r\n            <Toolbar className={classes.searchBox}>\r\n                <h3 className={classes.whiteText}>Employees</h3>\r\n                <DarkTextField\r\n                    onChange={handleChangeSearchParams}\r\n                    label='Search...'\r\n                    name='searchInput'\r\n                />\r\n                <DarkSelect\r\n                    label=\"Department\"\r\n                    name=\"departmentSelect\"\r\n                    collection={departments}\r\n                    value={searchParams.department}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Position\"\r\n                    name=\"positionSelect\"\r\n                    collection={positions}\r\n                    value={searchParams.position}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Seniority\"\r\n                    name=\"senioritySelect\"\r\n                    collection={seniorityLvs}\r\n                    value={searchParams.seniority}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Order by\"\r\n                    name=\"orderBy\"\r\n                    collection={orderOptions}\r\n                    value={searchParams.orderBy}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Work Type\"\r\n                    name=\"isRemote\"\r\n                    collection={remoteOptions}\r\n                    value={searchParams.isRemote}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>Search</Button>\r\n            </Toolbar>\r\n\r\n            {employees === undefined ? <div></div> :\r\n                <Paper className={classes.root}>\r\n                    <div className={classes.tabTop}>\r\n                        <h2 >Employee List:</h2>\r\n                        <Link to=\"/main/employee-form\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n\r\n                                endIcon={<AddCircleIcon />}\r\n                                onClick={handleSearch}\r\n                            >\r\n                                New Employee\r\n                            </Button>\r\n                        </Link>\r\n                    </div>\r\n                    <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        #\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Seniority\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Employment Date\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Action\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {employees.map((employee, index) => (\r\n                                    <TableRow hover key={index}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {index + 1}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.seniority}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.department.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.remoteWork === true ?\r\n                                                <CheckCircleIcon /> : <CloseIcon />}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.employmentDate.toString().split('T')[0]}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${employee.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                            <Link to={{ pathname: `/main/employee-form`, employee: { employee } }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"edit\">\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                            <IconButton\r\n                                                className={classes.button}\r\n                                                size=\"small\"\r\n                                                onClick={() => setDelDialogProps({\r\n                                                    open: true,\r\n                                                    employeeId: employee.id\r\n                                                })}\r\n                                            >\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        className={classes.pagination}\r\n                        rowsPerPageOptions={[10, 25, 35]}\r\n                        component=\"div\"\r\n                        count={totalItems}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default EmployList;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeDetails.js",["148"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Chip from '@material-ui/core/Chip';\r\nimport TasksList from \"../Tasks/TasksList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    detailsConteiner: {\r\n        margin: \"8px\",\r\n        background: theme.palette.grey[800],\r\n        padding: '1.5rem',\r\n        color: theme.palette.text.primary,\r\n    },\r\n    title: {\r\n        margin: \"-1.5rem\",\r\n        textAlign: 'center',\r\n        padding: '1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    gridConteiner: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: `1fr 1fr 1fr`,\r\n        gridTemplateRows: \"1fr \",\r\n        justifyContent: \"space-evenly\",\r\n        alignContent: \"center\",\r\n        marginTop: \"0.5rem\",\r\n        '& p': {\r\n            margin: \"5px\",\r\n            display: 'inline',\r\n            fontSize: \"17px\"\r\n        },\r\n        '& h3': {\r\n            margin: \"5px\",\r\n            display: 'inline',\r\n\r\n        }\r\n    },\r\n    permitionChip: {\r\n        margin: \"2px\",\r\n        marginLeft: \"5px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"14px\",\r\n        fontWeight: \"501\"\r\n\r\n    }\r\n}));\r\n\r\nexport const EmployeeDetails = () => {\r\n    const classes = useStyles();\r\n    const [employee, setEmployee] = useState({});\r\n    const params = useParams();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getEmploee(params.id);\r\n    }, [])\r\n\r\n    const getEmploee = async (empID) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL + `employee/get/` + empID,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setEmployee(data));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.detailsConteiner}>\r\n                <div className={classes.title}>\r\n                    <h2>Employee Details:</h2>\r\n                </div>\r\n                {employee.person === undefined ? null :\r\n                    <div className={classes.gridConteiner}>\r\n                        <div>\r\n                            <h2 className={classes.header}>Personsal Info</h2>\r\n                            <div>\r\n                                <h3>Name: </h3>\r\n                                <p>{employee.person.name}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Surname: </h3>\r\n                                <p>{employee.person.surname}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Phone Number: </h3>\r\n                                <p>{employee.person.phoneNumber}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Email: </h3>\r\n                                <p>{employee.person.email}</p>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <h2 className={classes.header}>Address:</h2>\r\n                            <div  >\r\n                                <h3>City: </h3>\r\n                                <p>{employee.person.employeeAddress.city}</p>\r\n                            </div>\r\n                            <div   >\r\n                                <h3>Street: </h3>\r\n                                <p>{employee.person.employeeAddress.street}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Post Code: </h3>\r\n                                <p>{employee.person.employeeAddress.postCode}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <h2 className={classes.header}>Occupation info</h2>\r\n                            <div  >\r\n                                <h3>Employment Date: </h3>\r\n                                <p>{employee.employmentDate.toString().split('T')[0]}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Position: </h3>\r\n                                <p>{employee.position.name}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Seniority Lvl: </h3>\r\n                                <p>{employee.seniority}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Department: </h3>\r\n                                <p>{employee.department.name}</p>\r\n                            </div>\r\n                            <div  >\r\n                                <h3>Work Type: </h3>\r\n                                <p>{employee.remoteWork === true ? \"Remote\" : \"Office\"}</p>\r\n                            </div>\r\n                        </div>\r\n\r\n                    </div>\r\n                }\r\n                {employee.permissions === undefined ||\r\n                    employee.permissions.length === 0 ? null :\r\n                    <div>\r\n                        <h2>Employee Permissions: </h2>\r\n                        {employee.permissions.map((permition, index) => (\r\n                            <Chip\r\n                                className={classes.permitionChip}\r\n                                key={index}\r\n                                label={permition.name}\r\n                                color=\"primary\"\r\n                            />\r\n\r\n                        ))}\r\n                    </div>\r\n                }\r\n            </div>\r\n\r\n            <TasksList userId={params.id} type='view' />\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\LoginUser.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Dashboard.js",["149","150"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../../Services/Globals'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\n\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.progressBox} position=\"relative\" display=\"inline-flex\">\r\n            <CircularProgress className={classes.progressBox} variant=\"determinate\" {...props} />\r\n            <Box\r\n                top={0}\r\n                left={0}\r\n                bottom={0}\r\n                right={0}\r\n                position=\"absolute\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Typography variant=\"h5\" component=\"div\">{`${Math.round(\r\n                    props.value,\r\n                )}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1.5rem',\r\n        width: '100%',\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    remoteWorkBox: {\r\n        marginTop: '1.5rem',\r\n        width: \"307px\",\r\n        padding: \"10px\",\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    statsBox: {\r\n        marginTop: '1.5rem',\r\n        marginLeft: '1.5rem',\r\n        width: \"120px\",\r\n        height: \"60px\",\r\n        padding: \"12px\",\r\n        position: \"relative\",\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    progressBox: {\r\n        width: \"100% !important\",\r\n        height: \"100% !important\",\r\n    },\r\n    container: {\r\n        maxHeight: 540,\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800]\r\n    },\r\n}));\r\n\r\nconst HR_Dashboard = () => {\r\n    const classes = useStyles();\r\n    const [employees, setEmployees] = useState([]);\r\n    const [stats, setStats] = useState();\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        if (stats !== undefined) {\r\n            const timer = setInterval(() => {\r\n                setProgress((prevProgress) => (prevProgress === stats.remoteEmploeesPercentage\r\n                    ? stats.remoteEmploeesPercentage\r\n                    : prevProgress + 1));\r\n            }, 45);\r\n            return () => {\r\n                clearInterval(timer);\r\n            };\r\n        }\r\n    }, [stats]);\r\n\r\n    useEffect(() => {\r\n        getEmploees(1, 5);\r\n        getStats();\r\n    }, []);\r\n\r\n    const getEmploees = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL +\r\n            `employee/all?page=${page}&size=${size}&order=date-desc`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (setEmployees(data.items), console.log(data.items)));\r\n    }\r\n\r\n    const getStats = async () => {\r\n        const requestOptions = {\r\n            method: 'Get'\r\n        };\r\n        await fetch(APIURL + `home/stats`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (setStats(data)));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {stats === undefined ? <div></div> :\r\n                <Grid container>\r\n                    <Card className={classes.remoteWorkBox}>\r\n                        <Grid container item spacing={4}>\r\n                            <Grid item xs={7} >\r\n                                <Typography noWrap variant=\"h5\">{stats.totalRemoteEmployees} Employees</Typography>\r\n                                <Typography noWrap variant=\"subtitle1\">Work Remotely</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={5}>\r\n                                <CircularProgressWithLabel value={progress} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{stats.totalEmployees}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Total Employees</Typography>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{stats.totalJobApplications}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Job Applicatios</Typography>\r\n                    </Card>\r\n                </Grid>\r\n            }\r\n            {employees === undefined ? <div></div> :\r\n                <Card className={classes.root}>\r\n                    <CardHeader\r\n                        title=\"Newly Hired Employees:\"\r\n\r\n                    />\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        #\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Employment Date\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell>\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {employees.map((employee, index) => (\r\n                                    <TableRow hover key={employee.id}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {index + 1}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.department.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.remoteWork === true ?\r\n                                                <CheckCircleIcon /> : <CloseIcon />}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.employmentDate.toString().split('T')[0]}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${employee.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Card>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default HR_Dashboard;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\JobApplication\\CreateJobApplication.js",["151"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals'\r\n\r\nconst CreateJobApplication = () => {\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [isSelected, setIsSelected] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const PostJobApplication = () => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"id\": 0, \"name\": \"Json\", \"surname\": \"j\",\r\n                \"phoneNumber\": 0, \"email\": \"temp@mail.net\",\r\n                \"EmployeeAddressId\": 0,\r\n                \"employeeAddress\":\r\n                    { \"id\": 0, \"city\": \"New York\", \"postCode\": \"11-111\", \"street\": \"str 11\" }\r\n            })\r\n        };\r\n        fetch(APIURL + 'JobApplications', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data));\r\n    }\r\n\r\n    const changeHandler = (event) => {\r\n        setSelectedFile(event.target.files[0]);\r\n        setIsSelected(true);\r\n    };\r\n\r\n    const handleSubmission = () => {\r\n        const formData = new FormData();\r\n\r\n        formData.append('Id', 0);\r\n        formData.append('Name', \"Json\");\r\n        formData.append('Surname', \"xy\");\r\n        formData.append('Email', \"e3@gr\");\r\n        formData.append('Content', \"bzdury\");\r\n        formData.append('PositionId', 1);\r\n        formData.append('ApplicationDate', \"2021-02-01\");\r\n        formData.append('CVPath', \"\");\r\n        formData.append('CVFile', selectedFile);\r\n\r\n        fetch(\r\n            'http://localhost:5000/api/JobApplications',\r\n            {\r\n                method: 'POST',\r\n                body: formData,\r\n            }\r\n        )\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                console.log('Success:', result);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" name=\"file\" onChange={changeHandler} />\r\n            {isSelected ? (\r\n                <div>\r\n                    <p>Filename: {selectedFile.name}</p>\r\n                    <p>Filetype: {selectedFile.type}</p>\r\n                    <p>Size in bytes: {selectedFile.size}</p>\r\n\r\n                </div>\r\n            ) : (\r\n                <p>Select a file to show details</p>\r\n            )}\r\n            <div>\r\n                <button onClick={handleSubmission}>Submit</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateJobApplication;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\TasksService.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksList.js",["152","153","154","155"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals';\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport moment from \"moment\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getTasks, changeTaskStatus, getTeamTasks } from \"../../Services/TasksService\";\r\nimport { DarkTextField, DarkSelect } from '../GlobalComponents';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    filterBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.1rem\",\r\n        paddingRight: \"1.1rem\",\r\n        borderRadius: '4px',\r\n        marginLeft: '8px',\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n        \"& .MuiAccordion-root\": {\r\n            margin: \"0px\",\r\n            color: \"black\",\r\n            backgroundColor: '#bdbdbd',\r\n            borderRadius: \"4px\",\r\n            width: '243px',\r\n            boxShadow:\r\n                \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n            '&:before': {\r\n                display: 'none',\r\n            },\r\n        },\r\n        \"& .MuiAccordionSummary-root\": {\r\n            minHeight: \"36px\",\r\n            maxHeight: \"36px\"\r\n        },\r\n        \"& .MuiCollapse-root\": {\r\n            position: \"absolute\",\r\n            top: \"30px\",\r\n            paddingTop: \"20px\",\r\n            backgroundColor: '#bdbdbd',\r\n            zIndex: '1',\r\n            borderRadius: \"4px\",\r\n            boxShadow:\r\n                \"-1px 2px 1px 0px rgb(0 0 0 / 20%), -2px 3px 3px 0px rgb(0 0 0 / 35%), 1px 2px 1px 1px rgb(0 0 0 / 30%)\",\r\n        },\r\n        \"& .MuiAccordionDetails-root\": {\r\n            flexWrap: 'wrap'\r\n        }\r\n    },\r\n    filterDate: {\r\n        padding: '0 6px',\r\n        margin: '3px',\r\n        display: 'flex',\r\n        width: '190px'\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        margin: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n    tasksContainer: {\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center'\r\n    },\r\n    listComponent: {\r\n        margin: '8px',\r\n        width: '100%',\r\n        paddingTop: 0,\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: 'white',\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '4px',\r\n        display: \"flex\",\r\n        flexDirection: 'column',\r\n    },\r\n    pagination: {\r\n        display: 'grid',\r\n        padding: '8px',\r\n        marginTop: 'auto',\r\n        \"& .Mui-selected\": {\r\n            color: 'white',\r\n            backgroundColor: 'rgb(63 81 181 / 80%)',\r\n        },\r\n        \"& .MuiPaginationItem-outlined\": {\r\n            boxShadow: theme.shadows[2],\r\n            border: '1px solid rgb(149 149 149 / 23%)'\r\n        }\r\n    },\r\n    tasksDetailsCol: {\r\n        margin: \"8px\",\r\n        width: '100%',\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '6px 0',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '3px 3px 0 0',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    detailsTitle: {\r\n        color: theme.palette.text.primary,\r\n        padding: '6px 0 2px 12px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '3px 3px 0 0',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: \"column\"\r\n    },\r\n    linkButton: {\r\n        marginRight: '10px',\r\n        marginLeft: 'auto',\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n    },\r\n    statusContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        margin: '4px',\r\n        marginLeft: '15px',\r\n    },\r\n    chipContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignContent: 'space-around',\r\n        alignItems: 'stretch',\r\n        flexwrap: 'nowrap',\r\n        justifyContent: 'space-evenly'\r\n    },\r\n    timeChip: {\r\n        margin: \"2px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"12px\",\r\n        fontWeight: \"550\"\r\n\r\n    },\r\n    subtaskAccordion: {\r\n        backgroundColor: '#bdbdbd',\r\n        color: \"black\",\r\n        marginTop: \"8px\",\r\n        marginBottom: '4px',\r\n        borderRadius: '4px',\r\n        padding: '0px',\r\n        '&::before': {\r\n            height: 0\r\n        }\r\n    },\r\n    buttonSection: {\r\n        display: 'grid',\r\n        padding: '16px',\r\n        marginTop: 'auto',\r\n        justifyItems: 'center',\r\n        \"& .MuiButton-label\": {\r\n            paddingLeft: '4px',\r\n            paddingRight: '4px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst noFilter = {\r\n    name: \"\",\r\n    status: undefined,\r\n    isBStartTime: false,\r\n    bStartTime: undefined,\r\n    isAStartTime: false,\r\n    aStartTime: undefined,\r\n    isBDeadline: false,\r\n    bDeadline: undefined,\r\n    isADeadline: false,\r\n    aDeadline: undefined\r\n}\r\nconst taskStatusAll = [{ id: 1, name: 'Completed' }, { id: 2, name: 'Requested' }, { id: 3, name: 'In-Progress' }];\r\nconst allowedStatuses = taskStatusAll;\r\n\r\nconst TasksList = (props) => {\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const anchorRef = React.useRef(null);\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const [selTaskEmployee, setSelTaskEmployee] = useState({});\r\n    const [tasks, setTasks] = useState([]);\r\n    const [expandedSubTask, setExpandedSubTask] = useState('');\r\n    const [openStatusSel, setOpenStatusSel] = useState(false);\r\n    const [statusSelIndex, setStatusSelIndex] = useState(1);\r\n    const [pagination, setPagination] = useState({\r\n        page: 1,\r\n        size: 10,\r\n        totalPages: 1\r\n    });\r\n    const [filterParams, setFilterParams] = useState(location.filter === undefined ? noFilter : location.filter.filter);\r\n\r\n    useEffect(() => {\r\n        loadTasksList(\r\n            pagination.page,\r\n            pagination.size\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (props.teamId !== undefined && tasks[selectedIndex] !== undefined) {\r\n            getAssignedEmployee(tasks[selectedIndex].assignedEmployeeId);\r\n        }\r\n    }, [selectedIndex, tasks]);\r\n\r\n    const getAssignedEmployee = async (empID) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL + `employee/get/` + empID,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setSelTaskEmployee(data));\r\n    }\r\n\r\n    const loadTasksList = (page, size) => {\r\n        if (props.teamId === undefined && props.userId !== undefined) {\r\n            getTasks(\r\n                page, size, props.userId,\r\n                filterParams.name,\r\n                filterParams.status,\r\n                filterParams.bStartTime,\r\n                filterParams.aStartTime,\r\n                filterParams.bDeadline,\r\n                filterParams.aDeadline\r\n            ).then((data) => {\r\n                setPagination({\r\n                    page: page,\r\n                    size: size,\r\n                    totalPages: data.totalPages,\r\n                })\r\n                setSelectedIndex(0);\r\n                setTasks(data.items);\r\n            })\r\n        } else {\r\n            getTeamTasks(\r\n                page, size, props.teamId,\r\n                filterParams.name,\r\n                filterParams.status,\r\n                filterParams.bStartTime,\r\n                filterParams.aStartTime,\r\n                filterParams.bDeadline,\r\n                filterParams.aDeadline\r\n            ).then((data) => {\r\n                setPagination({\r\n                    page: page,\r\n                    size: size,\r\n                    totalPages: data.totalPages,\r\n                })\r\n                setSelectedIndex(0);\r\n                setTasks(data.items)\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleChangeFilterParams = e => {\r\n        if (e.target.name === 'statusSel') {\r\n            setFilterParams({\r\n                ...filterParams,\r\n                status: e.target.value.name\r\n            })\r\n        }\r\n        if (e.target.name === 'taskName') {\r\n            setFilterParams({\r\n                ...filterParams,\r\n                name: e.target.value\r\n            })\r\n        }\r\n        if (e.target.type === \"checkbox\") {\r\n            const today = moment().format('yyy-MM-DD');\r\n            switch (e.target.name) {\r\n                case 'isBStartTime':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isBStartTime: e.target.checked,\r\n                        bStartTime: e.target.checked === false ? undefined :\r\n                            filterParams.bStartTime === undefined ? today :\r\n                                filterParams.bStartTime\r\n                    });\r\n                    break;\r\n                case 'isAStartTime':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isAStartTime: e.target.checked,\r\n                        aStartTime: e.target.checked === false ? undefined :\r\n                            filterParams.aStartTime === undefined ? today :\r\n                                filterParams.aStartTime\r\n                    });\r\n                    break;\r\n                case 'isBDeadline':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isBDeadline: e.target.checked,\r\n                        bDeadline: e.target.checked === false ? undefined :\r\n                            filterParams.bDeadline === undefined ? today :\r\n                                filterParams.bDeadline\r\n                    });\r\n                    break;\r\n                case 'isADeadline':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isADeadline: e.target.checked,\r\n                        aDeadline: e.target.checked === false ? undefined :\r\n                            filterParams.aDeadline === undefined ? today :\r\n                                filterParams.aDeadline\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleApplyFilters = () => {\r\n        console.log(filterParams);\r\n        loadTasksList(pagination.page, pagination.size)\r\n    }\r\n\r\n    const handleListItemClick = (event, index) => {\r\n        setSelectedIndex(index);\r\n    };\r\n\r\n    const handlePageChange = (event, value) => {\r\n        loadTasksList(value, pagination.size);\r\n    };\r\n    const handleSubTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedSubTask(newExpanded ? taskId : false);\r\n    }\r\n\r\n    const hendleChangeStatus = () => {\r\n        changeTaskStatus(tasks[selectedIndex].id, allowedStatuses[statusSelIndex].name)\r\n            .then((d) => { loadTasksList(pagination.page, pagination.size) },\r\n                e => { console.log(\"status change error\") });\r\n    }\r\n\r\n    const handleMenuItemClick = (event, index) => {\r\n        setStatusSelIndex(index);\r\n        setOpenStatusSel(false);\r\n    };\r\n\r\n    const handleStatSellToggle = () => {\r\n        setOpenStatusSel((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleStatSellClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n\r\n        setOpenStatusSel(false);\r\n    };\r\n\r\n    const changeCipColor = (status) => {\r\n        return {\r\n            boxShadow: 'rgb(0 0 0 / 20%) 0px 0px 1px -2px, rgb(0 0 0 / 14%) 0px 1px 2px 0px, rgb(0 0 0 / 12%) 0px 0px 5px 0px',\r\n            fontSize: \"12px\",\r\n            fontWeight: \"550\",\r\n            padding: \"5px\",\r\n            minWidth: '92px',\r\n            color: status === \"In-Progress\" || status === \"Delayed\" ? \"white\" : \"black\",\r\n            background: status === \"In-Progress\"\r\n                ? \"rgb(56 81 216)\"\r\n                : status === \"Requested\"\r\n                    ? \"rgb(231 170 35)\" :\r\n                    status === \"Delayed\" ?\r\n                        \"#bd0000\" :\r\n                        \"rgb(0 158 7)\",\r\n        }\r\n    }\r\n    return (\r\n        <div >\r\n            <Toolbar className={classes.filterBox}>\r\n                <h3 className={classes.whiteText}>Search Tasks: </h3>\r\n                <DarkTextField\r\n                    onChange={handleChangeFilterParams}\r\n                    label='Task Name...'\r\n                    name='taskName'\r\n                />\r\n                <DarkSelect\r\n                    label=\"Status\"\r\n                    name=\"statusSel\"\r\n                    collection={allowedStatuses}\r\n                    firstVal={{ id: 0, name: 'All' }}\r\n                    onChange={handleChangeFilterParams}\r\n                />\r\n                <Accordion>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                    >\r\n                        <Typography>\r\n                            Select Task by Date\r\n                        </Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isBStartTime\"\r\n                                checked={filterParams.isBStartTime}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"bStartTime\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"Before Start Time:\"\r\n                                    value={filterParams.bStartTime}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isBStartTime: true,\r\n                                            bStartTime: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isAStartTime\"\r\n                                checked={filterParams.isAStartTime}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"datePicker\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"After Start Time:\"\r\n                                    value={filterParams.aStartTime}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isAStartTime: true,\r\n                                            aStartTime: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isBDeadline\"\r\n                                checked={filterParams.isBDeadline}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"datePicker\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"Before Deadline:\"\r\n                                    value={filterParams.bDeadline}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isBDeadline: true,\r\n                                            bDeadline: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isADeadline\"\r\n                                checked={filterParams.isADeadline}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"datePicker\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"After Deadline:\"\r\n                                    value={filterParams.aDeadline}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isADeadline: true,\r\n                                            aDeadline: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n                <Button\r\n                    style={{ marginLeft: '15px' }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleApplyFilters}\r\n                >Submit</Button>\r\n            </Toolbar>\r\n            {tasks.length === 0 ? null :\r\n                <div className={classes.tasksContainer}>\r\n                    <List component=\"nav\" className={classes.listComponent}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\" style={{ marginLeft: '16px' }}>\r\n                                List of Tasks:\r\n                            </Typography>\r\n                            {props.teamId === undefined ? null :\r\n                                <Link className={classes.linkButton} to=\"/main/create-task\">\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        endIcon={<AddCircleIcon />}\r\n                                    >NEW Task</Button>\r\n                                </Link>\r\n                            }\r\n                        </div>\r\n                        {tasks.map((task, index) => (\r\n                            <div key={task.id}>\r\n                                <ListItem\r\n\r\n                                    button\r\n                                    selected={selectedIndex === index}\r\n                                    onClick={(event) => handleListItemClick(event, index)}\r\n                                >\r\n                                    <ListItemText primary={task.name} />\r\n                                    <Chip\r\n                                        label={task.status}\r\n                                        style={changeCipColor(task.status)}\r\n                                    />\r\n\r\n                                </ListItem>\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                            </div>\r\n                        ))\r\n                        }\r\n                        <Pagination\r\n                            className={classes.pagination}\r\n                            count={pagination.totalPages}\r\n                            page={pagination.page}\r\n                            onChange={handlePageChange}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </List>\r\n                    <Card className={classes.tasksDetailsCol}>\r\n                        <div className={classes.detailsTitle}>\r\n                            <Typography noWrap variant=\"h5\">\r\n                                {tasks[selectedIndex].name}\r\n                            </Typography>\r\n                            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                                <Typography variant=\"subtitle1\" style={{ marginRight: \"6px\" }}>\r\n                                    {\"Status: \"}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    {tasks[selectedIndex].status}\r\n                                </Typography>\r\n                            </div>\r\n\r\n                        </div>\r\n                        {selTaskEmployee.id === undefined ? null :\r\n                            <div className={classes.statusContainer}>\r\n                                <Typography noWrap variant=\"h6\">\r\n                                    {\"Assigned Employee: \" +\r\n                                        selTaskEmployee.person.name + \" \" +\r\n                                        selTaskEmployee.person.surname\r\n                                    }\r\n                                </Typography>\r\n                            </div>\r\n\r\n                        }\r\n                        <CardContent style={{ paddingTop: 0 }}>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\", marginTop: '2px' }} />\r\n                            <div className={classes.chipContainer}>\r\n                                <Chip\r\n                                    className={classes.timeChip}\r\n                                    label={\"Start: \" + moment(tasks[selectedIndex].startTime).format(\"YYYY-MM-DD\")}\r\n                                    color=\"primary\"\r\n                                />\r\n                                <Chip\r\n                                    className={classes.timeChip}\r\n                                    label={\"Deadline: \" + moment(tasks[selectedIndex].deadline).format(\"YYYY-MM-DD\")}\r\n                                    color=\"primary\"\r\n                                />\r\n                            </div>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n\r\n                            <Typography variant=\"subtitle1\">\r\n                                {tasks[selectedIndex].description}\r\n                            </Typography>\r\n                            {tasks[selectedIndex].subtasks.length < 1 ? null :\r\n                                <div>\r\n                                    <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n                                    <Typography noWrap variant=\"subtitle1\">\r\n                                        Subtasks:\r\n                                    </Typography>\r\n                                    {tasks[selectedIndex].subtasks.map((subtask, index) => (\r\n                                        <Accordion\r\n                                            expanded={expandedSubTask === subtask.id}\r\n                                            onChange={handleSubTaskExpand(subtask.id)}\r\n                                            key={subtask.id}\r\n                                            className={classes.subtaskAccordion}\r\n                                        >\r\n                                            <AccordionSummary\r\n                                                expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                            >\r\n                                                <Typography>\r\n                                                    {subtask.name}\r\n                                                </Typography>\r\n                                            </AccordionSummary>\r\n                                            <AccordionDetails>\r\n                                                {subtask.description}\r\n                                            </AccordionDetails>\r\n                                        </Accordion>\r\n                                    ))}\r\n                                </div>\r\n                            }\r\n\r\n\r\n                        </CardContent>\r\n                        {props.type === 'view' ? null :\r\n                            <div className={classes.buttonSection}>\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n                                <ButtonGroup variant=\"contained\" color=\"primary\" ref={anchorRef}>\r\n                                    <Button onClick={hendleChangeStatus}>{allowedStatuses[statusSelIndex].name}</Button>\r\n                                    <Button\r\n                                        color=\"primary\"\r\n                                        size=\"small\"\r\n                                        aria-controls={openStatusSel ? 'split-button-menu' : undefined}\r\n                                        aria-expanded={openStatusSel ? 'true' : undefined}\r\n                                        aria-label=\"select merge strategy\"\r\n                                        aria-haspopup=\"menu\"\r\n                                        onClick={handleStatSellToggle}\r\n                                    >\r\n                                        <ArrowDropDownIcon />\r\n                                    </Button>\r\n                                </ButtonGroup>\r\n                                <Popper open={openStatusSel} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n                                    {({ TransitionProps, placement }) => (\r\n                                        <Grow\r\n                                            {...TransitionProps}\r\n                                            style={{\r\n                                                transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                                            }}\r\n                                        >\r\n                                            <Paper>\r\n                                                <ClickAwayListener onClickAway={handleStatSellClose}>\r\n                                                    <MenuList id=\"split-button-menu\">\r\n                                                        {allowedStatuses.map((option, index) => (\r\n                                                            <MenuItem\r\n                                                                key={option.name}\r\n                                                                //  disabled={index === 2}\r\n                                                                selected={index === statusSelIndex}\r\n                                                                onClick={(event) => handleMenuItemClick(event, index)}\r\n                                                            >\r\n                                                                {option.name}\r\n                                                            </MenuItem>\r\n                                                        ))}\r\n                                                    </MenuList>\r\n                                                </ClickAwayListener>\r\n                                            </Paper>\r\n                                        </Grow>\r\n                                    )}\r\n                                </Popper>\r\n\r\n                            </div>\r\n                        }\r\n                    </Card>\r\n                </div>\r\n            }\r\n        </div >\r\n    );\r\n}\r\nexport default TasksList;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamTasks.js",["156","157","158","159"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\CreateTask.js",["160","161","162","163","164","165"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeForm.js",["166","167"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DarkTextField, DarkSelect, DarkChipList } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals'\r\nimport { useLocation } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { format } from 'date-fns'\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainConteiner: {\r\n        marginTop: \"1.8rem\",\r\n        background: theme.palette.grey[800],\r\n        paddingBottom: '20px'\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    formGrid: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr 1fr 1fr\",\r\n        justifyContent: \"space-between\",\r\n        alignContent: \"space-between\",\r\n        gridGap: \"1.2rem 1.2rem\",\r\n    },\r\n    datePicker: {\r\n        marginTop: '0',\r\n        marginLeft: \"20px\"\r\n    },\r\n    createButton: {\r\n        margin: '0 auto',\r\n        display: 'block',\r\n        width: \"19rem\",\r\n    }\r\n}));\r\n\r\nconst EmployeeForm = ({ createdEmployee, employeeToEdit }) => {\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const [seniorityLvs] = useState([\r\n        { id: 1, name: \"Junior\" },\r\n        { id: 2, name: \"Regular\" },\r\n        { id: 3, name: \"Senior\" },\r\n    ]);\r\n    const [employee, setEmployee] = useState(\r\n        location.employee !== undefined ? location.employee.employee :\r\n            employeeToEdit !== undefined ? employeeToEdit :\r\n                {\r\n                    id: 0,\r\n                    employmentDate: format(new Date(), \"yyy-MM-dd\"),\r\n                    remoteWork: false,\r\n                    person: {\r\n                        id: 0,\r\n                        name: \"\",\r\n                        surname: \"\",\r\n                        phoneNumber: \"\",\r\n                        email: \"\",\r\n                        employeeAddress: {\r\n                            id: 0,\r\n                            city: \"\",\r\n                            postCode: \"\",\r\n                            street: \"\"\r\n                        }\r\n                    },\r\n                    position: {\r\n                        id: 0,\r\n                        name: \"\",\r\n                    },\r\n                    department: {\r\n                        id: 0,\r\n                        name: \"\",\r\n                    },\r\n                    seniority: \"\",\r\n                    permissions: []\r\n                });\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const remoteWork = [\r\n        { id: false, name: \"Office\" },\r\n        { id: true, name: \"Remote\" }\r\n    ];\r\n    const [allPermissions, setAllPermissions] = useState([]);\r\n    const [employeePermissions, setEmployeePermissions] = useState(\r\n        location.employee !== undefined ? location.employee.employee.permissions :\r\n            employeeToEdit !== undefined ? employeeToEdit.permissions : []\r\n    );\r\n    const [allertProps, setAllertProps] = useState({\r\n        text: '',\r\n        open: false,\r\n        type: 'success'\r\n    });\r\n\r\n    useEffect(() => {\r\n        getEmployeeProps()\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setEmployee({\r\n            ...employee,\r\n            ['permissions']: employeePermissions\r\n        })\r\n    }, [employeePermissions]);\r\n\r\n    const PostEmployee = (formData) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formData),\r\n        };\r\n        fetch(APIURL + 'employee/create', requestOptions)\r\n            .then(response => response.json())\r\n            .then(() => {\r\n                setAllertProps({\r\n                    text: \"Employee Created\",\r\n                    open: true,\r\n                    type: \"success\"\r\n                })\r\n            }\r\n                , (err) => {\r\n                    console.log(err)\r\n                    setAllertProps({\r\n                        text: \"Employee Creation Error!\",\r\n                        open: true,\r\n                        type: \"error\"\r\n                    })\r\n                });\r\n    }\r\n\r\n    const PutEmployee = (id, formData) => {\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formData),\r\n        };\r\n        fetch(APIURL + 'employee/put/' + id, requestOptions)\r\n            .then(() => setAllertProps({\r\n                text: \"Employee Modified\",\r\n                open: true,\r\n                type: 'success'\r\n            })\r\n                , (err) => {\r\n                    console.log(err)\r\n                    setAllertProps({\r\n                        text: \"Employee Edit Error!\",\r\n                        open: true,\r\n                        type: \"error\"\r\n                    })\r\n                }\r\n            );\r\n    }\r\n\r\n    const getEmployeeProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setDepartments(data));\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setPositions(data));\r\n\r\n        await fetch(APIURL + `permissions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setAllPermissions(data));\r\n    }\r\n\r\n    const headleFormChange = e => {\r\n\r\n        if (e.target.name === \"permissionSelect\") {\r\n            if (employeePermissions.length === 0) {\r\n                setEmployeePermissions([e.target.value]);\r\n            } else {\r\n                let isPicked = false;\r\n                employeePermissions.forEach(element => {\r\n                    if (element.id === e.target.value.id) {\r\n                        isPicked = true;\r\n                    }\r\n                });\r\n                if (!isPicked) {\r\n                    setEmployeePermissions([...employeePermissions, e.target.value]);\r\n                }\r\n            }\r\n        }\r\n        setEmployee({\r\n            ...employee,\r\n            person: {\r\n                ...employee.person,\r\n                name: e.target.name === \"employeeName\" ? e.target.value : employee.person.name,\r\n                surname: e.target.name === \"employeeSurname\" ? e.target.value : employee.person.surname,\r\n                phoneNumber: e.target.name === \"employeePhone\" ? e.target.value : employee.person.phoneNumber,\r\n                email: e.target.name === \"employeeEmail\" ? e.target.value : employee.person.email,\r\n                employeeAddress: {\r\n                    ...employee.person.employeeAddress,\r\n                    city: e.target.name === \"employeeCity\" ? e.target.value : employee.person.employeeAddress.city,\r\n                    postCode: e.target.name === \"employeePostCode\" ? e.target.value : employee.person.employeeAddress.postCode,\r\n                    street: e.target.name === \"employeeStreet\" ? e.target.value : employee.person.employeeAddress.street\r\n                }\r\n            },\r\n            position: e.target.name === \"positionSelect\" ? e.target.value : employee.position,\r\n            department: e.target.name === \"departmentSelect\" ? e.target.value : employee.department,\r\n            employmentDate: employee.employmentDate,\r\n            remoteWork: e.target.name === \"remoteWork\" ? e.target.value.id : employee.remoteWork,\r\n            seniority: e.target.name === \"seniority\" ? e.target.value.name : employee.seniority,\r\n            permissions: employee.permissions\r\n        })\r\n    }\r\n\r\n    const headleDateChange = (e) => {\r\n        setEmployee({ ...employee, employmentDate: e })\r\n    }\r\n    const hendlePermissionDelete = chipToDelete => {\r\n        setEmployeePermissions(chips => chips.filter(chip => chip.name !== chipToDelete.name));\r\n    }\r\n\r\n    const hendleSubmitEmployee = () => {\r\n        if (createdEmployee !== undefined) {\r\n            createdEmployee(employee);\r\n            return;\r\n        }\r\n\r\n        if (location.employee !== undefined) {\r\n            PutEmployee(employee.id, employee)\r\n            return;\r\n        }\r\n        PostEmployee(employee);\r\n    }\r\n\r\n    const setSelectVall = (colection, objId) => {\r\n        if (colection[0] === undefined || objId === 0)\r\n            return '';\r\n\r\n        return colection[colection.findIndex((item) => item.id === objId)];\r\n    }\r\n\r\n    const handleAllertClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAllertProps({ ...allertProps, open: false });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.mainConteiner}>\r\n            <Snackbar open={allertProps.open} autoHideDuration={4000} onClose={handleAllertClose}>\r\n                <Alert onClose={handleAllertClose} severity={allertProps.type}>\r\n                    {allertProps.text}\r\n                </Alert>\r\n            </Snackbar>\r\n            <div boxshadow={2} className={classes.title}>\r\n                {employee.id !== 0 ?\r\n                    <h3 >{'Edit Employee: ' + employee.id}</h3> :\r\n                    <h3 >Create New Employee</h3>\r\n                }\r\n            </div>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <div className={classes.formGrid}>\r\n                    <DarkTextField\r\n                        label=\"Name\"\r\n                        name=\"employeeName\"\r\n                        value={employee.person.name}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Surname\"\r\n                        name=\"employeeSurname\"\r\n                        value={employee.person.surname}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Phone Number\"\r\n                        name=\"employeePhone\"\r\n                        type=\"tel\"\r\n                        value={employee.person.phoneNumber}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Email\"\r\n                        name=\"employeeEmail\"\r\n                        value={employee.person.email}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"City\"\r\n                        name=\"employeeCity\"\r\n                        value={employee.person.employeeAddress.city}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Post Code\"\r\n                        name=\"employeePostCode\"\r\n                        value={employee.person.employeeAddress.postCode}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Street\"\r\n                        name=\"employeeStreet\"\r\n                        value={employee.person.employeeAddress.street}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Department\"\r\n                        name=\"departmentSelect\"\r\n                        collection={departments}\r\n                        value={setSelectVall(departments, employee.department.id)}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Position\"\r\n                        name=\"positionSelect\"\r\n                        collection={positions}\r\n                        value={setSelectVall(positions, employee.position.id)}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Seniority\"\r\n                        name=\"seniority\"\r\n                        collection={seniorityLvs}\r\n                        value={\r\n                            seniorityLvs[seniorityLvs.findIndex((item) => item.name === employee.seniority)]} //sen\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Work Type\"\r\n                        name=\"remoteWork\"\r\n                        collection={remoteWork}\r\n                        value={employee.remoteWork === false ? remoteWork[0] : remoteWork[1]}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                            className={classes.datePicker}\r\n                            disableToolbar\r\n                            name=\"datePicker\"\r\n                            variant=\"inline\"\r\n                            format=\"yyyy-MM-dd\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Employment Date\"\r\n                            value={employee.employmentDate}\r\n                            onChange={headleDateChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                </div>\r\n                <DarkChipList\r\n                    label=\"Permissions\"\r\n                    name=\"permissionSelect\"\r\n                    collection={allPermissions}\r\n                    clipListCollection={employeePermissions}\r\n                    onChange={headleFormChange}\r\n                    onDelete={hendlePermissionDelete}\r\n                />\r\n                <Button\r\n                    className={classes.createButton}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={hendleSubmitEmployee}\r\n                >Submit </Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport default EmployeeForm;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\Team_Dashboard.js",["168","169","170","171","172","173","174","175","176"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamList.js",["177","178"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../../Services/Globals';\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { DarkTextField, DarkSelect } from '../GlobalComponents';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\n\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    filterBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.1rem\",\r\n        paddingRight: \"1.1rem\",\r\n        borderRadius: '4px',\r\n        marginLeft: '8px',\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        margin: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n    teamsContainer: {\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center'\r\n    },\r\n    listComponent: {\r\n        margin: '8px',\r\n        width: '100%',\r\n        minHeight: '700px',\r\n        maxHeight: '700px',\r\n        paddingTop: 0,\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: 'white',\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '4px',\r\n        display: \"flex\",\r\n        flexDirection: 'column'\r\n    },\r\n    pagination: {\r\n        display: 'grid',\r\n        padding: '8px',\r\n        marginTop: 'auto',\r\n        \"& .Mui-selected\": {\r\n            color: 'white',\r\n            backgroundColor: 'rgb(63 81 181 / 80%)',\r\n        },\r\n        \"& .MuiPaginationItem-outlined\": {\r\n            boxShadow: theme.shadows[2],\r\n            border: '1px solid rgb(149 149 149 / 23%)'\r\n        }\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '6px 0',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '3px 3px 0 0',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    linkButton: {\r\n        marginRight: '10px',\r\n        marginLeft: 'auto',\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n    },\r\n\r\n    teamMembersCol: {\r\n        margin: \"8px\",\r\n        width: '100%',\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    menuItem: {\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n        \"& .MuiListItemIcon-root\": {\r\n            minWidth: '32px'\r\n        }\r\n    }\r\n}));\r\n\r\nconst searchMode = [\r\n    { id: 'all', name: 'Show All' },\r\n    { id: 'teamName', name: 'Team Name' },\r\n    { id: 'leaderName', name: 'Team Leader Name' },\r\n    { id: 'memberName', name: 'Member Name' },]\r\n\r\nconst TeamList = () => {\r\n    const classes = useStyles();\r\n    const history = useHistory();\r\n    const [teams, setTeams] = useState([]);\r\n    const [searchParams, setSearchParams] = useState({ searchBy: searchMode[0].id, search: '' });\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const [menuAnchorEl, setMenuAnchorEl] = useState({ team: null, member: null, id: 0 });\r\n    const [pagination, setPagination] = useState({\r\n        page: 1,\r\n        size: 9,\r\n        totalPages: 1\r\n    });\r\n\r\n    useEffect(() => {\r\n        loadTeams(\r\n            pagination.page,\r\n            pagination.size\r\n        );\r\n    }, []);\r\n\r\n    const loadTeams = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        let requestUrl = `teams?page=${page}&size=${size}`;\r\n\r\n        if (searchParams.searchBy !== 'all') {\r\n            requestUrl =\r\n                `teams?page=${page}&size=${size}` +\r\n                `&searchby=${searchParams.searchBy}&search=${searchParams.search}`;\r\n        }\r\n\r\n        await fetch(APIURL + requestUrl, requestOptions)\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                setPagination({\r\n                    page: page,\r\n                    size: size,\r\n                    totalPages: data.totalPages,\r\n                })\r\n                setSelectedIndex(0);\r\n                setTeams(data.items);\r\n            });\r\n    };\r\n\r\n    const handleChangeSearchParams = e => {\r\n        if (e.target.name === 'searchBySel') {\r\n            setSearchParams({\r\n                ...searchParams,\r\n                searchBy: e.target.value.id\r\n            })\r\n            return;\r\n        }\r\n\r\n        setSearchParams({\r\n            ...searchParams,\r\n            search: e.target.value\r\n        })\r\n    };\r\n\r\n    const handleSearchTeam = () => {\r\n        loadTeams(1, pagination.size);\r\n    };\r\n\r\n    const handleListItemClick = (event, index) => {\r\n        setSelectedIndex(index);\r\n    };\r\n\r\n    const handlePageChange = (event, value) => {\r\n        loadTeams(value, pagination.size);\r\n    };\r\n\r\n    const handleOptinsClick = (event, menu, id) => {\r\n        if (menu === 'team') {\r\n            setMenuAnchorEl({ team: event.currentTarget, member: null, id: id });\r\n            return;\r\n        }\r\n        setMenuAnchorEl({ team: null, member: event.currentTarget, id: id });\r\n    };\r\n    const handleMenuClose = () => {\r\n        setMenuAnchorEl({ team: null, member: null, id: 0 });\r\n    };\r\n\r\n    const handleEditTeam = () => {\r\n        console.log(' to-do');\r\n\r\n    }\r\n\r\n    const handleDeleteTeam = () => {\r\n        console.log(' to-do');\r\n\r\n    };\r\n\r\n    const handleViewMember = () => {\r\n        history.push(`/main/employee-details/${menuAnchorEl.id}`)\r\n    };\r\n\r\n    const handleRemoveMember = () => {\r\n        console.log(' to-do');\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Toolbar className={classes.filterBox}>\r\n                <h3 className={classes.whiteText}>Search Team: </h3>\r\n                <DarkSelect\r\n                    label=\"Search by:\"\r\n                    name=\"searchBySel\"\r\n                    collection={searchMode}\r\n                    defaultValue={searchMode[0]}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkTextField\r\n                    onChange={handleChangeSearchParams}\r\n                    disabled={searchParams.searchBy === 'all'}\r\n                    label='Search...'\r\n                    name='searchTF'\r\n                />\r\n                <Button\r\n                    style={{ marginLeft: '15px' }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleSearchTeam}\r\n                >Search</Button>\r\n            </Toolbar>\r\n            {teams.length === 0 ? null :\r\n                <div className={classes.teamsContainer}>\r\n                    <List component=\"nav\" className={classes.listComponent}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\" style={{ marginLeft: '16px' }}>\r\n                                Team List:\r\n                            </Typography>\r\n                            <Link className={classes.linkButton} to=\"/main/create-team\">\r\n                                <Button\r\n                                    size=\"small\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    endIcon={<AddCircleIcon />}\r\n                                >NEW Team</Button>\r\n                            </Link>\r\n                        </div>\r\n                        {teams.map((team, index) => (\r\n                            <div key={team.id}>\r\n                                <ListItem\r\n                                    button\r\n                                    selected={selectedIndex === index}\r\n                                    onClick={(event) => handleListItemClick(event, index)}\r\n                                >\r\n                                    <ListItemText\r\n                                        primary={'Team Name: ' + team.name}\r\n                                        secondary={\r\n                                            <React.Fragment>\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body2\"\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    {'Team Leader: '}\r\n                                                </Typography>\r\n                                                {team.teamLeader.person.name + ' ' +\r\n                                                    team.teamLeader.person.surname}\r\n\r\n                                            </React.Fragment>\r\n                                        }\r\n                                    />\r\n\r\n                                    <p style={{ marginRight: '15px' }}>{'Members: ' + team.members.length}</p>\r\n                                    <ListItemSecondaryAction>\r\n                                        <IconButton edge=\"end\" onClick={(e) => { handleOptinsClick(e, 'team', team.id) }}>\r\n                                            <MoreVertIcon />\r\n                                        </IconButton>\r\n                                        <Menu\r\n                                            id=\"team-menu\"\r\n                                            anchorEl={menuAnchorEl.team}\r\n                                            keepMounted\r\n                                            open={Boolean(menuAnchorEl.team)}\r\n                                            onClose={handleMenuClose}\r\n                                        >\r\n                                            <MenuItem className={classes.menuItem} onClick={handleEditTeam}>\r\n                                                <ListItemIcon>\r\n                                                    <EditIcon fontSize=\"small\" />\r\n                                                </ListItemIcon>\r\n                                                Edit Team\r\n                                            </MenuItem>\r\n                                            <MenuItem className={classes.menuItem} onClick={handleDeleteTeam}>\r\n                                                <ListItemIcon>\r\n                                                    <DeleteIcon fontSize=\"small\" />\r\n                                                </ListItemIcon>\r\n                                                Delete Team\r\n                                            </MenuItem>\r\n                                        </Menu>\r\n                                    </ListItemSecondaryAction>\r\n                                </ListItem>\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                            </div>\r\n                        ))\r\n                        }\r\n                        <Pagination\r\n                            className={classes.pagination}\r\n                            count={pagination.totalPages}\r\n                            page={pagination.page}\r\n                            onChange={handlePageChange}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </List>\r\n                    <List component=\"nav\" className={classes.listComponent}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\" style={{ marginLeft: '16px' }}>\r\n                                Team Members:\r\n                            </Typography>\r\n                            <Link className={classes.linkButton} to={{\r\n                                pathname: \"/main/add-team-members\",\r\n                                members: teams[selectedIndex].members,\r\n                                teamid: teams[selectedIndex].id\r\n                            }}>\r\n                                <Button\r\n                                    size=\"small\"\r\n                                    variant=\"contained\"\r\n                                    color=\"secondary\"\r\n                                    endIcon={<EditIcon />}\r\n                                >Set Members</Button>\r\n                            </Link>\r\n                        </div>\r\n                        {teams[selectedIndex].members.length <= 0 ? <p>No Members</p> :\r\n                            <div style={{ overflow: 'auto', }}>\r\n                                {teams[selectedIndex].members.map((member, index) => (\r\n                                    <div key={\"member\" + member.id}>\r\n                                        <ListItem>\r\n                                            <ListItemText\r\n                                                primary={member.person.name + \" \" + member.person.surname}\r\n                                                secondary={\r\n                                                    <React.Fragment>\r\n                                                        <Typography\r\n                                                            component=\"span\"\r\n                                                            variant=\"body2\"\r\n                                                            color=\"textPrimary\"\r\n                                                        >\r\n                                                            {'Position: '}\r\n                                                        </Typography>\r\n                                                        {member.seniority + ' ' + member.position.name}\r\n                                                    </React.Fragment>\r\n                                                }\r\n                                            />\r\n                                            <p>Email:</p>\r\n                                            <p style={{ marginRight: '9px', marginLeft: '5px', color: 'rgba(255, 255, 255, 0.7)' }}>{member.person.email}</p>\r\n                                            <ListItemSecondaryAction>\r\n                                                <IconButton edge=\"end\" aria-label=\"comments\" onClick={(e) => handleOptinsClick(e, 'member', member.id)}>\r\n                                                    <MoreVertIcon />\r\n                                                </IconButton>\r\n                                                <Menu\r\n                                                    anchorEl={menuAnchorEl.member}\r\n                                                    keepMounted\r\n                                                    open={Boolean(menuAnchorEl.member)}\r\n                                                    onClose={handleMenuClose}\r\n                                                >\r\n                                                    <MenuItem className={classes.menuItem} onClick={handleViewMember}>\r\n                                                        <ListItemIcon>\r\n                                                            <VisibilityIcon fontSize=\"small\" />\r\n                                                        </ListItemIcon>\r\n                                                        Employee Details\r\n                                                    </MenuItem>\r\n                                                    <MenuItem className={classes.menuItem} onClick={handleRemoveMember}>\r\n                                                        <ListItemIcon>\r\n                                                            <DeleteIcon fontSize=\"small\" />\r\n                                                        </ListItemIcon>\r\n                                                        Remove From Team\r\n                                                    </MenuItem>\r\n                                                </Menu>\r\n                                            </ListItemSecondaryAction>\r\n                                        </ListItem>\r\n                                        <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                                    </div>\r\n                                ))}\r\n                            </div>\r\n                        }\r\n                    </List>\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default TeamList;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\AddTeamMembers.js",["179","180","181","182","183","184"],"import React, { useEffect, useState } from \"react\";\r\nimport { DarkTextField, DarkSelect, ConfirmDialog } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { useLocation } from \"react-router-dom\";\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Button from '@material-ui/core/Button';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport ClearIcon from '@material-ui/icons/Clear';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1rem',\r\n        width: '100%',\r\n    },\r\n    tab: {\r\n        \"& .MuiCheckbox-colorSecondary.Mui-checked\": {\r\n            color: '#3f51b5'\r\n        },\r\n        \"& .Mui-selected\": {\r\n            backgroundColor: theme.palette.grey[500],\r\n        },\r\n        backgroundColor: theme.palette.grey[400],\r\n        \"& .MuiTableCell-body\": {\r\n            color: 'black',\r\n        },\r\n\r\n        \"& .MuiTableRow-hover:hover\": { backgroundColor: theme.palette.grey[500], },\r\n    },\r\n\r\n    tabTop: {\r\n        display: 'flex',\r\n        padding: '8px',\r\n        paddingLeft: '17px',\r\n        justifyContent: 'space-between',\r\n        \"& h2\": {\r\n            margin: '2px',\r\n        },\r\n        \"& a\": {\r\n            textDecoration: \"none\",\r\n            color: \"white\",\r\n        }\r\n    },\r\n    container: {\r\n        maxHeight: '52vh',\r\n    },\r\n    pagination: {\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800],\r\n    },\r\n    selButton: {\r\n        width: '32px',\r\n        height: '32px',\r\n        marginLeft: '8px',\r\n    },\r\n    searchBox: {\r\n        padding: \"1px 8px 0 0\",\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n}));\r\n\r\nconst AddTeamMembers = ({ isSingle, onSelectionConfirm, selected }) => {\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const [employees, setEmployees] = useState([]);\r\n    const [selEmployees, setSelEmployees] = useState(\r\n        location.members !== undefined ?\r\n            location.members :\r\n            selected !== undefined ? selected : []\r\n    );\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(9);\r\n    const [totalItems, setTotalItems] = useState(1);\r\n    const firstRecord = { id: 0, name: \"All\" };\r\n    const [orderOptions] = useState([\r\n        { id: \"name\", name: \"Name\" },\r\n        { id: \"surname\", name: \"Surame\" },\r\n        { id: \"department\", name: \"Department\" },\r\n        { id: \"position\", name: \"Position\" },\r\n        { id: \"date-asc\", name: \"Date-asc\" },\r\n        { id: \"date-desc\", name: \"Date-desc\" }\r\n    ]);\r\n    const [remoteOptions] = useState([\r\n        { id: '', name: \"All\" },\r\n        { id: true, name: \"Remote\" },\r\n        { id: false, name: \"Office\" },\r\n    ]);\r\n    const [seniorityLvs] = useState([\r\n        firstRecord,\r\n        { id: 1, name: \"Junior\" },\r\n        { id: 2, name: \"Regular\" },\r\n        { id: 3, name: \"Senior\" },\r\n    ]);\r\n    const [searchParams, setSearchParams] = useState({\r\n        searchString: '',\r\n        department: firstRecord,\r\n        position: firstRecord,\r\n        seniority: firstRecord,\r\n        orderBy: orderOptions[4],\r\n        isRemote: remoteOptions[0]\r\n    });\r\n\r\n    const [allertProps, setAllertProps] = useState({\r\n        text: '',\r\n        open: false,\r\n        type: 'success'\r\n    });\r\n\r\n    useEffect(() => {\r\n        getEmploees(page + 1, rowsPerPage);\r\n    }, [page, rowsPerPage]);\r\n\r\n    useEffect(() => {\r\n        getSearchProps()\r\n    }, []);\r\n\r\n    const getEmploees = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL +\r\n            `employee/all?page=${page}&size=${size}&order=${searchParams.orderBy.id}` +\r\n            `&search=${searchParams.searchString}` +\r\n            `&department=${searchParams.department.id}` +\r\n            `&position=${searchParams.position.id}` +\r\n            `&seniority=${searchParams.seniority.id === 0 ? '' : searchParams.seniority.name}` +\r\n            `&isremote=${searchParams.isRemote.id}`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => (setEmployees(data.items), setTotalItems(data.totalItems)));\r\n    }\r\n\r\n    const getSearchProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setDepartments(data) });\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setPositions(data) });\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeSearchParams = event => {\r\n        setSearchParams({\r\n            searchParams,\r\n            searchString: event.target.name === \"searchInput\" ? event.target.value : searchParams.searchString,\r\n            department: event.target.name === \"departmentSelect\" ? event.target.value : searchParams.department,\r\n            position: event.target.name === \"positionSelect\" ? event.target.value : searchParams.position,\r\n            seniority: event.target.name === \"senioritySelect\" ? event.target.value : searchParams.seniority,\r\n            orderBy: event.target.name === \"orderBy\" ? event.target.value : searchParams.orderBy,\r\n            isRemote: event.target.name === \"isRemote\" ? event.target.value : searchParams.isRemote,\r\n        });\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        getEmploees(1, rowsPerPage);\r\n    };\r\n\r\n    const hendleAddMembers = async () => {\r\n        if (location.teamid !== undefined) {\r\n\r\n            let membersID = [];\r\n            selEmployees.forEach(employee => {\r\n                membersID.push(employee.id);\r\n            });\r\n            const requestOptions = {\r\n                method: 'Put',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(membersID)\r\n            };\r\n            await fetch(APIURL + `teams/members/${location.teamid}`,\r\n                requestOptions\r\n            ).then(data => {\r\n                console.log(data);\r\n                setAllertProps({\r\n                    text: \"Team Members Set\",\r\n                    open: true,\r\n                    type: \"success\"\r\n                });\r\n            }, (err) => {\r\n                console.log(err)\r\n                setAllertProps({\r\n                    text: \"Set Team Members Error!\",\r\n                    open: true,\r\n                    type: \"error\"\r\n                })\r\n            });\r\n        } else {\r\n            onSelectionConfirm(selEmployees)\r\n            setAllertProps({\r\n                text: isSingle ? \"Team Leader Set\" : \"Team Members Set\",\r\n                open: true,\r\n                type: \"success\"\r\n            })\r\n        }\r\n\r\n    }\r\n\r\n    const handleRowClick = (event, employee) => {\r\n        const selectedIndex = selEmployees.findIndex(e => e.id == employee.id);\r\n        let newSelected = [];\r\n\r\n        if (selectedIndex === -1) {\r\n            if (isSingle) {\r\n                newSelected = [employee];\r\n            } else\r\n                newSelected = newSelected.concat(selEmployees, employee);\r\n        }\r\n\r\n        if (selectedIndex >= 0) {\r\n            newSelected = selEmployees.filter((e) => e.id !== employee.id);\r\n        }\r\n\r\n        setSelEmployees(newSelected);\r\n    }\r\n\r\n    const isSelected = (id) => selEmployees.findIndex(e => e.id == id) !== -1;\r\n\r\n    const handleAllertClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAllertProps({ ...allertProps, open: false });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar open={allertProps.open} autoHideDuration={4000} onClose={handleAllertClose}>\r\n                <Alert onClose={handleAllertClose} severity={allertProps.type}>\r\n                    {allertProps.text}\r\n                </Alert>\r\n            </Snackbar>\r\n\r\n            {employees === undefined ? <div></div> :\r\n                <Paper className={classes.root}>\r\n                    <div className={classes.tabTop}>\r\n                        {isSingle === undefined ?\r\n                            <h2 >Select Team Members:</h2> :\r\n                            <h2 >Select Team Leader:</h2>\r\n                        }\r\n                        <Button\r\n                            disabled={selEmployees.length <= 0}\r\n                            variant=\"contained\" color=\"primary\"\r\n                            onClick={hendleAddMembers}\r\n                        >\r\n                            Add Selected\r\n                        </Button>\r\n                    </div>\r\n                    <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                    <Toolbar className={classes.searchBox}>\r\n                        <DarkTextField\r\n                            onChange={handleChangeSearchParams}\r\n                            label='Search...'\r\n                            name='searchInput'\r\n                        />\r\n                        <DarkSelect\r\n                            label=\"Order by\"\r\n                            name=\"orderBy\"\r\n                            collection={orderOptions}\r\n                            value={searchParams.orderBy}\r\n                            onChange={handleChangeSearchParams}\r\n                        />\r\n                        <DarkSelect\r\n                            label=\"Position\"\r\n                            name=\"positionSelect\"\r\n                            collection={positions}\r\n                            value={searchParams.position}\r\n                            onChange={handleChangeSearchParams}\r\n                        />\r\n                        <DarkSelect\r\n                            label=\"Seniority\"\r\n                            name=\"senioritySelect\"\r\n                            collection={seniorityLvs}\r\n                            value={searchParams.seniority}\r\n                            onChange={handleChangeSearchParams}\r\n                        />\r\n                        <DarkSelect\r\n                            label=\"Department\"\r\n                            name=\"departmentSelect\"\r\n                            collection={departments}\r\n                            value={searchParams.department}\r\n                            onChange={handleChangeSearchParams}\r\n                        />\r\n                        <DarkSelect\r\n                            label=\"Work Type\"\r\n                            name=\"isRemote\"\r\n                            collection={remoteOptions}\r\n                            value={searchParams.isRemote}\r\n                            onChange={handleChangeSearchParams}\r\n                        />\r\n                        <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>Search</Button>\r\n                    </Toolbar>\r\n                    <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader size=\"small\">\r\n                            <TableHead className={classes.tabHead}>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Seniority\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody className={classes.tab}>\r\n                                {employees.map((employee, index) => {\r\n                                    const isItemSelected = isSelected(employee.id);\r\n                                    return (\r\n                                        <TableRow\r\n                                            hover\r\n                                            key={index}\r\n                                            role=\"checkbox\"\r\n                                            selected={isItemSelected}\r\n                                            onClick={(e) => handleRowClick(e, employee)}\r\n                                        >\r\n                                            <StyledTableCell align=\"center\">\r\n                                                <Checkbox\r\n                                                    checked={isItemSelected}\r\n                                                />\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {employee.id}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {employee.person.name}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {employee.person.surname}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {employee.person.email}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {employee.position.name}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {employee.seniority}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {employee.department.name}\r\n                                            </StyledTableCell>\r\n                                            <StyledTableCell align=\"center\">\r\n                                                {employee.remoteWork === true ?\r\n                                                    <CheckCircleIcon /> : <CloseIcon />}\r\n                                            </StyledTableCell>\r\n                                        </TableRow>\r\n                                    )\r\n                                })}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\r\n                        {selEmployees.length <= 0 ? <div></div> :\r\n                            <div style={{ display: 'flex', marginTop: '8px' }}>\r\n                                <h3 style={{ margin: '6px 0 6px 10px' }}>{'Selected: ' + selEmployees.length}</h3>\r\n                                <Fab className={classes.selButton} color=\"primary\" onClick={() => setEmployees(selEmployees)}><VisibilityIcon /></Fab>\r\n                                <Fab className={classes.selButton} color=\"primary\" onClick={() => setSelEmployees([])}><ClearIcon /></Fab>\r\n                            </div>\r\n\r\n                        }\r\n                        <TablePagination\r\n                            className={classes.pagination}\r\n                            rowsPerPageOptions={[9, 18, 25, 32]}\r\n                            component=\"div\"\r\n                            count={totalItems}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                        />\r\n                    </div>\r\n                </Paper>\r\n            }\r\n\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default AddTeamMembers;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\CreateTeam.js",["185","186","187","188"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DarkTextField, DarkSelect, DarkChipList } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals';\r\nimport AddTeamMembers from './AddTeamMembers';\r\n\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        paddingLeft: '18px',\r\n        \"& h3\": {\r\n            margin: '6px 18px 0 0',\r\n        },\r\n        \"& h4\": {\r\n            margin: '0px',\r\n            marginRight: '18px',\r\n        },\r\n        \"& span\": {\r\n            color: theme.palette.text.secondary\r\n        }\r\n    },\r\n    box: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        background: theme.palette.grey[800],\r\n        padding: '8px',\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '4px'\r\n    },\r\n    steper: {\r\n        padding: '8px',\r\n        margin: '12px 0'\r\n    },\r\n    stepButtons: {\r\n        display: 'flex',\r\n\r\n        \"& Button\": {\r\n            width: '120px',\r\n            margin: '4px 8px'\r\n        }\r\n    },\r\n    stepContent: {\r\n        padding: '0'\r\n    }\r\n}));\r\n\r\nconst CreateTeam = () => {\r\n    const classes = useStyles();\r\n    const [team, setTeam] = useState({ name: '', members: [] });\r\n    const [activeStep, setActiveStep] = useState(0);\r\n    const steps = ['Select Team Leader', 'Select Team Members', 'Final'];\r\n\r\n\r\n    function getStepContent(step) {\r\n        switch (step) {\r\n            case 0:\r\n                return (\r\n                    <AddTeamMembers\r\n                        isSingle={true}\r\n                        selected={team.teamLeader}\r\n                        onSelectionConfirm={onTeamLeaderSelected}\r\n                    />);\r\n            case 1:\r\n                return (<div>\r\n                    <AddTeamMembers\r\n                        selected={team.members}\r\n                        onSelectionConfirm={onTeamMembersSelected}\r\n                    /></div>);\r\n            case 2:\r\n                return (TeamPreview());\r\n        }\r\n    }\r\n\r\n    const TeamPreview = () => {\r\n        return (\r\n            <div className={classes.box} style={{ marginTop: '1rem' }}>\r\n                <div className={classes.title}>\r\n                    <h3 >{'Team Name:  '}<span>{team.name}</span> </h3>\r\n                    <h3 >{'Team Members: '}<span>{team.members.length}</span> </h3>\r\n                </div>\r\n                <div className={classes.title} >\r\n                    <h3 >{'Team Leader:  '}</h3>\r\n                    {team.teamLeader.person === undefined ? null :\r\n                        <div style={{ display: 'flex', flexWrap: 'wrap', marginRight: '8px' }}>\r\n                            <h4 >{'Name: '}\r\n                                <span>\r\n                                    {`${team.teamLeader.person.name} ` +\r\n                                        `${team.teamLeader.person.surname}`}\r\n                                </span>\r\n                            </h4>\r\n                            <h4>{'Position: '}\r\n                                <span>\r\n                                    {`${team.teamLeader.seniority} ` +\r\n                                        `${team.teamLeader.position.name}`}\r\n                                </span>\r\n                            </h4>\r\n                            <h4>{'Department: '}\r\n                                <span>\r\n                                    {`${team.teamLeader.department.name}`}\r\n                                </span>\r\n                            </h4>\r\n                            <h4 >{'Email: '}\r\n                                <span>\r\n                                    {`${team.teamLeader.person.email}`}\r\n                                </span>\r\n                            </h4>\r\n                            <h4>{'Phone: '}\r\n                                <span>\r\n                                    {`${team.teamLeader.person.phoneNumber}`}\r\n                                </span>\r\n                            </h4>\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"8px 0\" }} />\r\n                <Button\r\n                    style={{ margin: '8px auto', width: '20%' }}\r\n                    onClick={handleCreateTeam}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                >\r\n                    Create Team\r\n                </Button>\r\n            </div>\r\n        );\r\n    };\r\n\r\n    const handleCreateTeam = async () => {\r\n        const requestOptions = {\r\n            method: 'Post',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(team)\r\n        };\r\n        await fetch(APIURL + `teams`, requestOptions).then(data => {\r\n            console.log(data);\r\n        }, (err) => {\r\n            console.log(err)\r\n        });\r\n    }\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) =>\r\n            activeStep !== steps.length - 1 ? prevActiveStep + 1 :\r\n                steps.length - 1);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    const onTeamLeaderSelected = (leader) => {\r\n        setTeam({ ...team, teamLeader: leader[0] })\r\n    }\r\n    const onTeamMembersSelected = (members) => {\r\n        setTeam({ ...team, members: members })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <div className={classes.mainConteiner}>\r\n\r\n                <div className={classes.box}>\r\n                    <div className={classes.title}>\r\n                        <h3 >Create New Team</h3>\r\n                    </div>\r\n                    <DarkTextField\r\n                        label=\"Team Name\"\r\n                        name=\"teamName\"\r\n                        onChange={(e) => { setTeam({ ...team, name: e.target.value }) }}\r\n                    />\r\n                    <Stepper className={classes.steper} activeStep={activeStep}>\r\n                        {steps.map((label, index) =>\r\n\r\n                            <Step key={label}>\r\n                                <StepLabel>{label}</StepLabel>\r\n                            </Step>\r\n                        )}\r\n                    </Stepper>\r\n                    <div className={classes.stepButtons}>\r\n                        <Button\r\n                            disabled={activeStep === 0}\r\n                            onClick={handleBack}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            Back\r\n                        </Button>\r\n                        <Button\r\n                            disabled={\r\n                                activeStep === 0 && team.teamLeader === undefined ? true :\r\n                                    activeStep === 1 && team.members.length <= 0 ? true : false\r\n                            }\r\n                            onClick={handleNext}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >\r\n                            {activeStep !== steps.length - 1 ? 'Next' : 'Finish'}\r\n                        </Button>\r\n                    </div>\r\n\r\n                </div>\r\n                <div className={classes.stepContent}>\r\n                    {getStepContent(activeStep)}\r\n                </div>\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default CreateTeam;\r\n","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Manager.js",["189"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DarkTextField, ConfirmDialog } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListItemSecondaryAction from '@material-ui/core/ListItemSecondaryAction';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainConteiner: {\r\n        display: 'flex',\r\n    },\r\n    listComponent: {\r\n        margin: '8px',\r\n        width: '100%',\r\n        minHeight: '610px',\r\n        maxHeight: '610px',\r\n        paddingTop: 0,\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: 'white',\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '4px',\r\n        display: \"flex\",\r\n        flexDirection: 'column',\r\n        \"& span\": {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            marginRight: '4px'\r\n        }\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        padding: '6px 0',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '3px 3px 0 0',\r\n        width: '100%',\r\n    },\r\n    inputBox: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        width: '98%',\r\n        paddingRight: '8px',\r\n        \"& .MuiFormControl-root\": { width: '100%' }\r\n    }\r\n}));\r\n\r\nconst HR_Manager = () => {\r\n    const classes = useStyles();\r\n    const [positions, setPositions] = useState([]);\r\n    const [departments, setDepartments] = useState([]);\r\n    const [newItem, setNewItem] = useState({ type: \"\", text: \"\" });\r\n    const [toEdit, setToEdit] = useState({ id: 0, text: '', element: '' });\r\n    const [delDialogProps, setDelDialogProps] = useState({\r\n        open: false,\r\n        id: 0,\r\n        item: { name: '' },\r\n        itemType: '',\r\n    });\r\n\r\n    useEffect(() => {\r\n        getData();\r\n    }, []);\r\n\r\n    const getData = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setDepartments(data));\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setPositions(data));\r\n    };\r\n\r\n    const hendleCreate = () => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ id: 0, name: newItem.text })\r\n        };\r\n\r\n        if (newItem.type === 'department') {\r\n            fetch(APIURL + `departments`, requestOptions).then(data => {\r\n                getData()\r\n            });\r\n            return;\r\n        }\r\n        fetch(APIURL + `positions`, requestOptions).then(data => {\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const hendleEdit = () => {\r\n        const requestOptions = {\r\n            method: 'PUT',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({ id: toEdit.id, name: toEdit.text })\r\n        };\r\n\r\n        if (toEdit.element === \"department\") {\r\n            fetch(APIURL +\r\n                `departments/${toEdit.id}`,\r\n                requestOptions\r\n            ).then(data => {\r\n                setToEdit({ ...toEdit, id: 0 })\r\n                getData()\r\n            });\r\n            return;\r\n        }\r\n        fetch(APIURL +\r\n            `positions/${toEdit.id}`,\r\n            requestOptions\r\n        ).then(data => {\r\n            setToEdit({ ...toEdit, id: 0 })\r\n            getData()\r\n        });\r\n    };\r\n\r\n    const hendleDelete = async () => {\r\n        const requestOptions = {\r\n            method: 'Delete',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n\r\n        if (delDialogProps.itemType === 'Department') {\r\n            await fetch(APIURL +\r\n                `departments/${delDialogProps.item.id}`,\r\n                requestOptions\r\n            ).then(data => getData());\r\n            return;\r\n        }\r\n        await fetch(APIURL +\r\n            `positions/${delDialogProps.item.id}`,\r\n            requestOptions\r\n        ).then(data => getData());\r\n    };\r\n\r\n    const delDialogOpen = () => {\r\n        setDelDialogProps({ ...delDialogProps, open: !delDialogProps.open })\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mainConteiner}>\r\n            <ConfirmDialog\r\n                title={delDialogProps.item.name + \" \" + delDialogProps.itemType}\r\n                open={delDialogProps.open}\r\n                setOpen={delDialogOpen}\r\n                onConfirm={hendleDelete}\r\n            >\r\n                {'Are you sure you want to delete ' + delDialogProps.itemType.toLowerCase() + '?'}\r\n            </ConfirmDialog>\r\n            <List component=\"nav\" className={classes.listComponent}>\r\n                <div className={classes.title}>\r\n                    <Typography variant=\"h6\" style={{ marginLeft: '16px' }}>\r\n                        Departments:\r\n                    </Typography>\r\n\r\n                </div>\r\n                <div className={classes.inputBox}>\r\n                    <DarkTextField\r\n                        label=\"New Department\"\r\n                        onChange={(e) => setNewItem({ ...newItem, type: \"department\", text: e.target.value })}\r\n                    />\r\n                    <Button\r\n                        style={{ marginLeft: '15px' }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={hendleCreate}\r\n                    >Create</Button>\r\n                </div>\r\n                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                {departments.length <= 0 ? null :\r\n                    <div style={{ overflow: 'auto', }}>\r\n                        {departments.map((item, index) => (\r\n                            <div key={\"position\" + item.id}>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary={\r\n                                            <React.Fragment>\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body1\"\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    {'ID: '}\r\n                                                </Typography>\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body1\"\r\n                                                    color=\"textSecondary\"\r\n                                                >\r\n                                                    {item.id}\r\n                                                </Typography>\r\n\r\n                                                <Typography style={{ marginLeft: '18px' }}\r\n                                                    component=\"span\"\r\n                                                    variant=\"body1\"\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    {'Name: '}\r\n                                                </Typography>\r\n                                                {toEdit.id === item.id ?\r\n                                                    <div className={classes.inputBox}>\r\n                                                        <DarkTextField\r\n                                                            label=\"Department Name\"\r\n                                                            name=\"positionTF\"\r\n                                                            defaultValue={item.name}\r\n                                                            onChange={(e) => setToEdit({\r\n                                                                ...toEdit,\r\n                                                                text: e.target.value,\r\n                                                                element: 'department'\r\n                                                            })}\r\n                                                        />\r\n                                                        <Button\r\n                                                            style={{ marginLeft: '4px' }}\r\n                                                            variant=\"contained\"\r\n                                                            color=\"primary\"\r\n                                                            onClick={hendleEdit}\r\n                                                        >edit</Button>\r\n                                                    </div> :\r\n                                                    <Typography\r\n                                                        component=\"span\"\r\n                                                        variant=\"body1\"\r\n                                                        color=\"textSecondary\"\r\n                                                    >\r\n                                                        {item.name}\r\n                                                    </Typography>\r\n                                                }\r\n                                            </React.Fragment>}\r\n                                    />\r\n                                    <ListItemSecondaryAction>\r\n                                        {toEdit.id === item.id ? null :\r\n                                            <IconButton edge=\"end\" onClick={() => setToEdit({ ...toEdit, id: item.id })}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                        }\r\n                                        <IconButton edge=\"end\" onClick={() => setDelDialogProps({\r\n                                            itemType: 'Department',\r\n                                            item: item,\r\n                                            open: true\r\n                                        })}>\r\n                                            <DeleteIcon />\r\n                                        </IconButton>\r\n                                    </ListItemSecondaryAction>\r\n                                </ListItem>\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                }\r\n            </List>\r\n            <List component=\"nav\" className={classes.listComponent}>\r\n                <div className={classes.title}>\r\n                    <Typography variant=\"h6\" style={{ marginLeft: '16px' }}>\r\n                        Positions:\r\n                    </Typography>\r\n\r\n                </div>\r\n                <div className={classes.inputBox}>\r\n                    <DarkTextField\r\n                        label=\"New Position\"\r\n                        onChange={(e) => setNewItem({ ...newItem, type: \"position\", text: e.target.value })}\r\n                    />\r\n                    <Button\r\n                        style={{ marginLeft: '15px' }}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={hendleCreate}\r\n                    >Create</Button>\r\n                </div>\r\n                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                {positions.length <= 0 ? null :\r\n                    <div style={{ overflow: 'auto', }}>\r\n                        {positions.map((item, index) => (\r\n                            <div key={\"position\" + item.id}>\r\n                                <ListItem>\r\n                                    <ListItemText\r\n                                        primary={\r\n                                            <React.Fragment>\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body1\"\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    {'ID: '}\r\n                                                </Typography>\r\n                                                <Typography\r\n                                                    component=\"span\"\r\n                                                    variant=\"body1\"\r\n                                                    color=\"textSecondary\"\r\n                                                >\r\n                                                    {item.id}\r\n                                                </Typography>\r\n\r\n                                                <Typography style={{ marginLeft: '18px' }}\r\n                                                    component=\"span\"\r\n                                                    variant=\"body1\"\r\n                                                    color=\"textPrimary\"\r\n                                                >\r\n                                                    {'Name: '}\r\n                                                </Typography>\r\n                                                {toEdit.id === item.id ?\r\n                                                    <div className={classes.inputBox}>\r\n                                                        <DarkTextField\r\n                                                            label=\"Position Name\"\r\n                                                            defaultValue={item.name}\r\n                                                            onChange={(e) => setToEdit({\r\n                                                                ...toEdit,\r\n                                                                text: e.target.value,\r\n                                                                element: 'position'\r\n                                                            })}\r\n                                                        />\r\n                                                        <Button\r\n                                                            style={{ marginLeft: '4px' }}\r\n                                                            variant=\"contained\"\r\n                                                            color=\"primary\"\r\n                                                            onClick={hendleEdit}\r\n                                                        >edit</Button>\r\n                                                    </div> :\r\n                                                    <Typography\r\n                                                        component=\"span\"\r\n                                                        variant=\"body1\"\r\n                                                        color=\"textSecondary\"\r\n                                                    >\r\n                                                        {item.name}\r\n                                                    </Typography>\r\n                                                }\r\n                                            </React.Fragment>\r\n                                        }\r\n                                    />\r\n                                    <ListItemSecondaryAction>\r\n                                        {toEdit.id === item.id ? null :\r\n                                            <IconButton edge=\"end\" onClick={() => setToEdit({ ...toEdit, id: item.id })}>\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                        }\r\n                                        <IconButton edge=\"end\" onClick={() => setDelDialogProps({\r\n                                            itemType: 'Position',\r\n                                            item: item,\r\n                                            open: true\r\n                                        })}>\r\n                                            <DeleteIcon />\r\n                                        </IconButton>\r\n                                    </ListItemSecondaryAction>\r\n                                </ListItem>\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                            </div>\r\n                        ))}\r\n                    </div>\r\n                }\r\n            </List>\r\n        </div>\r\n    )\r\n};\r\nexport default HR_Manager;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\UsersList.js",["190","191","192","193","194"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../../Services/Globals';\r\nimport { authHeader } from '../../Services/AuthService'\r\nimport { Link } from \"react-router-dom\";\r\nimport { DarkTextField, DarkSelect, ConfirmDialog } from '../GlobalComponents';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1rem',\r\n        width: '100%',\r\n    },\r\n    tabTop: {\r\n        display: 'flex',\r\n        padding: '9px',\r\n        justifyContent: 'space-between',\r\n        \"& h2\": {\r\n            margin: 0,\r\n        },\r\n        \"& a\": {\r\n            textDecoration: \"none\",\r\n            color: \"white\",\r\n        }\r\n    },\r\n    container: {\r\n        maxHeight: 550,\r\n    },\r\n    pagination: {\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800],\r\n    },\r\n    searchBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.8rem\",\r\n        paddingRight: \"1.8rem\",\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n}));\r\n\r\n\r\nconst UsersList = () => {\r\n    const classes = useStyles();\r\n    const [users, setUsers] = useState([]);\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const [pagination, setPagination] = useState({\r\n        page: 0,\r\n        size: 9,\r\n        totalItems: 1,\r\n        totalPages: 1\r\n    });\r\n    const firstRecord = { id: 0, name: \"All\" };\r\n    const [orderOptions] = useState([\r\n        { id: \"name\", name: \"Name\" },\r\n        { id: \"surname\", name: \"Surame\" },\r\n        { id: \"department\", name: \"Department\" },\r\n        { id: \"position\", name: \"Position\" },\r\n        { id: \"date-asc\", name: \"Date-asc\" },\r\n        { id: \"date-desc\", name: \"Date-desc\" }\r\n    ]);\r\n    const [remoteOptions] = useState([\r\n        { id: '', name: \"All\" },\r\n        { id: true, name: \"Remote\" },\r\n        { id: false, name: \"Office\" },\r\n    ]);\r\n    const [seniorityLvs] = useState([\r\n        firstRecord,\r\n        { id: 1, name: \"Junior\" },\r\n        { id: 2, name: \"Regular\" },\r\n        { id: 3, name: \"Senior\" },\r\n    ]);\r\n    const [searchParams, setSearchParams] = useState({\r\n        searchString: '',\r\n        department: firstRecord,\r\n        position: firstRecord,\r\n        seniority: firstRecord,\r\n        orderBy: orderOptions[4],\r\n        isRemote: remoteOptions[0]\r\n    });\r\n\r\n    useEffect(() => {\r\n        console.log(searchParams);\r\n        getUsers(\r\n            pagination.page,\r\n            pagination.size\r\n        );\r\n    }, [pagination.page, pagination.size]);\r\n\r\n    useEffect(() => {\r\n        getSearchProps()\r\n    }, []);\r\n\r\n    const getSearchProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setDepartments(data) });\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setPositions(data) });\r\n    }\r\n\r\n    const getUsers = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: new Headers({ 'Content-Type': 'application/json', 'Authorization': authHeader() }),\r\n        };\r\n\r\n        await fetch(APIURL +\r\n            `users?page=${page + 1}&size=${size}&order=${searchParams.orderBy.id}` +\r\n            `&search=${searchParams.searchString}` +\r\n            `&department=${searchParams.department.id}` +\r\n            `&position=${searchParams.position.id}` +\r\n            `&seniority=${searchParams.seniority.id === 0 ? '' : searchParams.seniority.name}` +\r\n            `&isremote=${searchParams.isRemote.id}`,\r\n            requestOptions)\r\n            .then(response => response.json())\r\n            .then((data) => {\r\n                setPagination({\r\n                    ...pagination,\r\n                    totalItems: data.totalItems,\r\n                    totalPages: data.totalPages,\r\n                })\r\n                setUsers(data.items);\r\n            });\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        console.log(newPage);\r\n        setPagination({ ...pagination, page: newPage });\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setPagination({\r\n            ...pagination,\r\n            size: event.target.value\r\n        });\r\n    };\r\n\r\n    const handleChangeSearchParams = event => {\r\n        setSearchParams({\r\n            searchParams,\r\n            searchString: event.target.name === \"searchInput\" ? event.target.value : searchParams.searchString,\r\n            department: event.target.name === \"departmentSelect\" ? event.target.value : searchParams.department,\r\n            position: event.target.name === \"positionSelect\" ? event.target.value : searchParams.position,\r\n            seniority: event.target.name === \"senioritySelect\" ? event.target.value : searchParams.seniority,\r\n            orderBy: event.target.name === \"orderBy\" ? event.target.value : searchParams.orderBy,\r\n            isRemote: event.target.name === \"isRemote\" ? event.target.value : searchParams.isRemote,\r\n        });\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        getUsers(0, pagination.size)\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <Toolbar className={classes.searchBox}>\r\n                <h3 className={classes.whiteText}>Employees</h3>\r\n                <DarkTextField\r\n                    onChange={handleChangeSearchParams}\r\n                    label='Search...'\r\n                    name='searchInput'\r\n                />\r\n                <DarkSelect\r\n                    label=\"Department\"\r\n                    name=\"departmentSelect\"\r\n                    collection={departments}\r\n                    value={searchParams.department}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Position\"\r\n                    name=\"positionSelect\"\r\n                    collection={positions}\r\n                    value={searchParams.position}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Seniority\"\r\n                    name=\"senioritySelect\"\r\n                    collection={seniorityLvs}\r\n                    value={searchParams.seniority}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Order by\"\r\n                    name=\"orderBy\"\r\n                    collection={orderOptions}\r\n                    value={searchParams.orderBy}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Work Type\"\r\n                    name=\"isRemote\"\r\n                    collection={remoteOptions}\r\n                    value={searchParams.isRemote}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>Search</Button>\r\n            </Toolbar>\r\n\r\n            {users === undefined ? <div></div> :\r\n                <Paper className={classes.root}>\r\n                    <div className={classes.tabTop}>\r\n                        <h2 >Users List:</h2>\r\n                        <Link to=\"/main/user-form\">\r\n                            <Button\r\n                                variant=\"contained\"\r\n                                color=\"secondary\"\r\n\r\n                                endIcon={<AddCircleIcon />}\r\n                                onClick={handleSearch}\r\n                            >\r\n                                New User\r\n                            </Button>\r\n                        </Link>\r\n                    </div>\r\n                    <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Username\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Seniority\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Action\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {users.map((user, index) => (\r\n                                    <TableRow hover key={index}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.username}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.seniority}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {user.employeeDTO.department.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${user.employeeDTO.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                            <Link to={{ pathname: `/main/user-form`, user: { user } }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"edit\">\r\n                                                    <EditIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                            <IconButton\r\n                                                className={classes.button}\r\n                                                size=\"small\"\r\n                                                onClick={() => console.log('todo')}\r\n                                            >\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        className={classes.pagination}\r\n                        rowsPerPageOptions={pagination.totalPages < 10 ?\r\n                            [pagination.totalPages] :\r\n                            [10, 25, 35]}\r\n                        component=\"div\"\r\n                        count={pagination.totalItems}\r\n                        rowsPerPage={pagination.size}\r\n                        page={pagination.page}\r\n                        onPageChange={handleChangePage}\r\n                        onRowsPerPageChange={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            }\r\n        </div>\r\n    )\r\n}\r\nexport default UsersList;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\UserForm.js",["195","196"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\Profile.js",["197","198"],{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","severity":1,"message":"204","line":2,"column":17,"nodeType":"205","messageId":"206","endLine":2,"endColumn":26},{"ruleId":"203","severity":1,"message":"207","line":2,"column":28,"nodeType":"205","messageId":"206","endLine":2,"endColumn":36},{"ruleId":"203","severity":1,"message":"208","line":3,"column":50,"nodeType":"205","messageId":"206","endLine":3,"endColumn":54},{"ruleId":"209","severity":1,"message":"210","line":289,"column":1,"nodeType":"211","endLine":295,"endColumn":3},{"ruleId":"203","severity":1,"message":"204","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":26},{"ruleId":"203","severity":1,"message":"212","line":6,"column":8,"nodeType":"205","messageId":"206","endLine":6,"endColumn":28},{"ruleId":"213","severity":1,"message":"214","line":84,"column":9,"nodeType":"215","messageId":"216","endLine":91,"endColumn":10},{"ruleId":"217","severity":1,"message":"218","line":174,"column":29,"nodeType":"219","endLine":174,"endColumn":45},{"ruleId":"217","severity":1,"message":"220","line":177,"column":29,"nodeType":"219","endLine":177,"endColumn":43},{"ruleId":"217","severity":1,"message":"221","line":198,"column":29,"nodeType":"219","endLine":198,"endColumn":47},{"ruleId":"203","severity":1,"message":"222","line":9,"column":8,"nodeType":"205","messageId":"206","endLine":9,"endColumn":17},{"ruleId":"223","severity":1,"message":"224","line":113,"column":9,"nodeType":"225","messageId":"226","endLine":118,"endColumn":10,"fix":"227"},{"ruleId":"223","severity":1,"message":"228","line":119,"column":9,"nodeType":"225","messageId":"226","endLine":124,"endColumn":10,"fix":"229"},{"ruleId":"223","severity":1,"message":"230","line":125,"column":9,"nodeType":"225","messageId":"226","endLine":130,"endColumn":10,"fix":"231"},{"ruleId":"232","severity":1,"message":"233","line":138,"column":8,"nodeType":"234","endLine":138,"endColumn":10,"suggestions":"235"},{"ruleId":"213","severity":1,"message":"214","line":150,"column":21,"nodeType":"215","messageId":"216","endLine":160,"endColumn":22},{"ruleId":"232","severity":1,"message":"236","line":164,"column":8,"nodeType":"234","endLine":164,"endColumn":20,"suggestions":"237"},{"ruleId":"213","severity":1,"message":"214","line":223,"column":9,"nodeType":"215","messageId":"216","endLine":246,"endColumn":10},{"ruleId":"232","severity":1,"message":"238","line":126,"column":8,"nodeType":"234","endLine":126,"endColumn":27,"suggestions":"239"},{"ruleId":"232","severity":1,"message":"240","line":130,"column":8,"nodeType":"234","endLine":130,"endColumn":10,"suggestions":"241"},{"ruleId":"242","severity":1,"message":"243","line":147,"column":52,"nodeType":"244","messageId":"245","endLine":147,"endColumn":53},{"ruleId":"232","severity":1,"message":"246","line":59,"column":8,"nodeType":"234","endLine":59,"endColumn":10,"suggestions":"247"},{"ruleId":"203","severity":1,"message":"248","line":16,"column":8,"nodeType":"205","messageId":"206","endLine":16,"endColumn":14},{"ruleId":"242","severity":1,"message":"243","line":131,"column":52,"nodeType":"244","messageId":"245","endLine":131,"endColumn":53},{"ruleId":"203","severity":1,"message":"249","line":12,"column":11,"nodeType":"205","messageId":"206","endLine":12,"endColumn":29},{"ruleId":"203","severity":1,"message":"250","line":4,"column":10,"nodeType":"205","messageId":"206","endLine":4,"endColumn":24},{"ruleId":"232","severity":1,"message":"251","line":232,"column":8,"nodeType":"234","endLine":232,"endColumn":10,"suggestions":"252"},{"ruleId":"232","severity":1,"message":"253","line":238,"column":8,"nodeType":"234","endLine":238,"endColumn":30,"suggestions":"254"},{"ruleId":"213","severity":1,"message":"214","line":307,"column":13,"nodeType":"215","messageId":"216","endLine":344,"endColumn":14},{"ruleId":"203","severity":1,"message":"255","line":4,"column":10,"nodeType":"205","messageId":"206","endLine":4,"endColumn":18},{"ruleId":"203","severity":1,"message":"256","line":4,"column":20,"nodeType":"205","messageId":"206","endLine":4,"endColumn":36},{"ruleId":"203","severity":1,"message":"257","line":14,"column":11,"nodeType":"205","messageId":"206","endLine":14,"endColumn":18},{"ruleId":"232","severity":1,"message":"258","line":20,"column":8,"nodeType":"234","endLine":20,"endColumn":10,"suggestions":"259"},{"ruleId":"203","severity":1,"message":"260","line":3,"column":25,"nodeType":"205","messageId":"206","endLine":3,"endColumn":35},{"ruleId":"232","severity":1,"message":"261","line":141,"column":8,"nodeType":"234","endLine":141,"endColumn":10,"suggestions":"262"},{"ruleId":"232","severity":1,"message":"263","line":148,"column":8,"nodeType":"234","endLine":148,"endColumn":18,"suggestions":"264"},{"ruleId":"232","severity":1,"message":"263","line":162,"column":8,"nodeType":"234","endLine":162,"endColumn":27,"suggestions":"265"},{"ruleId":"266","severity":1,"message":"267","line":172,"column":41,"nodeType":"268","messageId":"269","endLine":172,"endColumn":43},{"ruleId":"266","severity":1,"message":"267","line":199,"column":40,"nodeType":"268","messageId":"269","endLine":199,"endColumn":42},{"ruleId":"223","severity":1,"message":"270","line":111,"column":13,"nodeType":"225","messageId":"226","endLine":111,"endColumn":49,"fix":"271"},{"ruleId":"232","severity":1,"message":"272","line":113,"column":8,"nodeType":"234","endLine":113,"endColumn":29,"suggestions":"273"},{"ruleId":"203","severity":1,"message":"274","line":11,"column":8,"nodeType":"205","messageId":"206","endLine":11,"endColumn":13},{"ruleId":"203","severity":1,"message":"275","line":17,"column":8,"nodeType":"205","messageId":"206","endLine":17,"endColumn":23},{"ruleId":"203","severity":1,"message":"248","line":19,"column":8,"nodeType":"205","messageId":"206","endLine":19,"endColumn":14},{"ruleId":"232","severity":1,"message":"276","line":106,"column":8,"nodeType":"234","endLine":106,"endColumn":10,"suggestions":"277"},{"ruleId":"232","severity":1,"message":"278","line":117,"column":8,"nodeType":"234","endLine":117,"endColumn":22,"suggestions":"279"},{"ruleId":"242","severity":1,"message":"243","line":126,"column":30,"nodeType":"244","messageId":"245","endLine":126,"endColumn":31},{"ruleId":"266","severity":1,"message":"267","line":128,"column":43,"nodeType":"268","messageId":"269","endLine":128,"endColumn":45},{"ruleId":"266","severity":1,"message":"267","line":164,"column":31,"nodeType":"268","messageId":"269","endLine":164,"endColumn":33},{"ruleId":"280","severity":1,"message":"281","line":265,"column":54,"nodeType":"282","messageId":"283","endLine":265,"endColumn":55},{"ruleId":"203","severity":1,"message":"284","line":2,"column":22,"nodeType":"205","messageId":"206","endLine":2,"endColumn":32},{"ruleId":"232","severity":1,"message":"285","line":133,"column":8,"nodeType":"234","endLine":133,"endColumn":10,"suggestions":"286"},{"ruleId":"203","severity":1,"message":"287","line":2,"column":37,"nodeType":"205","messageId":"206","endLine":2,"endColumn":50},{"ruleId":"232","severity":1,"message":"238","line":153,"column":8,"nodeType":"234","endLine":153,"endColumn":27,"suggestions":"288"},{"ruleId":"232","severity":1,"message":"240","line":157,"column":8,"nodeType":"234","endLine":157,"endColumn":10,"suggestions":"289"},{"ruleId":"242","severity":1,"message":"243","line":174,"column":52,"nodeType":"244","messageId":"245","endLine":174,"endColumn":53},{"ruleId":"290","severity":1,"message":"291","line":260,"column":64,"nodeType":"282","messageId":"292","endLine":260,"endColumn":66},{"ruleId":"290","severity":1,"message":"291","line":277,"column":65,"nodeType":"282","messageId":"292","endLine":277,"endColumn":67},{"ruleId":"203","severity":1,"message":"204","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":26},{"ruleId":"203","severity":1,"message":"260","line":3,"column":25,"nodeType":"205","messageId":"206","endLine":3,"endColumn":35},{"ruleId":"203","severity":1,"message":"293","line":3,"column":37,"nodeType":"205","messageId":"206","endLine":3,"endColumn":49},{"ruleId":"213","severity":1,"message":"214","line":62,"column":9,"nodeType":"215","messageId":"216","endLine":78,"endColumn":10},{"ruleId":"203","severity":1,"message":"294","line":9,"column":8,"nodeType":"205","messageId":"206","endLine":9,"endColumn":21},{"ruleId":"203","severity":1,"message":"287","line":6,"column":37,"nodeType":"205","messageId":"206","endLine":6,"endColumn":50},{"ruleId":"203","severity":1,"message":"295","line":23,"column":8,"nodeType":"205","messageId":"206","endLine":23,"endColumn":17},{"ruleId":"203","severity":1,"message":"296","line":24,"column":8,"nodeType":"205","messageId":"206","endLine":24,"endColumn":23},{"ruleId":"232","severity":1,"message":"297","line":131,"column":8,"nodeType":"234","endLine":131,"endColumn":42,"suggestions":"298"},{"ruleId":"232","severity":1,"message":"240","line":135,"column":8,"nodeType":"234","endLine":135,"endColumn":10,"suggestions":"299"},{"ruleId":"203","severity":1,"message":"204","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":26},{"ruleId":"203","severity":1,"message":"260","line":3,"column":25,"nodeType":"205","messageId":"206","endLine":3,"endColumn":35},{"ruleId":"203","severity":1,"message":"204","line":1,"column":17,"nodeType":"205","messageId":"206","endLine":1,"endColumn":26},{"ruleId":"203","severity":1,"message":"260","line":3,"column":25,"nodeType":"205","messageId":"206","endLine":3,"endColumn":35},"no-native-reassign",["300"],"no-negated-in-lhs",["301"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Link' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'CreateJobApplication' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-pascal-case","Imported JSX component HR_Dashboard must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","Imported JSX component HR_Manager must be in PascalCase or SCREAMING_SNAKE_CASE","Imported JSX component Team_Dashboard must be in PascalCase or SCREAMING_SNAKE_CASE","'CardMedia' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['requested'] found.","Property","unnecessarilyComputedProperty",{"range":"302","text":"303"},"Unnecessarily computed property ['inprogress'] found.",{"range":"304","text":"305"},"Unnecessarily computed property ['completed'] found.",{"range":"306","text":"307"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userID'. Either include it or remove the dependency array.","ArrayExpression",["308"],"React Hook useEffect has missing dependencies: 'adddItemsToColumn' and 'userID'. Either include them or remove the dependency array.",["309"],"React Hook useEffect has a missing dependency: 'getEmploees'. Either include it or remove the dependency array.",["310"],"React Hook useEffect has a missing dependency: 'getSearchProps'. Either include it or remove the dependency array.",["311"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["312"],"'Button' is defined but never used.","'PostJobApplication' is assigned a value but never used.","'getCurrentUser' is defined but never used.","React Hook useEffect has missing dependencies: 'loadTasksList', 'pagination.page', and 'pagination.size'. Either include them or remove the dependency array.",["313"],"React Hook useEffect has a missing dependency: 'props.teamId'. Either include it or remove the dependency array.",["314"],"'getTasks' is defined but never used.","'changeTaskStatus' is defined but never used.","'classes' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'getTeam'. Either include it or remove the dependency array.",["315"],"'DarkSelect' is defined but never used.","React Hook useEffect has a missing dependency: 'getMembers'. Either include it or remove the dependency array.",["316"],"React Hook useEffect has a missing dependency: 'task'. Either include it or remove the dependency array. You can also do a functional update 'setTask(t => ...)' if you only need 'task' in the 'setTask' call.",["317"],["318"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Unnecessarily computed property ['permissions'] found.",{"range":"319","text":"320"},"React Hook useEffect has a missing dependency: 'employee'. Either include it or remove the dependency array. You can also do a functional update 'setEmployee(e => ...)' if you only need 'employee' in the 'setEmployee' call.",["321"],"'Paper' is defined but never used.","'TablePagination' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["322"],"React Hook useEffect has a missing dependency: 'team.members'. Either include it or remove the dependency array.",["323"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'withStyles' is defined but never used.","React Hook useEffect has missing dependencies: 'loadTeams', 'pagination.page', and 'pagination.size'. Either include them or remove the dependency array.",["324"],"'ConfirmDialog' is defined but never used.",["325"],["326"],"eqeqeq","Expected '===' and instead saw '=='.","unexpected","'DarkChipList' is defined but never used.","'AddCircleIcon' is defined but never used.","'CloseIcon' is defined but never used.","'CheckCircleIcon' is defined but never used.","React Hook useEffect has missing dependencies: 'getUsers' and 'searchParams'. Either include them or remove the dependency array.",["327"],["328"],"no-global-assign","no-unsafe-negation",[3543,3556],"'requested'",[3710,3724],"'inprogress'",[3883,3896],"'completed'",{"desc":"329","fix":"330"},{"desc":"331","fix":"332"},{"desc":"333","fix":"334"},{"desc":"335","fix":"336"},{"desc":"337","fix":"338"},{"desc":"339","fix":"340"},{"desc":"341","fix":"342"},{"desc":"343","fix":"344"},{"desc":"345","fix":"346"},{"desc":"347","fix":"348"},{"desc":"349","fix":"350"},[3744,3759],"'permissions'",{"desc":"351","fix":"352"},{"desc":"353","fix":"354"},{"desc":"355","fix":"356"},{"desc":"357","fix":"358"},{"desc":"333","fix":"359"},{"desc":"335","fix":"360"},{"desc":"361","fix":"362"},{"desc":"335","fix":"363"},"Update the dependencies array to be: [userID]",{"range":"364","text":"365"},"Update the dependencies array to be: [adddItemsToColumn, taskFilter, userID]",{"range":"366","text":"367"},"Update the dependencies array to be: [getEmploees, page, rowsPerPage]",{"range":"368","text":"369"},"Update the dependencies array to be: [getSearchProps]",{"range":"370","text":"371"},"Update the dependencies array to be: [params.id]",{"range":"372","text":"373"},"Update the dependencies array to be: [loadTasksList, pagination.page, pagination.size]",{"range":"374","text":"375"},"Update the dependencies array to be: [props.teamId, selectedIndex, tasks]",{"range":"376","text":"377"},"Update the dependencies array to be: [getTeam]",{"range":"378","text":"379"},"Update the dependencies array to be: [getMembers]",{"range":"380","text":"381"},"Update the dependencies array to be: [subtasks, task]",{"range":"382","text":"383"},"Update the dependencies array to be: [employeesToAssign, task]",{"range":"384","text":"385"},"Update the dependencies array to be: [employee, employeePermissions]",{"range":"386","text":"387"},"Update the dependencies array to be: [getData]",{"range":"388","text":"389"},"Update the dependencies array to be: [currentTasks, team.members]",{"range":"390","text":"391"},"Update the dependencies array to be: [loadTeams, pagination.page, pagination.size]",{"range":"392","text":"393"},{"range":"394","text":"369"},{"range":"395","text":"371"},"Update the dependencies array to be: [getUsers, pagination.page, pagination.size, searchParams]",{"range":"396","text":"397"},{"range":"398","text":"371"},[4185,4187],"[userID]",[5090,5102],"[adddItemsToColumn, taskFilter, userID]",[4282,4301],"[getEmploees, page, rowsPerPage]",[4363,4365],"[getSearchProps]",[1569,1571],"[params.id]",[7664,7666],"[loadTasksList, pagination.page, pagination.size]",[7869,7891],"[props.teamId, selectedIndex, tasks]",[618,620],"[getTeam]",[4329,4331],"[getMembers]",[4452,4462],"[subtasks, task]",[4795,4814],"[employeesToAssign, task]",[3801,3822],"[employee, employeePermissions]",[3400,3402],"[getData]",[3762,3776],"[currentTasks, team.members]",[4356,4358],"[loadTeams, pagination.page, pagination.size]",[4970,4989],[5051,5053],[4287,4321],"[getUsers, pagination.page, pagination.size, searchParams]",[4383,4385]]