[{"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\index.js":"1","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\App.js":"2","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\reportWebVitals.js":"3","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\GlobalComponents.js":"4","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\AuthService.js":"5","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\MainComponent.js":"6","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\Globals.js":"7","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\StartPage.js":"8","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksColumns.js":"9","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\CreateEmployee.js":"10","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeList.js":"11","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeDetails.js":"12","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamManager.js":"13","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\LoginUser.js":"14","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Dashboard.js":"15","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\JobApplication\\CreateJobApplication.js":"16","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\TasksService.js":"17","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksList.js":"18","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamTasks.js":"19","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\CreateTask.js":"20"},{"size":242,"mtime":1626196431129,"results":"21","hashOfConfig":"22"},{"size":1025,"mtime":1642248061865,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":499162500000,"results":"24","hashOfConfig":"22"},{"size":8034,"mtime":1644833727098,"results":"25","hashOfConfig":"22"},{"size":2323,"mtime":1641899545325,"results":"26","hashOfConfig":"22"},{"size":8068,"mtime":1644837637025,"results":"27","hashOfConfig":"22"},{"size":70,"mtime":1641207518125,"results":"28","hashOfConfig":"22"},{"size":1991,"mtime":1644314466755,"results":"29","hashOfConfig":"22"},{"size":23762,"mtime":1644843193967,"results":"30","hashOfConfig":"22"},{"size":10170,"mtime":1642247462174,"results":"31","hashOfConfig":"22"},{"size":13503,"mtime":1642247462237,"results":"32","hashOfConfig":"22"},{"size":5266,"mtime":1642247462220,"results":"33","hashOfConfig":"22"},{"size":15673,"mtime":1643627016702,"results":"34","hashOfConfig":"22"},{"size":2655,"mtime":1642247952771,"results":"35","hashOfConfig":"22"},{"size":11157,"mtime":1643027982236,"results":"36","hashOfConfig":"22"},{"size":2650,"mtime":1642248358913,"results":"37","hashOfConfig":"22"},{"size":3612,"mtime":1644842967971,"results":"38","hashOfConfig":"22"},{"size":31902,"mtime":1644837079819,"results":"39","hashOfConfig":"22"},{"size":1175,"mtime":1643966113607,"results":"40","hashOfConfig":"22"},{"size":16770,"mtime":1644833727100,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},"yin7gd",{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"44"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"44"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"44"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"44"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":3,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":1,"source":"67","usedDeprecatedRules":"44"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"44"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"44"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"44"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"44"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"44"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"89","usedDeprecatedRules":"44"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"44"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"44"},"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\index.js",[],["96","97"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\App.js",["98","99","100"],"import './App.css';\nimport React, { useEffect, useState } from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport { createTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\n\nimport LoginUser from './Components/Users/LoginUser';\nimport MainComponent from './Components/MainComponent';\nimport StartPage from './Components/StartPage';\n\nconst theme = createTheme({\n  palette: {\n    secondary: {\n      light: \"#3b783d\",\n      main: \"#367338\",\n      dark: \"#2e6630\",\n      contrastText: \"#fff\"\n    },\n    type: 'dark'\n  }\n})\n\nconst App = () => {\n  return (\n    <ThemeProvider theme={theme}>\n      <Router>\n        <Switch>\n          <Route path=\"/\" exact>\n            <StartPage />\n          </Route>\n          <Route path=\"/login\">\n            <LoginUser />\n          </Route>\n          <Route path=\"/main\" >\n            <MainComponent />\n          </Route>\n        </Switch>\n      </Router>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\reportWebVitals.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\GlobalComponents.js",["101"],"import { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Chip from '@material-ui/core/Chip';\r\nimport Card from \"@material-ui/core/Card\";\r\nimport Typography from '@material-ui/core/Typography';\r\nimport LinearProgress from \"@material-ui/core/LinearProgress\";\r\n\r\nconst StyledTextField = withStyles({\r\n    root: {\r\n\r\n        '& .MuiInputBase-root': {\r\n            color: \"white\",\r\n            marginRight: \"10px\",\r\n            marginLeft: \"20px\",\r\n            marginBottom: \"11px\",\r\n        },\r\n\r\n        '& .MuiFormLabel-root': {\r\n            color: \"#999999\",\r\n            marginLeft: \"20px\",\r\n        },\r\n\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiInput-underline:hover:not(.Mui-disabled):before': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottomColor: '#999999',\r\n        },\r\n    },\r\n})(TextField);\r\n\r\nconst StyledSelectFC = withStyles({\r\n    root: {\r\n        '& .MuiInputBase-root': {\r\n            color: \"white\",\r\n            marginRight: \"10px\",\r\n            marginLeft: \"20px\",\r\n            marginBottom: \"11px\",\r\n        },\r\n\r\n        '& .MuiFormLabel-root': {\r\n            color: \"#999999\",\r\n            marginLeft: \"20px\",\r\n        },\r\n\r\n        '& label.Mui-focused': {\r\n            color: 'white',\r\n        },\r\n        '& .MuiInput-underline:hover:not(.Mui-disabled):before': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:after': {\r\n            borderBottomColor: 'white',\r\n        },\r\n        '& .MuiInput-underline:before': {\r\n            borderBottomColor: '#999999',\r\n        },\r\n        '& .MuiSelect-icon': {\r\n            color: '#999999',\r\n        },\r\n    },\r\n})(FormControl);\r\n\r\nconst BorderLinearProgress = withStyles((theme) => {\r\n    return {\r\n        root: {\r\n            borderRadius: \"6px\",\r\n            width: \"32px\",\r\n            height: \"100%\",\r\n            marginBottom: \"2px\"\r\n        },\r\n        colorPrimary: {\r\n            boxShadow: 'inset 0px 3px 3px -2px rgb(0 0 0 / 20%), inset 0px 3px 4px 0px rgb(0 0 0 / 14%), inset 0px 1px 8px 0px rgb(0 0 0 / 12%), ' + theme.shadows[1],\r\n            backgroundColor: '#a9a6a6',\r\n            borderRadius: '4px',\r\n        },\r\n        bar: {\r\n            borderRadius: \"6px\",\r\n            boxShadow: theme.shadows[3],\r\n            transform: ({ value }) => {\r\n                return `translateY(${value}%) !important`;\r\n            },\r\n            backgroundColor: ({ bcolor }) => { return bcolor }\r\n        },\r\n    };\r\n})(LinearProgress);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    formControl: {\r\n        minWidth: 138,\r\n    },\r\n    darkChipListBox: {\r\n        display: 'flex',\r\n    },\r\n    chipListContainer: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexWrap: 'wrap',\r\n        listStyle: 'none',\r\n        padding: theme.spacing(0.5),\r\n        paddingTop: \"12px\",\r\n        width: \"max-content\",\r\n        margin: \"0\",\r\n    },\r\n    chipItem: {\r\n        margin: theme.spacing(0.5),\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '2px 6px 2px',\r\n        marginBottom: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        width: '100%',\r\n    },\r\n    barBox: {\r\n        minHeight: \"160px\",\r\n        display: \"flex\",\r\n        padding: \"0\",\r\n        margin: '6px',\r\n        width: \"max-content\",\r\n        boxshadow: theme.shadows[2]\r\n    },\r\n    stats: {\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        flexDirection: \"column\",\r\n        backgroundColor: '#bdbdbd',\r\n        color: 'black'\r\n    }\r\n}));\r\n\r\nexport const DarkTextField = ({ onChange, label, name, type, maxRows, value }) => {\r\n    return (\r\n        <StyledTextField\r\n            onChange={onChange}\r\n            multiline\r\n            maxRows={maxRows}\r\n            label={label}\r\n            name={name}\r\n            type={type}\r\n            value={value}\r\n        />\r\n    );\r\n};\r\n\r\nexport const DarkSelect = ({ onChange, label, name, value, firstVal, collection }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <StyledSelectFC className={classes.formControl}>\r\n            <InputLabel id=\"select-params-label\">{label}</InputLabel>\r\n            <Select\r\n                labelId=\"select-params-label\"\r\n                id=\"select-params\"\r\n                name={name}\r\n                onChange={onChange}\r\n                value={value}\r\n                defaultValue=\"\"\r\n            >\r\n                {\r\n                    firstVal === undefined ? null :\r\n                        <MenuItem key={0} value={firstVal.id} >{firstVal.name}</MenuItem>\r\n                }\r\n                {collection === undefined ? null :\r\n                    collection.map((item, index) => (\r\n                        <MenuItem key={index + 1} value={item}>{item.name}</MenuItem>\r\n                    ))\r\n                }\r\n            </Select>\r\n        </StyledSelectFC>\r\n    );\r\n};\r\n\r\nexport const DarkChipList = ({ onChange, label, name, value, firstVal, firstLabel, collection, clipListCollection, onDelete }) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <div className={classes.darkChipListBox}>\r\n            <StyledSelectFC className={classes.formControl}>\r\n                <InputLabel id=\"select-params-label\">{label}</InputLabel>\r\n                <Select\r\n                    labelId=\"select-params-label\"\r\n                    id=\"select-params\"\r\n                    name={name}\r\n                    onChange={onChange}\r\n                    value={value}\r\n                >\r\n                    {firstVal === undefined ? <div></div> :\r\n                        <MenuItem value={firstVal}>{firstLabel}</MenuItem>\r\n                    }\r\n                    {collection === undefined ? <div></div> :\r\n                        collection.map((item, index) => (\r\n                            <MenuItem id={\"chipMenuItem\" + item.id} key={\"chipKey\" + item.id} value={item}>{item.name}</MenuItem>\r\n                        ))\r\n                    }\r\n                </Select>\r\n            </StyledSelectFC>\r\n            <ul className={classes.chipListContainer}>\r\n                {clipListCollection === undefined ? <div></div> :\r\n                    clipListCollection.map((data, index) => {\r\n                        return (\r\n                            <li key={index}>\r\n                                <Chip\r\n                                    className={classes.chipItem}\r\n                                    label={data.name}\r\n                                    onDelete={() => onDelete(data)}\r\n                                />\r\n                            </li>\r\n                        );\r\n                    })}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const StatBar = ({ valueMax, valueCurrent, text, bcolor }) => {\r\n    const classes = useStyles();\r\n\r\n    const barLvl = valueMax === 0 && valueCurrent === 0 ? 100 :\r\n        100 - (valueCurrent * 100) / valueMax;\r\n\r\n    return (\r\n        <Card className={classes.barBox}>\r\n\r\n            <div className={classes.stats}>\r\n                <div className={classes.title}>\r\n                    <Typography noWrap variant=\"body2\">{text}</Typography>\r\n                </div>\r\n                <BorderLinearProgress variant=\"determinate\" bcolor={bcolor} value={barLvl} />\r\n                <Typography variant=\"button\">{Math.round(100 - barLvl)}%</Typography>\r\n            </div>\r\n        </Card>\r\n    );\r\n}\r\n\r\nexport default {\r\n    DarkChipList,\r\n    DarkSelect,\r\n    DarkTextField,\r\n    StatBar\r\n};","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\AuthService.js",["102"],"import APIURL from './Globals'\r\n\r\nconst login = (loginData) => {\r\n    const requestOptions = {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(loginData)\r\n    };\r\n    return fetch(APIURL + 'users/login', requestOptions)\r\n        .then((response) => {\r\n            if (response.ok)\r\n                return response.json();\r\n            else\r\n                return Promise.reject();\r\n        })\r\n        .then(data => {\r\n            localStorage.setItem(\"user\", JSON.stringify(data))\r\n        })\r\n};\r\n\r\nexport const logout = () => {\r\n    localStorage.removeItem(\"user\");\r\n};\r\n\r\nexport const getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nexport const authHeader = () => {\r\n    const user = JSON.parse(localStorage.getItem('user'));\r\n\r\n    if (user && user.token) {\r\n        return 'Bearer ' + user.token;\r\n    } else {\r\n        return {};\r\n    }\r\n}\r\n\r\nexport const getUserAccess = () => {\r\n    const permissions = getCurrentUser().userDetails.employeeDTO.permissions;\r\n    if (permissions === undefined || permissions.length < 1) {\r\n        return false;\r\n    }\r\n    const isUsserPermit = (premName) => {\r\n        let isPermit = false;\r\n        permissions.forEach(element => {\r\n            if (element.name === premName) {\r\n                isPermit = true;\r\n                return;\r\n            }\r\n        });\r\n        return isPermit;\r\n    }\r\n\r\n    const allowedViews = {\r\n        humanResources: isUsserPermit(\"Human-Resources\"),\r\n        admin: isUsserPermit('Admin'),\r\n        teamManager: isUsserPermit('Team-Manager')\r\n    };\r\n\r\n    if (allowedViews.admin) {\r\n        allowedViews = {\r\n            humanResources: true,\r\n            admin: true,\r\n            teamManager: true\r\n        }\r\n    }\r\n    return allowedViews;\r\n}\r\n\r\nconst testRoles = () => {\r\n    const requestOptions = {\r\n        method: 'GET',\r\n        headers: new Headers({ 'Content-Type': 'application/json', 'Authorization': authHeader() }),\r\n    };\r\n    fetch(APIURL + 'users?page=1&size=4', requestOptions)\r\n        .then(response => response.json())\r\n        .then(data => console.log(data))\r\n}\r\n// eslint-disable-next-line\r\nexport default {\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n    authHeader,\r\n    getUserAccess,\r\n    testRoles\r\n};","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\MainComponent.js",["103","104","105","106","107"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\Globals.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\StartPage.js",["108"],"import React from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardActions from '@material-ui/core/CardActions';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    redirectButton: {\r\n        margin: '8px',\r\n        width: \"10rem\",\r\n    },\r\n    mainCard: {\r\n        margin: '0 auto',\r\n        marginTop: '32px',\r\n        display: 'block',\r\n        maxWidth: 750,\r\n    },\r\n    cardMedia: {\r\n        height: 350,\r\n    },\r\n}));\r\n\r\nconst StartPage = () => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <div>\r\n            <Card className={classes.mainCard}>\r\n                <CardActionArea>\r\n                    <CardContent>\r\n                        <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                            Human Resources Manager\r\n                        </Typography>\r\n                        <Typography variant=\"body1\" color=\"textSecondary\" component=\"p\">\r\n                            A prototype application. To store employees data, and assign tasks to them.\r\n                        </Typography>\r\n                    </CardContent>\r\n                </CardActionArea>\r\n                <CardActions>\r\n                    <Link style={{ textDecoration: \"none\" }} to=\"/login\">\r\n                        <Button\r\n                            className={classes.redirectButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                        >To Login Page</Button>\r\n                    </Link>\r\n                </CardActions>\r\n            </Card>\r\n\r\n        </div>\r\n    );\r\n}\r\nexport default StartPage;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksColumns.js",["109","110","111","112","113","114"],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\CreateEmployee.js",["115","116"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DarkTextField, DarkSelect, DarkChipList } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals'\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport DateFnsUtils from '@date-io/date-fns';\r\nimport { format } from 'date-fns'\r\n\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainConteiner: {\r\n        marginTop: \"1.8rem\",\r\n        background: theme.palette.grey[800],\r\n        paddingBottom: '20px'\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    formGrid: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr 1fr 1fr\",\r\n        justifyContent: \"space-between\",\r\n        alignContent: \"space-between\",\r\n        gridGap: \"1.2rem 1.2rem\",\r\n    },\r\n    datePicker: {\r\n        marginTop: '0',\r\n        marginLeft: \"20px\"\r\n    },\r\n    createButton: {\r\n        margin: '0 auto',\r\n        display: 'block',\r\n        width: \"19rem\",\r\n    }\r\n}));\r\n\r\nconst CreateEmploy = () => {\r\n    const classes = useStyles();\r\n    const [employee, setEmployee] = useState({\r\n        id: 0,\r\n        employmentDate: format(new Date(), \"yyy-MM-dd\"),\r\n        remoteWork: false,\r\n        person: {\r\n            id: 0,\r\n            name: \"\",\r\n            surname: \"\",\r\n            phoneNumber: \"\",\r\n            email: \"\",\r\n            employeeAddress: {\r\n                id: 0,\r\n                city: \"\",\r\n                postCode: \"\",\r\n                street: \"\"\r\n            }\r\n        },\r\n        position: {\r\n            id: 0,\r\n            name: \"\",\r\n        },\r\n        department: {\r\n            id: 0,\r\n            name: \"\",\r\n        },\r\n        permissions: []\r\n    });\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const remoteWork = [\r\n        { id: false, name: \"Office\" },\r\n        { id: true, name: \"Remote\" }\r\n    ];\r\n    const [allPermissions, setAllPermissions] = useState([]);\r\n    const [employeePermissions, setEmployeePermissions] = useState([]);\r\n    useEffect(() => {\r\n        getEmployeeProps()\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setEmployee({\r\n            ...employee,\r\n            ['permissions']: employeePermissions\r\n        })\r\n    }, [employeePermissions]);\r\n\r\n    const PostEmployee = (formData) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formData),\r\n        };\r\n        fetch(APIURL + 'employee/create', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data));\r\n    }\r\n\r\n    const getEmployeeProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setDepartments(data));\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setPositions(data));\r\n\r\n        await fetch(APIURL + `permissions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setAllPermissions(data));\r\n    }\r\n\r\n    const headleFormChange = e => {\r\n\r\n        if (e.target.name === \"permissionSelect\") {\r\n            if (employeePermissions.length === 0) {\r\n                setEmployeePermissions([e.target.value]);\r\n            } else {\r\n                let isPicked = false;\r\n                employeePermissions.forEach(element => {\r\n                    if (element.id === e.target.value.id) {\r\n                        isPicked = true;\r\n                    }\r\n                });\r\n                if (!isPicked) {\r\n                    setEmployeePermissions([...employeePermissions, e.target.value]);\r\n                }\r\n            }\r\n        }\r\n\r\n        setEmployee({\r\n            id: 0,\r\n            person: {\r\n                id: 0,\r\n                name: e.target.name === \"employeeName\" ? e.target.value : employee.person.name,\r\n                surname: e.target.name === \"employeeSurname\" ? e.target.value : employee.person.surname,\r\n                phoneNumber: e.target.name === \"employeePhone\" ? e.target.value : employee.person.phoneNumber,\r\n                email: e.target.name === \"employeeEmail\" ? e.target.value : employee.person.email,\r\n                employeeAddress: {\r\n                    id: 0,\r\n                    city: e.target.name === \"employeeCity\" ? e.target.value : employee.person.employeeAddress.city,\r\n                    postCode: e.target.name === \"employeePostCode\" ? e.target.value : employee.person.employeeAddress.postCode,\r\n                    street: e.target.name === \"employeeStreet\" ? e.target.value : employee.person.employeeAddress.street\r\n                }\r\n            },\r\n            position: e.target.name === \"positionSelect\" ? e.target.value : employee.position,\r\n            department: e.target.name === \"departmentSelect\" ? e.target.value : employee.department,\r\n            employmentDate: employee.employmentDate,\r\n            remoteWork: e.target.name === \"remoteWork\" ? e.target.value.id : employee.remoteWork,\r\n            permissions: employee.permissions\r\n        })\r\n    }\r\n\r\n    const headleDateChange = (e) => {\r\n        setEmployee({ ...employee, employmentDate: e })\r\n    }\r\n    const hendlePermissionDelete = chipToDelete => {\r\n        setEmployeePermissions(chips => chips.filter(chip => chip.name !== chipToDelete.name));\r\n    }\r\n\r\n    const hendlePostEmployee = () => {\r\n        console.log(employee);\r\n        PostEmployee(employee);\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mainConteiner}>\r\n            <div boxshadow={2} className={classes.title}>\r\n                <h3 >Create new employee</h3>\r\n            </div>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <div className={classes.formGrid}>\r\n                    <DarkTextField\r\n                        label=\"Name\"\r\n                        name=\"employeeName\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Surname\"\r\n                        name=\"employeeSurname\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Phone Number\"\r\n                        name=\"employeePhone\"\r\n                        type=\"tel\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Email\"\r\n                        name=\"employeeEmail\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"City\"\r\n                        name=\"employeeCity\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Post Code\"\r\n                        name=\"employeePostCode\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkTextField\r\n                        label=\"Street\"\r\n                        name=\"employeeStreet\"\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Department\"\r\n                        name=\"departmentSelect\"\r\n                        collection={departments}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Position\"\r\n                        name=\"positionSelect\"\r\n                        collection={positions}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <DarkSelect\r\n                        label=\"Work Type\"\r\n                        name=\"remoteWork\"\r\n                        collection={remoteWork}\r\n                        value={employee.remoteWork === false ? remoteWork[0] : remoteWork[1]}\r\n                        onChange={headleFormChange}\r\n                    />\r\n                    <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                        <KeyboardDatePicker\r\n                            className={classes.datePicker}\r\n                            disableToolbar\r\n                            name=\"datePicker\"\r\n                            variant=\"inline\"\r\n                            format=\"yyyy-MM-dd\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Employment Date\"\r\n                            value={employee.employmentDate}\r\n                            onChange={headleDateChange}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                </div>\r\n                <DarkChipList\r\n                    label=\"Permissions\"\r\n                    name=\"permissionSelect\"\r\n                    collection={allPermissions}\r\n                    clipListCollection={employeePermissions}\r\n                    onChange={headleFormChange}\r\n                    onDelete={hendlePermissionDelete}\r\n                />\r\n                <Button\r\n                    className={classes.createButton}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={hendlePostEmployee}\r\n                >Create</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateEmploy;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeList.js",["117","118","119"],"import React, { useEffect, useState } from \"react\";\r\nimport { DarkTextField, DarkSelect } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals'\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\n\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1rem',\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 550,\r\n    },\r\n    pagination: {\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800],\r\n    },\r\n    searchBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.8rem\",\r\n        paddingRight: \"1.8rem\",\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n}));\r\n\r\nconst EmployList = () => {\r\n    const classes = useStyles();\r\n    const [employees, setEmployees] = useState([]);\r\n    const [departments, setDepartments] = useState([]);\r\n    const [positions, setPositions] = useState([]);\r\n    const [page, setPage] = useState(0);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [totalItems, setTotalItems] = useState(1);\r\n    const firstRecord = { id: 0, name: \"All\" };\r\n    const [orderOptions] = useState([\r\n        { id: \"name\", name: \"Name\" },\r\n        { id: \"surname\", name: \"Surame\" },\r\n        { id: \"department\", name: \"Department\" },\r\n        { id: \"position\", name: \"Position\" },\r\n        { id: \"date-asc\", name: \"Date-asc\" },\r\n        { id: \"date-desc\", name: \"Date-desc\" }\r\n    ]);\r\n    const [remoteOptions] = useState([\r\n        { id: '', name: \"All\" },\r\n        { id: true, name: \"Remote\" },\r\n        { id: false, name: \"Office\" },\r\n    ]);\r\n    const [searchParams, setSearchParams] = useState({\r\n        searchString: '',\r\n        department: firstRecord,\r\n        position: firstRecord,\r\n        orderBy: orderOptions[4],\r\n        isRemote: remoteOptions[0]\r\n    });\r\n    useEffect(() => {\r\n        getEmploees(page + 1, rowsPerPage);\r\n    }, [page, rowsPerPage]);\r\n\r\n    useEffect(() => {\r\n        getSearchProps()\r\n    }, []);\r\n\r\n    const getEmploees = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL +\r\n            `employee/all?page=${page}&size=${size}&order=${searchParams.orderBy.id}&search=${searchParams.searchString}&department=${searchParams.department.id}&position=${searchParams.position.id}&isremote=${searchParams.isRemote.id}`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => (setEmployees(data.items), setTotalItems(data.totalItems)));\r\n    }\r\n\r\n    const getSearchProps = async () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n        };\r\n        await fetch(APIURL + `departments`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setDepartments(data) });\r\n\r\n        await fetch(APIURL + `positions`,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => { data.unshift(firstRecord); setPositions(data) });\r\n    }\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(+event.target.value);\r\n        setPage(0);\r\n    };\r\n\r\n    const handleChangeSearchParams = event => {\r\n        setSearchParams({\r\n            searchParams,\r\n            searchString: event.target.name === \"searchInput\" ? event.target.value : searchParams.searchString,\r\n            department: event.target.name === \"departmentSelect\" ? event.target.value : searchParams.department,\r\n            position: event.target.name === \"positionSelect\" ? event.target.value : searchParams.position,\r\n            orderBy: event.target.name === \"orderBy\" ? event.target.value : searchParams.orderBy,\r\n            isRemote: event.target.name === \"isRemote\" ? event.target.value : searchParams.isRemote,\r\n        });\r\n    };\r\n\r\n    const handleSearch = () => {\r\n        getEmploees(1, rowsPerPage);\r\n        console.log(searchParams);\r\n    };\r\n    return (\r\n        <div>\r\n            <Toolbar className={classes.searchBox}>\r\n                <h3 className={classes.whiteText}>Employees</h3>\r\n                <DarkTextField\r\n                    onChange={handleChangeSearchParams}\r\n                    label='Search...'\r\n                    name='searchInput'\r\n                />\r\n                <DarkSelect\r\n                    label=\"Department\"\r\n                    name=\"departmentSelect\"\r\n                    collection={departments}\r\n                    value={searchParams.department}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Position\"\r\n                    name=\"positionSelect\"\r\n                    collection={positions}\r\n                    value={searchParams.position}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Order by\"\r\n                    name=\"orderBy\"\r\n                    collection={orderOptions}\r\n                    value={searchParams.orderBy}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <DarkSelect\r\n                    label=\"Work Type\"\r\n                    name=\"isRemote\"\r\n                    collection={remoteOptions}\r\n                    value={searchParams.isRemote}\r\n                    onChange={handleChangeSearchParams}\r\n                />\r\n                <Button variant=\"contained\" color=\"primary\" onClick={handleSearch}>Search</Button>\r\n            </Toolbar>\r\n\r\n            {employees === undefined ? <div></div> :\r\n                <Paper className={classes.root}>\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        #\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Employment Date\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Action\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {employees.map((employee, index) => (\r\n                                    <TableRow hover key={index}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {index + 1}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.department.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.remoteWork === true ?\r\n                                                <CheckCircleIcon /> : <CloseIcon />}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.employmentDate.toString().split('T')[0]}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${employee.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                            <IconButton className={classes.button} size=\"small\" aria-label=\"edit\">\r\n                                                <EditIcon />\r\n                                            </IconButton>\r\n                                            <IconButton className={classes.button} size=\"small\" aria-label=\"del\">\r\n                                                <DeleteIcon />\r\n                                            </IconButton>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                    <TablePagination\r\n                        className={classes.pagination}\r\n                        rowsPerPageOptions={[10, 25, 35]}\r\n                        component=\"div\"\r\n                        count={totalItems}\r\n                        rowsPerPage={rowsPerPage}\r\n                        page={page}\r\n                        onChangePage={handleChangePage}\r\n                        onChangeRowsPerPage={handleChangeRowsPerPage}\r\n                    />\r\n                </Paper>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default EmployList;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\EmployeeDetails.js",["120"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { useParams } from \"react-router-dom\";\r\nimport Chip from '@material-ui/core/Chip';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainConteiner: {\r\n        marginTop: \"1.8rem\",\r\n        background: theme.palette.grey[800],\r\n        padding: '1.5rem',\r\n        color: theme.palette.text.primary,\r\n    },\r\n    title: {\r\n        margin: \"-1.5rem\",\r\n        textAlign: 'center',\r\n        padding: '1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    gridConteiner: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: `1fr 1fr 1fr`,\r\n        gridTemplateRows: \"1fr \",\r\n        justifyContent: \"space-evenly\",\r\n        alignContent: \"center\",\r\n        marginTop: \"0.5rem\",\r\n        '& p': {\r\n            margin: \"5px\",\r\n            display: 'inline',\r\n            fontSize: \"17px\"\r\n        },\r\n        '& h3': {\r\n            margin: \"5px\",\r\n            display: 'inline',\r\n\r\n        }\r\n    },\r\n    permitionChip: {\r\n        margin: \"2px\",\r\n        marginLeft: \"5px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"14px\",\r\n        fontWeight: \"501\"\r\n\r\n    }\r\n}));\r\n\r\nexport const EmployeeDetails = () => {\r\n    const classes = useStyles();\r\n    const [employee, setEmployee] = useState({});\r\n    const params = useParams();\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        getEmploee(params.id);\r\n    }, [])\r\n\r\n    const getEmploee = async (empID) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL + `employee/get/` + empID,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setEmployee(data));\r\n    }\r\n\r\n    return (\r\n        <div className={classes.mainConteiner}>\r\n            <div className={classes.title}>\r\n                <h2>Employee Details:</h2>\r\n            </div>\r\n            {employee.person === undefined ? null :\r\n                <div className={classes.gridConteiner}>\r\n                    <div>\r\n                        <h2 className={classes.header}>Personsal Info</h2>\r\n                        <div>\r\n                            <h3>Name: </h3>\r\n                            <p>{employee.person.name}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Surname: </h3>\r\n                            <p>{employee.person.surname}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Phone Number: </h3>\r\n                            <p>{employee.person.phoneNumber}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Email: </h3>\r\n                            <p>{employee.person.email}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <h2 className={classes.header}>Address:</h2>\r\n                        <div  >\r\n                            <h3>City: </h3>\r\n                            <p>{employee.person.employeeAddress.city}</p>\r\n                        </div>\r\n                        <div   >\r\n                            <h3>Street: </h3>\r\n                            <p>{employee.person.employeeAddress.street}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Post Code: </h3>\r\n                            <p>{employee.person.employeeAddress.postCode}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <h2 className={classes.header}>Occupation info</h2>\r\n                        <div  >\r\n                            <h3>Employment Date: </h3>\r\n                            <p>{employee.employmentDate.toString().split('T')[0]}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Position: </h3>\r\n                            <p>{employee.position.name}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Department: </h3>\r\n                            <p>{employee.department.name}</p>\r\n                        </div>\r\n                        <div  >\r\n                            <h3>Work Type: </h3>\r\n                            <p>{employee.remoteWork === true ? \"Remote\" : \"Office\"}</p>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            }\r\n            {employee.permissions === undefined ||\r\n                employee.permissions.length === 0 ? null :\r\n                <div>\r\n                    <h2>Employee Permissions: </h2>\r\n                    {employee.permissions.map((permition, index) => (\r\n                        <Chip\r\n                            className={classes.permitionChip}\r\n                            key={index}\r\n                            label={permition.name}\r\n                            color=\"primary\"\r\n                        />\r\n\r\n                    ))}\r\n                </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamManager.js",["121","122","123","124","125","126","127","128","129"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../../Services/Globals';\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport { Link } from \"react-router-dom\";\r\nimport { getTasks } from \"../../Services/TasksService\";\r\nimport { StatBar } from \"../GlobalComponents\"\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    container: {\r\n        maxHeight: 550,\r\n    },\r\n    statsMain: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap'\r\n    },\r\n    statsContainer: {\r\n        display: 'flex',\r\n        padding: '0 6px 4px',\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '2px 6px 2px',\r\n        marginBottom: '5px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        width: '100%',\r\n    },\r\n    statsBox: {\r\n        width: \"120px\",\r\n        height: \"60px\",\r\n        padding: \"12px\",\r\n        marginRight: '22px',\r\n        marginBottom: '22px',\r\n        position: \"relative\",\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800],\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        marginLeft: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n    currentTask: {\r\n        borderRadius: '4px',\r\n        backgroundColor: \"green\",\r\n        color: \"white\",\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    noTask: {\r\n        borderRadius: '4px',\r\n        backgroundColor: \"#bd0000\",\r\n        color: \"white\",\r\n        boxShadow: theme.shadows[2],\r\n    }\r\n}));\r\nconst leaderID = getCurrentUser().userDetails.employeeDTO.id;\r\nconst TeamManager = () => {\r\n    const classes = useStyles();\r\n\r\n    const [team, setTeam] = useState({});\r\n    const [idleMembers, setIdleMembers] = useState(0);\r\n    const [tasksStats, setTasksStats] = useState({});\r\n    const [currentTasks, setCurrentTasks] = useState([]);\r\n    useEffect(() => {\r\n        getData();\r\n    }, []);\r\n    useEffect(() => {\r\n        if (team.members !== undefined && currentTasks.length === team.members.length) {\r\n            let couter = 0;\r\n            currentTasks.forEach(element => {\r\n                if (element === undefined) {\r\n                    couter++;\r\n                }\r\n            });\r\n            setIdleMembers(couter)\r\n        }\r\n    }, [currentTasks]);\r\n    const getData = () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        fetch(APIURL + `teams/leader/${leaderID}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (\r\n                setTeam(data),\r\n                getTasksStats(data.id),\r\n                data.members.map((member) => {\r\n                    getTasks(1, 1, member.id, undefined, \"In-Progress\").then((data) => {\r\n                        setCurrentTasks(old => [\r\n                            ...old, data.items[0]\r\n                        ])\r\n                    })\r\n                })\r\n            ));\r\n    }\r\n\r\n    const getTasksStats = (teamId) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        fetch(APIURL + `tasks/stats?teamid=${teamId}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (setTasksStats(data)));\r\n\r\n    }\r\n\r\n    const currentTaskBar = (memberId) => {\r\n        let boxStyle = classes.currentTask;\r\n        let text = loadCurrrentTask(memberId);\r\n        if (text === undefined) {\r\n            boxStyle = classes.noTask;\r\n            text = \"No Task Assigned\";\r\n        }\r\n        return (\r\n            <Typography variant=\"body1\" className={boxStyle}>\r\n                {text}\r\n            </Typography>\r\n        );\r\n    }\r\n    const loadCurrrentTask = (id) => {\r\n        let currTask;\r\n        currentTasks.map(task => {\r\n            if (task !== undefined) {\r\n                if (task.assignedEmployeeId === id) {\r\n                    currTask = task.name;\r\n                }\r\n            }\r\n        });\r\n        return currTask;\r\n    }\r\n    return (\r\n        <div>\r\n            {tasksStats.monthTotal === undefined ? null :\r\n                <div className={classes.statsMain}>\r\n                    <Card style={{ width: 'max-content', marginRight: '22px', marginBottom: '22px' }}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\">Today Tasks: {tasksStats.todayTotal}</Typography>\r\n                        </div>\r\n                        <div className={classes.statsContainer}>\r\n                            <StatBar\r\n                                valueMax={tasksStats.todayTotal}\r\n                                valueCurrent={tasksStats.todayRequested}\r\n                                text={\"Requested: \" + tasksStats.todayRequested}\r\n                                bcolor='rgb(231, 170, 35)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.todayTotal}\r\n                                valueCurrent={tasksStats.todayProgress}\r\n                                text={\"In-Progress: \" + tasksStats.todayProgress}\r\n                                bcolor='rgb(56, 81, 216)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.todayTotal}\r\n                                valueCurrent={tasksStats.todayCompleted}\r\n                                text={\"Completed: \" + tasksStats.todayCompleted}\r\n                                bcolor='rgb(0, 158, 7)'\r\n                            />\r\n                        </div>\r\n                    </Card>\r\n                    <Card style={{ width: 'max-content', marginRight: '22px', marginBottom: '22px' }}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\">This Week Tasks: {tasksStats.weekTotal}</Typography>\r\n                        </div>\r\n                        <div className={classes.statsContainer}>\r\n                            <StatBar\r\n                                valueMax={tasksStats.weekTotal}\r\n                                valueCurrent={tasksStats.weekRequested}\r\n                                text={\"Requested: \" + tasksStats.weekRequested}\r\n                                bcolor='rgb(231, 170, 35)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.weekTotal}\r\n                                valueCurrent={tasksStats.weekProgress}\r\n                                text={\"In-Progress: \" + tasksStats.weekProgress}\r\n                                bcolor='rgb(56, 81, 216)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.weekTotal}\r\n                                valueCurrent={tasksStats.weekCompleted}\r\n                                text={\"Completed: \" + tasksStats.weekCompleted}\r\n                                bcolor='rgb(0, 158, 7)'\r\n                            />\r\n                        </div>\r\n                    </Card>\r\n                    <Card style={{ width: 'max-content', marginRight: '22px', marginBottom: '22px' }}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\">This Month Tasks: {tasksStats.monthTotal}</Typography>\r\n                        </div>\r\n                        <div className={classes.statsContainer}>\r\n                            <StatBar\r\n                                valueMax={tasksStats.monthTotal}\r\n                                valueCurrent={tasksStats.monthRequested}\r\n                                text={\"Requested: \" + tasksStats.monthRequested}\r\n                                bcolor='rgb(231, 170, 35)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.monthTotal}\r\n                                valueCurrent={tasksStats.monthProgress}\r\n                                text={\"In-Progress: \" + tasksStats.monthProgress}\r\n                                bcolor='rgb(56, 81, 216)'\r\n                            />\r\n                            <StatBar\r\n                                valueMax={tasksStats.monthTotal}\r\n                                valueCurrent={tasksStats.monthCompleted}\r\n                                text={\"Completed: \" + tasksStats.monthCompleted}\r\n                                bcolor='rgb(0, 158, 7)'\r\n                            />\r\n                        </div>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{tasksStats.totalDelayedTasks}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Delayed Tasks</Typography>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{idleMembers}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Idle Members</Typography>\r\n                    </Card>\r\n                </div>\r\n            }\r\n            {team.members === undefined ? <div></div> :\r\n                <Card className={classes.root}>\r\n                    <CardHeader\r\n                        title={'\"' + team.name + '\"' + \" Team Members:\"}\r\n                    />\r\n\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        #\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Now Working On\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell>\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {team.members.map((employee, index) => (\r\n                                    <TableRow hover key={employee.id}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {index + 1}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.remoteWork === true ?\r\n                                                <CheckCircleIcon /> : <CloseIcon />}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {currentTasks.length !== team.members.length ? null :\r\n                                                currentTaskBar(employee.id)\r\n                                            }\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${employee.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Card>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default TeamManager;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Users\\LoginUser.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Employees\\HR_Dashboard.js",["130","131"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../../Services/Globals'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardHeader from '@material-ui/core/CardHeader';\r\nimport CloseIcon from '@material-ui/icons/Close';\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\r\nimport VisibilityIcon from '@material-ui/icons/Visibility';\r\n\r\n\r\nfunction CircularProgressWithLabel(props) {\r\n    const classes = useStyles();\r\n    return (\r\n        <Box className={classes.progressBox} position=\"relative\" display=\"inline-flex\">\r\n            <CircularProgress className={classes.progressBox} variant=\"determinate\" {...props} />\r\n            <Box\r\n                top={0}\r\n                left={0}\r\n                bottom={0}\r\n                right={0}\r\n                position=\"absolute\"\r\n                display=\"flex\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"center\"\r\n            >\r\n                <Typography variant=\"h5\" component=\"div\">{`${Math.round(\r\n                    props.value,\r\n                )}%`}</Typography>\r\n            </Box>\r\n        </Box>\r\n    );\r\n}\r\n\r\nconst StyledTableCell = withStyles((theme) => ({\r\n    head: {\r\n        backgroundColor: theme.palette.grey[800],\r\n        color: theme.palette.common.white,\r\n    },\r\n    body: {\r\n        backgroundColor: theme.palette.grey[400],\r\n        color: \"black\",\r\n    },\r\n}))(TableCell)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        marginTop: '1.5rem',\r\n        width: '100%',\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    remoteWorkBox: {\r\n        marginTop: '1.5rem',\r\n        width: \"307px\",\r\n        padding: \"10px\",\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    statsBox: {\r\n        marginTop: '1.5rem',\r\n        marginLeft: '1.5rem',\r\n        width: \"120px\",\r\n        height: \"60px\",\r\n        padding: \"12px\",\r\n        position: \"relative\",\r\n        background: theme.palette.grey[800],\r\n        color: \"white\",\r\n    },\r\n    progressBox: {\r\n        width: \"100% !important\",\r\n        height: \"100% !important\",\r\n    },\r\n    container: {\r\n        maxHeight: 540,\r\n    },\r\n    button: {\r\n        background: theme.palette.grey[300],\r\n        padding: \".4rem\",\r\n        \"margin-left\": \".2rem\",\r\n        \"margin-right\": \".2rem\",\r\n        color: theme.palette.grey[800]\r\n    },\r\n}));\r\n\r\nconst HR_Dashboard = () => {\r\n    const classes = useStyles();\r\n    const [employees, setEmployees] = useState([]);\r\n    const [stats, setStats] = useState();\r\n    const [progress, setProgress] = React.useState(0);\r\n\r\n    React.useEffect(() => {\r\n        if (stats !== undefined) {\r\n            const timer = setInterval(() => {\r\n                setProgress((prevProgress) => (prevProgress === stats.remoteEmploeesPercentage\r\n                    ? stats.remoteEmploeesPercentage\r\n                    : prevProgress + 1));\r\n            }, 45);\r\n            return () => {\r\n                clearInterval(timer);\r\n            };\r\n        }\r\n    }, [stats]);\r\n\r\n    useEffect(() => {\r\n        getEmploees(1, 5);\r\n        getStats();\r\n    }, []);\r\n\r\n    const getEmploees = async (page, size) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL +\r\n            `employee/all?page=${page}&size=${size}&order=date-desc`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (setEmployees(data.items), console.log(data.items)));\r\n    }\r\n\r\n    const getStats = async () => {\r\n        const requestOptions = {\r\n            method: 'Get'\r\n        };\r\n        await fetch(APIURL + `home/stats`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (setStats(data)));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {stats === undefined ? <div></div> :\r\n                <Grid container>\r\n                    <Card className={classes.remoteWorkBox}>\r\n                        <Grid container item spacing={4}>\r\n                            <Grid item xs={7} >\r\n                                <Typography noWrap variant=\"h5\">{stats.totalRemoteEmployees} Employees</Typography>\r\n                                <Typography noWrap variant=\"subtitle1\">Work Remotely</Typography>\r\n                            </Grid>\r\n                            <Grid item xs={5}>\r\n                                <CircularProgressWithLabel value={progress} />\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{stats.totalEmployees}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Total Employees</Typography>\r\n                    </Card>\r\n                    <Card className={classes.statsBox}>\r\n                        <Typography noWrap variant=\"h5\">{stats.totalJobApplications}</Typography>\r\n                        <Typography noWrap variant=\"subtitle1\">Job Applicatios</Typography>\r\n                    </Card>\r\n                </Grid>\r\n            }\r\n            {employees === undefined ? <div></div> :\r\n                <Card className={classes.root}>\r\n                    <CardHeader\r\n                        title=\"Newly Hired Employees:\"\r\n                    />\r\n\r\n                    <TableContainer className={classes.container}>\r\n                        <Table stickyHeader aria-label=\"sticky table\" >\r\n                            <TableHead>\r\n                                <TableRow >\r\n                                    <StyledTableCell align=\"center\">\r\n                                        #\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        ID\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Name\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Surname\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Email\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Position\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Department\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Remote Work\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell align=\"center\">\r\n                                        Employment Date\r\n                                    </StyledTableCell>\r\n                                    <StyledTableCell>\r\n                                    </StyledTableCell>\r\n                                </TableRow>\r\n                            </TableHead>\r\n                            <TableBody >\r\n                                {employees.map((employee, index) => (\r\n                                    <TableRow hover key={employee.id}>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {index + 1}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.id}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.surname}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.person.email}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.position.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.department.name}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.remoteWork === true ?\r\n                                                <CheckCircleIcon /> : <CloseIcon />}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            {employee.employmentDate.toString().split('T')[0]}\r\n                                        </StyledTableCell>\r\n                                        <StyledTableCell align=\"center\">\r\n                                            <Link to={{ pathname: `/main/employee-details/${employee.id}` }}>\r\n                                                <IconButton className={classes.button} size=\"small\" aria-label=\"view\">\r\n                                                    <VisibilityIcon />\r\n                                                </IconButton>\r\n                                            </Link>\r\n                                        </StyledTableCell>\r\n                                    </TableRow>\r\n                                ))}\r\n                            </TableBody>\r\n                        </Table>\r\n                    </TableContainer>\r\n                </Card>\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default HR_Dashboard;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\JobApplication\\CreateJobApplication.js",["132"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals'\r\n\r\nconst CreateJobApplication = () => {\r\n    const [selectedFile, setSelectedFile] = useState();\r\n    const [isSelected, setIsSelected] = useState(false);\r\n\r\n    useEffect(() => {\r\n\r\n    }, []);\r\n\r\n    const PostJobApplication = () => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                \"id\": 0, \"name\": \"Json\", \"surname\": \"j\",\r\n                \"phoneNumber\": 0, \"email\": \"temp@mail.net\",\r\n                \"EmployeeAddressId\": 0,\r\n                \"employeeAddress\":\r\n                    { \"id\": 0, \"city\": \"New York\", \"postCode\": \"11-111\", \"street\": \"str 11\" }\r\n            })\r\n        };\r\n        fetch(APIURL + 'JobApplications', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data));\r\n    }\r\n\r\n    const changeHandler = (event) => {\r\n        setSelectedFile(event.target.files[0]);\r\n        setIsSelected(true);\r\n    };\r\n\r\n    const handleSubmission = () => {\r\n        const formData = new FormData();\r\n\r\n        formData.append('Id', 0);\r\n        formData.append('Name', \"Json\");\r\n        formData.append('Surname', \"xy\");\r\n        formData.append('Email', \"e3@gr\");\r\n        formData.append('Content', \"bzdury\");\r\n        formData.append('PositionId', 1);\r\n        formData.append('ApplicationDate', \"2021-02-01\");\r\n        formData.append('CVPath', \"\");\r\n        formData.append('CVFile', selectedFile);\r\n\r\n        fetch(\r\n            'http://localhost:5000/api/JobApplications',\r\n            {\r\n                method: 'POST',\r\n                body: formData,\r\n            }\r\n        )\r\n            .then((response) => response.json())\r\n            .then((result) => {\r\n                console.log('Success:', result);\r\n            })\r\n            .catch((error) => {\r\n                console.error('Error:', error);\r\n            });\r\n    };\r\n\r\n    return (\r\n        <div>\r\n            <input type=\"file\" name=\"file\" onChange={changeHandler} />\r\n            {isSelected ? (\r\n                <div>\r\n                    <p>Filename: {selectedFile.name}</p>\r\n                    <p>Filetype: {selectedFile.type}</p>\r\n                    <p>Size in bytes: {selectedFile.size}</p>\r\n\r\n                </div>\r\n            ) : (\r\n                <p>Select a file to show details</p>\r\n            )}\r\n            <div>\r\n                <button onClick={handleSubmission}>Submit</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateJobApplication;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Services\\TasksService.js",[],"C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\TasksList.js",["133","134","135","136","137"],"import React, { useEffect, useState } from \"react\";\r\nimport APIURL from '../../Services/Globals';\r\nimport { Link, useLocation } from \"react-router-dom\";\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport moment from \"moment\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { getTasks, changeTaskStatus, getTeamTasks } from \"../../Services/TasksService\";\r\nimport { DarkTextField, DarkSelect } from '../GlobalComponents';\r\n\r\nimport Card from '@material-ui/core/Card';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { Accordion, AccordionSummary, AccordionDetails, Chip } from '@material-ui/core';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport Icon from '@material-ui/core/Icon';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\r\nimport ArrowDropDownIcon from '@material-ui/icons/ArrowDropDown';\r\nimport ClickAwayListener from '@material-ui/core/ClickAwayListener';\r\nimport Grow from '@material-ui/core/Grow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Popper from '@material-ui/core/Popper';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MenuList from '@material-ui/core/MenuList';\r\nimport Pagination from '@material-ui/lab/Pagination';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    filterBox: {\r\n        padding: \".1rem\",\r\n        paddingLeft: \"1.1rem\",\r\n        paddingRight: \"1.1rem\",\r\n        borderRadius: '4px',\r\n        marginLeft: '8px',\r\n        width: \"max-content\",\r\n        background: theme.palette.grey[800],\r\n        boxShadow:\r\n            \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n        \"& .MuiAccordion-root\": {\r\n            margin: \"0px\",\r\n            color: \"black\",\r\n            backgroundColor: '#bdbdbd',\r\n            borderRadius: \"4px\",\r\n            width: '243px',\r\n            boxShadow:\r\n                \"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\",\r\n            '&:before': {\r\n                display: 'none',\r\n            },\r\n        },\r\n        \"& .MuiAccordionSummary-root\": {\r\n            minHeight: \"36px\",\r\n            maxHeight: \"36px\"\r\n        },\r\n        \"& .MuiCollapse-root\": {\r\n            position: \"absolute\",\r\n            top: \"30px\",\r\n            paddingTop: \"20px\",\r\n            backgroundColor: '#bdbdbd',\r\n            zIndex: '1',\r\n            borderRadius: \"4px\",\r\n            boxShadow:\r\n                \"-1px 2px 1px 0px rgb(0 0 0 / 20%), -2px 3px 3px 0px rgb(0 0 0 / 35%), 1px 2px 1px 1px rgb(0 0 0 / 30%)\",\r\n        },\r\n        \"& .MuiAccordionDetails-root\": {\r\n            flexWrap: 'wrap'\r\n        }\r\n    },\r\n    filterDate: {\r\n        padding: '0 6px',\r\n        margin: '3px',\r\n        display: 'flex',\r\n        width: '190px'\r\n    },\r\n    whiteText: {\r\n        color: \"white\",\r\n        margin: \"0px\",\r\n        marginRight: \"8px\",\r\n    },\r\n    tasksContainer: {\r\n        margin: '0 auto',\r\n        display: 'flex',\r\n        flexDirection: 'row',\r\n        justifyContent: 'center'\r\n    },\r\n    listComponent: {\r\n        margin: '8px',\r\n        width: '100%',\r\n        paddingTop: 0,\r\n        backgroundColor: theme.palette.background.paper,\r\n        color: 'white',\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '4px',\r\n        display: \"flex\",\r\n        flexDirection: 'column',\r\n    },\r\n    pagination: {\r\n        display: 'grid',\r\n        padding: '8px',\r\n        marginTop: 'auto',\r\n        \"& .Mui-selected\": {\r\n            color: 'white',\r\n            backgroundColor: 'rgb(63 81 181 / 80%)',\r\n        },\r\n        \"& .MuiPaginationItem-outlined\": {\r\n            boxShadow: theme.shadows[2],\r\n            border: '1px solid rgb(149 149 149 / 23%)'\r\n        }\r\n    },\r\n    tasksDetailsCol: {\r\n        margin: \"8px\",\r\n        width: '100%',\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '6px 0',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '3px 3px 0 0',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    detailsTitle: {\r\n        color: theme.palette.text.primary,\r\n        padding: '6px 0 2px 12px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n        borderRadius: '3px 3px 0 0',\r\n        width: '100%',\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        flexDirection: \"column\"\r\n    },\r\n    linkButton: {\r\n        marginRight: '10px',\r\n        marginLeft: 'auto',\r\n        textDecoration: \"none\",\r\n        color: \"white\",\r\n    },\r\n    statusContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        margin: '4px',\r\n        marginLeft: '15px',\r\n    },\r\n    chipContainer: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignContent: 'space-around',\r\n        alignItems: 'stretch',\r\n        flexwrap: 'nowrap',\r\n        justifyContent: 'space-evenly'\r\n    },\r\n    timeChip: {\r\n        margin: \"2px\",\r\n        boxShadow: theme.shadows[2],\r\n        fontSize: \"12px\",\r\n        fontWeight: \"550\"\r\n\r\n    },\r\n    subtaskAccordion: {\r\n        backgroundColor: '#bdbdbd',\r\n        color: \"black\",\r\n        marginTop: \"8px\",\r\n        marginBottom: '4px',\r\n        borderRadius: '4px',\r\n        padding: '0px',\r\n        '&::before': {\r\n            height: 0\r\n        }\r\n    },\r\n    buttonSection: {\r\n        display: 'grid',\r\n        padding: '16px',\r\n        marginTop: 'auto',\r\n        justifyItems: 'center',\r\n        \"& .MuiButton-label\": {\r\n            paddingLeft: '4px',\r\n            paddingRight: '4px',\r\n        }\r\n    },\r\n}));\r\n\r\nconst noFilter = {\r\n    name: \"\",\r\n    status: undefined,\r\n    isBStartTime: false,\r\n    bStartTime: undefined,\r\n    isAStartTime: false,\r\n    aStartTime: undefined,\r\n    isBDeadline: false,\r\n    bDeadline: undefined,\r\n    isADeadline: false,\r\n    aDeadline: undefined\r\n}\r\nconst taskStatusAll = [{ id: 1, name: 'Completed' }, { id: 2, name: 'Requested' }, { id: 3, name: 'In-Progress' }];\r\nconst allowedStatuses = taskStatusAll;\r\n\r\nconst TasksList = (props) => {\r\n    const classes = useStyles();\r\n    const location = useLocation();\r\n    const anchorRef = React.useRef(null);\r\n    const [selectedIndex, setSelectedIndex] = useState(0);\r\n    const [selTaskEmployee, setSelTaskEmployee] = useState({});\r\n    const [tasks, setTasks] = useState([]);\r\n    const [expandedSubTask, setExpandedSubTask] = useState('');\r\n    const [openStatusSel, setOpenStatusSel] = useState(false);\r\n    const [statusSelIndex, setStatusSelIndex] = useState(1);\r\n    const [pagination, setPagination] = useState({\r\n        page: 1,\r\n        size: 10,\r\n        totalPages: 1\r\n    });\r\n    const [filterParams, setFilterParams] = useState(location.filter === undefined ? noFilter : location.filter.filter);\r\n\r\n    useEffect(() => {\r\n        console.log(filterParams);\r\n        loadTasksList(\r\n            pagination.page,\r\n            pagination.size\r\n        );\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (props.teamId !== undefined && tasks[selectedIndex] !== undefined) {\r\n            getAssignedEmployee(tasks[selectedIndex].assignedEmployeeId);\r\n        }\r\n    }, [selectedIndex, tasks]);\r\n\r\n    const getAssignedEmployee = async (empID) => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        await fetch(APIURL + `employee/get/` + empID,\r\n            requestOptions\r\n        )\r\n            .then(response => response.json())\r\n            .then(data => setSelTaskEmployee(data));\r\n    }\r\n\r\n    const loadTasksList = (page, size) => {\r\n        if (props.teamId === undefined && props.userId !== undefined) {\r\n            getTasks(\r\n                page, size, props.userId,\r\n                filterParams.name,\r\n                filterParams.status,\r\n                filterParams.bStartTime,\r\n                filterParams.aStartTime,\r\n                filterParams.bDeadline,\r\n                filterParams.aDeadline\r\n            ).then((data) => {\r\n                setPagination({\r\n                    page: page,\r\n                    size: size,\r\n                    totalPages: data.totalPages,\r\n                })\r\n                setSelectedIndex(0);\r\n                setTasks(data.items);\r\n            })\r\n        } else {\r\n            getTeamTasks(\r\n                page, size, props.teamId,\r\n                filterParams.name,\r\n                filterParams.status,\r\n                filterParams.bStartTime,\r\n                filterParams.aStartTime,\r\n                filterParams.bDeadline,\r\n                filterParams.aDeadline\r\n            ).then((data) => {\r\n                setPagination({\r\n                    page: page,\r\n                    size: size,\r\n                    totalPages: data.totalPages,\r\n                })\r\n                setSelectedIndex(0);\r\n                setTasks(data.items)\r\n            })\r\n        }\r\n    }\r\n\r\n    const handleChangeFilterParams = e => {\r\n        if (e.target.name === 'statusSel') {\r\n            setFilterParams({\r\n                ...filterParams,\r\n                status: e.target.value.name\r\n            })\r\n        }\r\n        if (e.target.name === 'taskName') {\r\n            setFilterParams({\r\n                ...filterParams,\r\n                name: e.target.value\r\n            })\r\n        }\r\n        if (e.target.type === \"checkbox\") {\r\n            const today = moment().format('yyy-MM-DD');\r\n            switch (e.target.name) {\r\n                case 'isBStartTime':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isBStartTime: e.target.checked,\r\n                        bStartTime: e.target.checked === false ? undefined :\r\n                            filterParams.bStartTime === undefined ? today :\r\n                                filterParams.bStartTime\r\n                    });\r\n                    break;\r\n                case 'isAStartTime':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isAStartTime: e.target.checked,\r\n                        aStartTime: e.target.checked === false ? undefined :\r\n                            filterParams.aStartTime === undefined ? today :\r\n                                filterParams.aStartTime\r\n                    });\r\n                    break;\r\n                case 'isBDeadline':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isBDeadline: e.target.checked,\r\n                        bDeadline: e.target.checked === false ? undefined :\r\n                            filterParams.bDeadline === undefined ? today :\r\n                                filterParams.bDeadline\r\n                    });\r\n                    break;\r\n                case 'isADeadline':\r\n                    setFilterParams({\r\n                        ...filterParams,\r\n                        isADeadline: e.target.checked,\r\n                        aDeadline: e.target.checked === false ? undefined :\r\n                            filterParams.aDeadline === undefined ? today :\r\n                                filterParams.aDeadline\r\n                    });\r\n                    break;\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    const handleApplyFilters = () => {\r\n        console.log(filterParams);\r\n        loadTasksList(pagination.page, pagination.size)\r\n    }\r\n\r\n    const handleListItemClick = (event, index) => {\r\n        setSelectedIndex(index);\r\n    };\r\n\r\n    const handlePageChange = (event, value) => {\r\n\r\n        loadTasksList(value, pagination.size);\r\n    };\r\n    const handleSubTaskExpand = (taskId) => (event, newExpanded) => {\r\n        setExpandedSubTask(newExpanded ? taskId : false);\r\n    }\r\n\r\n    const hendleChangeStatus = () => {\r\n        changeTaskStatus(tasks[selectedIndex].id, allowedStatuses[statusSelIndex].name)\r\n            .then((d) => { loadTasksList(pagination.page, pagination.size) },\r\n                e => { console.log(\"status change error\") });\r\n    }\r\n\r\n    const handleMenuItemClick = (event, index) => {\r\n        setStatusSelIndex(index);\r\n        setOpenStatusSel(false);\r\n    };\r\n\r\n    const handleStatSellToggle = () => {\r\n        setOpenStatusSel((prevOpen) => !prevOpen);\r\n    };\r\n\r\n    const handleStatSellClose = (event) => {\r\n        if (anchorRef.current && anchorRef.current.contains(event.target)) {\r\n            return;\r\n        }\r\n\r\n        setOpenStatusSel(false);\r\n    };\r\n\r\n    const changeCipColor = (status) => {\r\n        return {\r\n            boxShadow: 'rgb(0 0 0 / 20%) 0px 0px 1px -2px, rgb(0 0 0 / 14%) 0px 1px 2px 0px, rgb(0 0 0 / 12%) 0px 0px 5px 0px',\r\n            fontSize: \"12px\",\r\n            fontWeight: \"550\",\r\n            padding: \"5px\",\r\n            minWidth: '92px',\r\n            color: status === \"In-Progress\" || status === \"Delayed\" ? \"white\" : \"black\",\r\n            background: status === \"In-Progress\"\r\n                ? \"rgb(56 81 216)\"\r\n                : status === \"Requested\"\r\n                    ? \"rgb(231 170 35)\" :\r\n                    status === \"Delayed\" ?\r\n                        \"#bd0000\" :\r\n                        \"rgb(0 158 7)\",\r\n        }\r\n    }\r\n    return (\r\n        <div >\r\n            <Toolbar className={classes.filterBox}>\r\n                <h3 className={classes.whiteText}>Search Tasks: </h3>\r\n                <DarkTextField\r\n                    onChange={handleChangeFilterParams}\r\n                    label='Task Name...'\r\n                    name='taskName'\r\n                />\r\n                <DarkSelect\r\n                    label=\"Status\"\r\n                    name=\"statusSel\"\r\n                    collection={allowedStatuses}\r\n                    firstVal={{ id: 0, name: 'All' }}\r\n                    onChange={handleChangeFilterParams}\r\n                />\r\n                <Accordion>\r\n                    <AccordionSummary\r\n                        expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                    >\r\n                        <Typography>\r\n                            Select Task by Date\r\n                        </Typography>\r\n                    </AccordionSummary>\r\n                    <AccordionDetails>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isBStartTime\"\r\n                                checked={filterParams.isBStartTime}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"bStartTime\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"Before Start Time:\"\r\n                                    value={filterParams.bStartTime}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isBStartTime: true,\r\n                                            bStartTime: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isAStartTime\"\r\n                                checked={filterParams.isAStartTime}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"datePicker\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"After Start Time:\"\r\n                                    value={filterParams.aStartTime}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isAStartTime: true,\r\n                                            aStartTime: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isBDeadline\"\r\n                                checked={filterParams.isBDeadline}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"datePicker\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"Before Deadline:\"\r\n                                    value={filterParams.bDeadline}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isBDeadline: true,\r\n                                            bDeadline: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                        <Card className={classes.filterDate}>\r\n                            <Checkbox\r\n                                color=\"secondary\"\r\n                                name=\"isADeadline\"\r\n                                checked={filterParams.isADeadline}\r\n                                onChange={handleChangeFilterParams}\r\n                            />\r\n                            <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                                <KeyboardDatePicker\r\n                                    disableToolbar\r\n                                    name=\"datePicker\"\r\n                                    variant=\"inline\"\r\n                                    format=\"yyyy-MM-DD\"\r\n                                    margin=\"normal\"\r\n                                    id=\"date-picker-inline\"\r\n                                    label=\"After Deadline:\"\r\n                                    value={filterParams.aDeadline}\r\n                                    onChange={(date) => {\r\n                                        setFilterParams({\r\n                                            ...filterParams,\r\n                                            isADeadline: true,\r\n                                            aDeadline: date.format('yyyy-MM-DD'),\r\n                                        })\r\n                                    }}\r\n                                    KeyboardButtonProps={{\r\n                                        'aria-label': 'change date',\r\n                                    }}\r\n                                />\r\n                            </MuiPickersUtilsProvider>\r\n                        </Card>\r\n                    </AccordionDetails>\r\n                </Accordion>\r\n                <Button\r\n                    style={{ marginLeft: '15px' }}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleApplyFilters}\r\n                >Submit</Button>\r\n            </Toolbar>\r\n            {tasks.length === 0 ? null :\r\n                <div className={classes.tasksContainer}>\r\n                    <List component=\"nav\" className={classes.listComponent}>\r\n                        <div className={classes.title}>\r\n                            <Typography variant=\"h6\" style={{ marginLeft: '16px' }}>\r\n                                List of Tasks:\r\n                            </Typography>\r\n                            {props.teamId === undefined ? null :\r\n                                <Link className={classes.linkButton} to=\"/main/create-task\">\r\n                                    <Button\r\n                                        size=\"small\"\r\n                                        variant=\"contained\"\r\n                                        color=\"secondary\"\r\n                                        endIcon={<AddCircleIcon />}\r\n                                    >NEW Task</Button>\r\n                                </Link>\r\n                            }\r\n                        </div>\r\n                        {tasks.map((task, index) => (\r\n                            <div key={task.id}>\r\n                                <ListItem\r\n\r\n                                    button\r\n                                    selected={selectedIndex === index}\r\n                                    onClick={(event) => handleListItemClick(event, index)}\r\n                                >\r\n                                    <ListItemText primary={task.name} />\r\n                                    <Chip\r\n                                        label={task.status}\r\n                                        style={changeCipColor(task.status)}\r\n                                    />\r\n\r\n                                </ListItem>\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"0\" }} />\r\n                            </div>\r\n                        ))\r\n                        }\r\n                        <Pagination\r\n                            className={classes.pagination}\r\n                            count={pagination.totalPages}\r\n                            page={pagination.page}\r\n                            onChange={handlePageChange}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </List>\r\n                    <Card className={classes.tasksDetailsCol}>\r\n                        <div className={classes.detailsTitle}>\r\n                            <Typography noWrap variant=\"h5\">\r\n                                {tasks[selectedIndex].name}\r\n                            </Typography>\r\n                            <div style={{ display: \"flex\", alignItems: \"center\" }}>\r\n                                <Typography variant=\"subtitle1\" style={{ marginRight: \"6px\" }}>\r\n                                    {\"Status: \"}\r\n                                </Typography>\r\n                                <Typography variant=\"subtitle1\">\r\n                                    {tasks[selectedIndex].status}\r\n                                </Typography>\r\n                            </div>\r\n\r\n                        </div>\r\n                        {selTaskEmployee.id === undefined ? null :\r\n                            <div className={classes.statusContainer}>\r\n                                <Typography noWrap variant=\"h6\">\r\n                                    {\"Assigned Employee: \" +\r\n                                        selTaskEmployee.person.name + \" \" +\r\n                                        selTaskEmployee.person.surname\r\n                                    }\r\n                                </Typography>\r\n                            </div>\r\n\r\n                        }\r\n                        <CardContent style={{ paddingTop: 0 }}>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\", marginTop: '2px' }} />\r\n                            <div className={classes.chipContainer}>\r\n                                <Chip\r\n                                    className={classes.timeChip}\r\n                                    label={\"Start: \" + moment(tasks[selectedIndex].startTime).format(\"YYYY-MM-DD\")}\r\n                                    color=\"primary\"\r\n                                />\r\n                                <Chip\r\n                                    className={classes.timeChip}\r\n                                    label={\"Deadline: \" + moment(tasks[selectedIndex].deadline).format(\"YYYY-MM-DD\")}\r\n                                    color=\"primary\"\r\n                                />\r\n                            </div>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n\r\n                            <Typography variant=\"subtitle1\">\r\n                                {tasks[selectedIndex].description}\r\n                            </Typography>\r\n                            {tasks[selectedIndex].subtasks.length < 1 ? null :\r\n                                <div>\r\n                                    <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n                                    <Typography noWrap variant=\"subtitle1\">\r\n                                        Subtasks:\r\n                                    </Typography>\r\n                                    {tasks[selectedIndex].subtasks.map((subtask, index) => (\r\n                                        <Accordion\r\n                                            expanded={expandedSubTask === subtask.id}\r\n                                            onChange={handleSubTaskExpand(subtask.id)}\r\n                                            key={subtask.id}\r\n                                            className={classes.subtaskAccordion}\r\n                                        >\r\n                                            <AccordionSummary\r\n                                                expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                            >\r\n                                                <Typography>\r\n                                                    {subtask.name}\r\n                                                </Typography>\r\n                                            </AccordionSummary>\r\n                                            <AccordionDetails>\r\n                                                {subtask.description}\r\n                                            </AccordionDetails>\r\n                                        </Accordion>\r\n                                    ))}\r\n                                </div>\r\n                            }\r\n\r\n\r\n                        </CardContent>\r\n                        <div className={classes.buttonSection}>\r\n                            <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n                            <ButtonGroup variant=\"contained\" color=\"primary\" ref={anchorRef}>\r\n                                <Button onClick={hendleChangeStatus}>{allowedStatuses[statusSelIndex].name}</Button>\r\n                                <Button\r\n                                    color=\"primary\"\r\n                                    size=\"small\"\r\n                                    aria-controls={openStatusSel ? 'split-button-menu' : undefined}\r\n                                    aria-expanded={openStatusSel ? 'true' : undefined}\r\n                                    aria-label=\"select merge strategy\"\r\n                                    aria-haspopup=\"menu\"\r\n                                    onClick={handleStatSellToggle}\r\n                                >\r\n                                    <ArrowDropDownIcon />\r\n                                </Button>\r\n                            </ButtonGroup>\r\n                            <Popper open={openStatusSel} anchorEl={anchorRef.current} role={undefined} transition disablePortal>\r\n                                {({ TransitionProps, placement }) => (\r\n                                    <Grow\r\n                                        {...TransitionProps}\r\n                                        style={{\r\n                                            transformOrigin: placement === 'bottom' ? 'center top' : 'center bottom',\r\n                                        }}\r\n                                    >\r\n                                        <Paper>\r\n                                            <ClickAwayListener onClickAway={handleStatSellClose}>\r\n                                                <MenuList id=\"split-button-menu\">\r\n                                                    {allowedStatuses.map((option, index) => (\r\n                                                        <MenuItem\r\n                                                            key={option.name}\r\n                                                            //  disabled={index === 2}\r\n                                                            selected={index === statusSelIndex}\r\n                                                            onClick={(event) => handleMenuItemClick(event, index)}\r\n                                                        >\r\n                                                            {option.name}\r\n                                                        </MenuItem>\r\n                                                    ))}\r\n                                                </MenuList>\r\n                                            </ClickAwayListener>\r\n                                        </Paper>\r\n                                    </Grow>\r\n                                )}\r\n                            </Popper>\r\n\r\n                        </div>\r\n                    </Card>\r\n                </div>\r\n            }\r\n        </div >\r\n    );\r\n}\r\nexport default TasksList;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Teams\\TeamTasks.js",["138","139","140"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport APIURL from '../../Services/Globals';\r\nimport { getTasks, changeTaskStatus } from \"../../Services/TasksService\";\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\nimport TasksList from \"../Tasks/TasksList\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n\r\n}));\r\n\r\nconst leaderID = getCurrentUser().userDetails.employeeDTO.id;\r\nconst TeamTasks = () => {\r\n    const classes = useStyles();\r\n    const [team, setTeam] = useState({});\r\n\r\n    useEffect(() => {\r\n        getTeam();\r\n    }, []);\r\n\r\n    const getTeam = () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        fetch(APIURL + `teams/leader/${leaderID}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (\r\n                setTeam(data)\r\n            ));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {team.id === undefined ? null :\r\n                <TasksList teamId={team.id} />\r\n            }\r\n        </div>\r\n    );\r\n}\r\nexport default TeamTasks;","C:\\Users\\Komputer\\source\\repos\\HumanResourcesManager\\human-resources-manager-client\\src\\Components\\Tasks\\CreateTask.js",["141","142","143","144","145"],"import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { DarkTextField, DarkSelect, DarkChipList } from '../GlobalComponents';\r\nimport APIURL from '../../Services/Globals'\r\nimport { getCurrentUser } from '../../Services/AuthService';\r\n\r\nimport { Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AddCircleIcon from '@material-ui/icons/AddCircle';\r\nimport { KeyboardDatePicker, MuiPickersUtilsProvider } from '@material-ui/pickers';\r\nimport MomentUtils from \"@date-io/moment\";\r\nimport moment from \"moment\";\r\nimport Modal from '@material-ui/core/Modal';\r\nimport Backdrop from '@material-ui/core/Backdrop';\r\nimport Fade from '@material-ui/core/Fade';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport MuiAlert from '@material-ui/lab/Alert';\r\n\r\nfunction Alert(props) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    mainConteiner: {\r\n        marginTop: \"1.8rem\",\r\n        background: theme.palette.grey[800],\r\n        paddingBottom: '20px'\r\n    },\r\n    title: {\r\n        color: theme.palette.text.primary,\r\n        textAlign: 'center',\r\n        padding: '1px',\r\n        backgroundColor: theme.palette.primary.main,\r\n        boxShadow: theme.shadows[2],\r\n    },\r\n    formGrid: {\r\n        display: \"grid\",\r\n        gridTemplateColumns: \"1fr 1fr\",\r\n        gridTemplateRows: \"1fr 1fr 1fr\",\r\n        justifyContent: \"space-between\",\r\n        alignContent: \"space-between\",\r\n        gridGap: \"0.7rem 0.7rem\",\r\n    },\r\n    nameInput: {\r\n        gridRowStart: '1',\r\n        gridColumnStart: '1',\r\n        gridRowEnd: '2',\r\n        gridColumnEnd: '3',\r\n        display: \"grid\",\r\n    },\r\n    descriptionInput: {\r\n        gridRowStart: '2',\r\n        gridColumnStart: '1',\r\n        gridRowEnd: '3',\r\n        gridColumnEnd: '3',\r\n        display: \"grid\"\r\n    },\r\n    datePickerST: {\r\n        marginTop: '0',\r\n        marginLeft: \"20px\",\r\n        gridRowStart: '3',\r\n        gridColumnStart: '1',\r\n        gridRowEnd: '4',\r\n        gridColumnEnd: '2',\r\n    },\r\n    datePickerD: {\r\n        marginTop: '0',\r\n        marginRight: '8px',\r\n        gridRowStart: '3',\r\n        gridColumnStart: '2',\r\n        gridRowEnd: '4',\r\n        gridColumnEnd: '3',\r\n    },\r\n    addSubtaskButton: {\r\n        width: '10rem',\r\n    },\r\n    subtasksContainer: {\r\n        display: 'grid',\r\n        gridRowStart: '4',\r\n        gridColumnStart: '1',\r\n        gridRowEnd: '5',\r\n        gridColumnEnd: '3',\r\n        padding: '20px',\r\n        paddingTop: '0px'\r\n    },\r\n    createButton: {\r\n        margin: '0 auto',\r\n        display: 'block',\r\n        width: \"19rem\",\r\n    },\r\n    subtaskAccordion: {\r\n        backgroundColor: '#bdbdbd',\r\n        color: \"black\",\r\n        marginTop: \"8px\",\r\n        marginBottom: '4px',\r\n        borderRadius: '4px',\r\n        padding: '0px',\r\n        '&::before': {\r\n            height: 0\r\n        }\r\n    },\r\n    modal: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    },\r\n    modalContent: {\r\n        color: \"white\",\r\n        backgroundColor: \"#424242\",\r\n        boxShadow: theme.shadows[2],\r\n        padding: theme.spacing(2, 4, 3),\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        justifyContent: \"space-between\",\r\n        minWidth: \"260px\",\r\n        minHeight: \"280px\",\r\n    },\r\n}));\r\n\r\nconst leaderID = getCurrentUser().userDetails.employeeDTO.id;\r\nconst CreateTask = () => {\r\n    const classes = useStyles();\r\n    const [task, setTask] = useState({})\r\n    const [subtasks, setSubtasks] = useState([])\r\n    const [newSubtask, setNewSubtask] = useState({})\r\n    const [expandedSubTask, setExpandedSubTask] = useState('');\r\n    const [allEmployees, setAllEmployees] = useState([])\r\n    const [employeesToAssign, setEmployeesToAssign] = useState([])\r\n    const [modalIsOpen, setModalIsOpen] = useState(false);\r\n    const [allertProps, setAllertProps] = useState({\r\n        text: '',\r\n        open: false\r\n    });\r\n\r\n\r\n    useEffect(() => {\r\n        getMembers();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setTask({\r\n            ...task,\r\n            subtasks: subtasks\r\n        })\r\n    }, [subtasks]);\r\n\r\n\r\n    useEffect(() => {\r\n        if (employeesToAssign.length === 1) {\r\n            setTask({\r\n                ...task,\r\n                assignedEmployeeId: employeesToAssign[0].id,\r\n            })\r\n        } else\r\n            setTask({\r\n                ...task,\r\n                assignedEmployeeId: 0,\r\n            })\r\n    }, [employeesToAssign]);\r\n\r\n    const getMembers = () => {\r\n        const requestOptions = {\r\n            method: 'Get',\r\n            headers: { 'Content-Type': 'application/json' }\r\n        };\r\n        fetch(APIURL + `teams/leader/${leaderID}`, requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => (\r\n                data.members.map(member => {\r\n                    setAllEmployees(old => [...old, {\r\n                        id: member.id,\r\n                        name: member.person.name + \" \" + member.person.surname\r\n                    }])\r\n                })\r\n            ));\r\n    }\r\n\r\n    const PostTask = (formData) => {\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify(formData),\r\n        };\r\n        fetch(APIURL + 'tasks', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data),\r\n                setAllertProps({\r\n                    text: \"Task Created\",\r\n                    open: true\r\n                })\r\n            );\r\n    }\r\n\r\n    const PostTasks = (formData) => {\r\n        let employeesId = [];\r\n        employeesToAssign.map(employee => {\r\n            employeesId.push(employee.id);\r\n        })\r\n        const requestOptions = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                employeeTaskDTO: formData,\r\n                employeesID: employeesId\r\n            }),\r\n        };\r\n        fetch(APIURL + 'tasks/multi', requestOptions)\r\n            .then(response => response.json())\r\n            .then(data => console.log(data),\r\n                setAllertProps({\r\n                    text: \"Tasks Created\",\r\n                    open: true\r\n                }));\r\n    }\r\n\r\n    const headleFormChange = e => {\r\n        if (e.target.name === \"employeeSelect\") {\r\n            if (employeesToAssign.length === 0) {\r\n                setEmployeesToAssign([e.target.value]);\r\n            } else {\r\n                let isPicked = false;\r\n                employeesToAssign.forEach(element => {\r\n                    if (element.id === e.target.value.id) {\r\n                        isPicked = true;\r\n                    }\r\n                });\r\n                if (!isPicked) {\r\n                    setEmployeesToAssign([...employeesToAssign, e.target.value]);\r\n                }\r\n            }\r\n        }\r\n\r\n        setTask({\r\n            ...task,\r\n            name: e.target.name === \"taskName\" ? e.target.value : task.name,\r\n            description: e.target.name === \"taskDescription\" ? e.target.value : task.description,\r\n            status: \"Requested\",\r\n            startTime: task.startTime === undefined ? moment().format('yyy-MM-DD') : task.startTime,\r\n            deadline: task.deadline === undefined ? moment().format('yyyy-MM-DD') : task.deadline,\r\n        })\r\n    }\r\n    const headleModalFormChange = e => {\r\n        setNewSubtask({\r\n            ...newSubtask,\r\n            ...task,\r\n            name: e.target.name === \"subtaskName\" ? e.target.value : newSubtask.name,\r\n            description: e.target.name === \"subtaskDescription\" ? e.target.value : newSubtask.description,\r\n            status: \"Requested\",\r\n            startTime: task.startTime === undefined ? moment().format('yyy-MM-DD') : task.startTime,\r\n            deadline: task.deadline === undefined ? moment().format('yyyy-MM-DD') : task.deadline,\r\n        });\r\n    }\r\n\r\n    const hendlePermissionDelete = chipToDelete => {\r\n        setEmployeesToAssign(chips => chips.filter(chip => chip.name !== chipToDelete.name));\r\n    }\r\n\r\n    const hendlePostTask = () => {\r\n        if (employeesToAssign.length === 0) {\r\n            PostTask(task);\r\n            return;\r\n        }\r\n        PostTasks(task);\r\n    }\r\n\r\n    const handleSubTaskExpand = (index) => (event, newExpanded) => {\r\n        setExpandedSubTask(newExpanded ? index : false);\r\n    }\r\n\r\n    const handleModalOpen = () => {\r\n        setModalIsOpen(true);\r\n    };\r\n\r\n    const handleModalClose = () => {\r\n        setModalIsOpen(false);\r\n    };\r\n\r\n    const handleModalConfirm = () => {\r\n        setSubtasks(old => [\r\n            ...old, newSubtask\r\n        ])\r\n        setModalIsOpen(false);\r\n    };\r\n    const subtaskModal = () => {\r\n        return (\r\n            <Modal\r\n                aria-labelledby=\"modal-title\"\r\n                className={classes.modal}\r\n                open={modalIsOpen}\r\n                onClose={handleModalClose}\r\n                closeAfterTransition\r\n                BackdropComponent={Backdrop}\r\n                BackdropProps={{\r\n                    timeout: 500,\r\n                }}\r\n            >\r\n                <Fade in={modalIsOpen}>\r\n                    <div className={classes.modalContent}>\r\n                        <h2 id=\"modal-title\">Create New Subtask</h2>\r\n                        <DarkTextField\r\n                            label=\"Subtask Name\"\r\n                            name=\"subtaskName\"\r\n                            onChange={headleModalFormChange}\r\n                        />\r\n                        <DarkTextField\r\n                            label=\"Description\"\r\n                            maxRows={5}\r\n                            name=\"subtaskDescription\"\r\n                            onChange={headleModalFormChange}\r\n                        />\r\n                        <Button\r\n                            style={{ margin: \"10px\", marginBottom: \"0\" }}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleModalConfirm}\r\n                        >Create</Button>\r\n                    </div>\r\n\r\n                </Fade>\r\n            </Modal>\r\n        );\r\n    }\r\n\r\n    const handleAllertClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n        setAllertProps({ ...allertProps, open: false });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.mainConteiner}>\r\n            {subtaskModal()}\r\n            <Snackbar open={allertProps.open} autoHideDuration={4000} onClose={handleAllertClose}>\r\n                <Alert onClose={handleAllertClose} severity=\"success\">\r\n                    {allertProps.text}\r\n                </Alert>\r\n            </Snackbar>\r\n            <div boxshadow={2} className={classes.title}>\r\n                <h3 >Create New Task</h3>\r\n            </div>\r\n            <form className={classes.root} noValidate autoComplete=\"off\">\r\n                <div className={classes.formGrid}>\r\n                    <div className={classes.nameInput}>\r\n                        <DarkTextField\r\n                            label=\" Task Name\"\r\n                            name=\"taskName\"\r\n                            onChange={headleFormChange}\r\n                        />\r\n                    </div>\r\n                    <div className={classes.descriptionInput} >\r\n                        <DarkTextField\r\n\r\n                            label=\"Description\"\r\n                            maxRows={5}\r\n                            name=\"taskDescription\"\r\n                            onChange={headleFormChange}\r\n                        />\r\n                    </div>\r\n\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <KeyboardDatePicker\r\n                            className={classes.datePickerST}\r\n                            disableToolbar\r\n                            name=\"dateStart\"\r\n                            variant=\"inline\"\r\n                            format=\"yyyy-MM-DD\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Start Time\"\r\n                            value={task.startTime}\r\n                            onChange={(date) => {\r\n                                setTask({ ...task, startTime: date.format('yyyy-MM-DD') })\r\n                            }}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                    <MuiPickersUtilsProvider utils={MomentUtils}>\r\n                        <KeyboardDatePicker\r\n                            className={classes.datePickerD}\r\n                            disableToolbar\r\n                            name=\"dateDeadline\"\r\n                            variant=\"inline\"\r\n                            format=\"yyyy-MM-DD\"\r\n                            margin=\"normal\"\r\n                            id=\"date-picker-inline\"\r\n                            label=\"Deadline\"\r\n                            value={task.Deadline}\r\n                            onChange={(date) => {\r\n                                setTask({ ...task, deadline: date.format('yyyy-MM-DD') })\r\n                            }}\r\n                            KeyboardButtonProps={{\r\n                                'aria-label': 'change date',\r\n                            }}\r\n                        />\r\n                    </MuiPickersUtilsProvider>\r\n                    <div className={classes.subtasksContainer}>\r\n                        <Button\r\n                            className={classes.addSubtaskButton}\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={handleModalOpen}\r\n                            endIcon={<AddCircleIcon />}\r\n                        >Add Subtask</Button>\r\n                        {subtasks.length < 1 ? null :\r\n                            <div >\r\n                                <Divider variant=\"inset\" style={{ width: \"100%\", margin: \"12px\", marginLeft: \"0\" }} />\r\n                                <Typography noWrap variant=\"subtitle1\" style={{ color: \"white\" }}>\r\n                                    Subtasks:\r\n                                </Typography>\r\n                                {subtasks.map((subtask, index) => (\r\n                                    <Accordion\r\n                                        expanded={expandedSubTask === index}\r\n                                        onChange={handleSubTaskExpand(index)}\r\n                                        key={\"subt\" + index}\r\n                                        className={classes.subtaskAccordion}\r\n                                    >\r\n                                        <AccordionSummary\r\n                                            expandIcon={<ExpandMoreIcon style={{ color: \"black\" }} />}\r\n                                        >\r\n                                            <Typography>\r\n                                                {subtask.name}\r\n                                            </Typography>\r\n                                        </AccordionSummary>\r\n                                        <AccordionDetails>\r\n                                            {subtask.description}\r\n                                        </AccordionDetails>\r\n                                    </Accordion>\r\n                                ))}\r\n\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <DarkChipList\r\n                    label=\"Employees\"\r\n                    name=\"employeeSelect\"\r\n                    collection={allEmployees}\r\n                    clipListCollection={employeesToAssign}\r\n                    onChange={headleFormChange}\r\n                    onDelete={hendlePermissionDelete}\r\n                />\r\n                <Button\r\n                    className={classes.createButton}\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={hendlePostTask}\r\n                >Create</Button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\nexport default CreateTask;",{"ruleId":"146","replacedBy":"147"},{"ruleId":"148","replacedBy":"149"},{"ruleId":"150","severity":1,"message":"151","line":2,"column":17,"nodeType":"152","messageId":"153","endLine":2,"endColumn":26},{"ruleId":"150","severity":1,"message":"154","line":2,"column":28,"nodeType":"152","messageId":"153","endLine":2,"endColumn":36},{"ruleId":"150","severity":1,"message":"155","line":3,"column":50,"nodeType":"152","messageId":"153","endLine":3,"endColumn":54},{"ruleId":"156","severity":1,"message":"157","line":246,"column":1,"nodeType":"158","endLine":251,"endColumn":3},{"ruleId":"159","severity":1,"message":"160","line":62,"column":9,"nodeType":"152","messageId":"161","endLine":62,"endColumn":21},{"ruleId":"150","severity":1,"message":"151","line":1,"column":17,"nodeType":"152","messageId":"153","endLine":1,"endColumn":26},{"ruleId":"150","severity":1,"message":"162","line":5,"column":8,"nodeType":"152","messageId":"153","endLine":5,"endColumn":28},{"ruleId":"150","severity":1,"message":"163","line":8,"column":8,"nodeType":"152","messageId":"153","endLine":8,"endColumn":17},{"ruleId":"164","severity":1,"message":"165","line":76,"column":9,"nodeType":"166","messageId":"167","endLine":83,"endColumn":10},{"ruleId":"168","severity":1,"message":"169","line":157,"column":29,"nodeType":"170","endLine":157,"endColumn":45},{"ruleId":"150","severity":1,"message":"171","line":9,"column":8,"nodeType":"152","messageId":"153","endLine":9,"endColumn":17},{"ruleId":"172","severity":1,"message":"173","line":113,"column":9,"nodeType":"174","messageId":"175","endLine":118,"endColumn":10,"fix":"176"},{"ruleId":"172","severity":1,"message":"177","line":119,"column":9,"nodeType":"174","messageId":"175","endLine":124,"endColumn":10,"fix":"178"},{"ruleId":"172","severity":1,"message":"179","line":125,"column":9,"nodeType":"174","messageId":"175","endLine":130,"endColumn":10,"fix":"180"},{"ruleId":"164","severity":1,"message":"165","line":150,"column":21,"nodeType":"166","messageId":"167","endLine":160,"endColumn":22},{"ruleId":"181","severity":1,"message":"182","line":164,"column":8,"nodeType":"183","endLine":164,"endColumn":20,"suggestions":"184"},{"ruleId":"164","severity":1,"message":"165","line":223,"column":9,"nodeType":"166","messageId":"167","endLine":246,"endColumn":10},{"ruleId":"172","severity":1,"message":"185","line":88,"column":13,"nodeType":"174","messageId":"175","endLine":88,"endColumn":49,"fix":"186"},{"ruleId":"181","severity":1,"message":"187","line":90,"column":8,"nodeType":"183","endLine":90,"endColumn":29,"suggestions":"188"},{"ruleId":"181","severity":1,"message":"189","line":102,"column":8,"nodeType":"183","endLine":102,"endColumn":27,"suggestions":"190"},{"ruleId":"181","severity":1,"message":"191","line":106,"column":8,"nodeType":"183","endLine":106,"endColumn":10,"suggestions":"192"},{"ruleId":"193","severity":1,"message":"194","line":118,"column":52,"nodeType":"195","messageId":"196","endLine":118,"endColumn":53},{"ruleId":"181","severity":1,"message":"197","line":58,"column":8,"nodeType":"183","endLine":58,"endColumn":10,"suggestions":"198"},{"ruleId":"150","severity":1,"message":"199","line":11,"column":8,"nodeType":"152","messageId":"153","endLine":11,"endColumn":13},{"ruleId":"150","severity":1,"message":"200","line":17,"column":8,"nodeType":"152","messageId":"153","endLine":17,"endColumn":23},{"ruleId":"150","severity":1,"message":"201","line":19,"column":8,"nodeType":"152","messageId":"153","endLine":19,"endColumn":14},{"ruleId":"181","severity":1,"message":"202","line":106,"column":8,"nodeType":"183","endLine":106,"endColumn":10,"suggestions":"203"},{"ruleId":"181","severity":1,"message":"204","line":117,"column":8,"nodeType":"183","endLine":117,"endColumn":22,"suggestions":"205"},{"ruleId":"193","severity":1,"message":"194","line":126,"column":30,"nodeType":"195","messageId":"196","endLine":126,"endColumn":31},{"ruleId":"206","severity":1,"message":"207","line":128,"column":43,"nodeType":"208","messageId":"209","endLine":128,"endColumn":45},{"ruleId":"206","severity":1,"message":"207","line":164,"column":31,"nodeType":"208","messageId":"209","endLine":164,"endColumn":33},{"ruleId":"210","severity":1,"message":"211","line":265,"column":54,"nodeType":"212","messageId":"213","endLine":265,"endColumn":55},{"ruleId":"150","severity":1,"message":"201","line":16,"column":8,"nodeType":"152","messageId":"153","endLine":16,"endColumn":14},{"ruleId":"193","severity":1,"message":"194","line":131,"column":52,"nodeType":"195","messageId":"196","endLine":131,"endColumn":53},{"ruleId":"150","severity":1,"message":"214","line":12,"column":11,"nodeType":"152","messageId":"153","endLine":12,"endColumn":29},{"ruleId":"150","severity":1,"message":"215","line":4,"column":10,"nodeType":"152","messageId":"153","endLine":4,"endColumn":24},{"ruleId":"150","severity":1,"message":"216","line":17,"column":8,"nodeType":"152","messageId":"153","endLine":17,"endColumn":12},{"ruleId":"181","severity":1,"message":"217","line":234,"column":8,"nodeType":"183","endLine":234,"endColumn":10,"suggestions":"218"},{"ruleId":"181","severity":1,"message":"219","line":240,"column":8,"nodeType":"183","endLine":240,"endColumn":30,"suggestions":"220"},{"ruleId":"164","severity":1,"message":"165","line":309,"column":13,"nodeType":"166","messageId":"167","endLine":346,"endColumn":14},{"ruleId":"150","severity":1,"message":"221","line":4,"column":10,"nodeType":"152","messageId":"153","endLine":4,"endColumn":18},{"ruleId":"150","severity":1,"message":"222","line":4,"column":20,"nodeType":"152","messageId":"153","endLine":4,"endColumn":36},{"ruleId":"150","severity":1,"message":"223","line":14,"column":11,"nodeType":"152","messageId":"153","endLine":14,"endColumn":18},{"ruleId":"150","severity":1,"message":"224","line":3,"column":25,"nodeType":"152","messageId":"153","endLine":3,"endColumn":35},{"ruleId":"181","severity":1,"message":"225","line":148,"column":8,"nodeType":"183","endLine":148,"endColumn":18,"suggestions":"226"},{"ruleId":"181","severity":1,"message":"225","line":162,"column":8,"nodeType":"183","endLine":162,"endColumn":27,"suggestions":"227"},{"ruleId":"206","severity":1,"message":"207","line":172,"column":41,"nodeType":"208","messageId":"209","endLine":172,"endColumn":43},{"ruleId":"206","severity":1,"message":"207","line":199,"column":40,"nodeType":"208","messageId":"209","endLine":199,"endColumn":42},"no-native-reassign",["228"],"no-negated-in-lhs",["229"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'useState' is defined but never used.","'Link' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-const-assign","'allowedViews' is constant.","const","'CreateJobApplication' is defined but never used.","'LoginUser' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","react/jsx-pascal-case","Imported JSX component HR_Dashboard must be in PascalCase or SCREAMING_SNAKE_CASE","JSXOpeningElement","'CardMedia' is defined but never used.","no-useless-computed-key","Unnecessarily computed property ['requested'] found.","Property","unnecessarilyComputedProperty",{"range":"230","text":"231"},"Unnecessarily computed property ['inprogress'] found.",{"range":"232","text":"233"},"Unnecessarily computed property ['completed'] found.",{"range":"234","text":"235"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'adddItemsToColumn'. Either include it or remove the dependency array.","ArrayExpression",["236"],"Unnecessarily computed property ['permissions'] found.",{"range":"237","text":"238"},"React Hook useEffect has a missing dependency: 'employee'. Either include it or remove the dependency array. You can also do a functional update 'setEmployee(e => ...)' if you only need 'employee' in the 'setEmployee' call.",["239"],"React Hook useEffect has a missing dependency: 'getEmploees'. Either include it or remove the dependency array.",["240"],"React Hook useEffect has a missing dependency: 'getSearchProps'. Either include it or remove the dependency array.",["241"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","React Hook useEffect has a missing dependency: 'params.id'. Either include it or remove the dependency array.",["242"],"'Paper' is defined but never used.","'TablePagination' is defined but never used.","'Button' is defined but never used.","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["243"],"React Hook useEffect has a missing dependency: 'team.members'. Either include it or remove the dependency array.",["244"],"array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","'PostJobApplication' is assigned a value but never used.","'getCurrentUser' is defined but never used.","'Icon' is defined but never used.","React Hook useEffect has missing dependencies: 'filterParams', 'loadTasksList', 'pagination.page', and 'pagination.size'. Either include them or remove the dependency array.",["245"],"React Hook useEffect has a missing dependency: 'props.teamId'. Either include it or remove the dependency array.",["246"],"'getTasks' is defined but never used.","'changeTaskStatus' is defined but never used.","'classes' is assigned a value but never used.","'DarkSelect' is defined but never used.","React Hook useEffect has a missing dependency: 'task'. Either include it or remove the dependency array. You can also do a functional update 'setTask(t => ...)' if you only need 'task' in the 'setTask' call.",["247"],["248"],"no-global-assign","no-unsafe-negation",[3539,3552],"'requested'",[3706,3720],"'inprogress'",[3879,3892],"'completed'",{"desc":"249","fix":"250"},[2480,2495],"'permissions'",{"desc":"251","fix":"252"},{"desc":"253","fix":"254"},{"desc":"255","fix":"256"},{"desc":"257","fix":"258"},{"desc":"259","fix":"260"},{"desc":"261","fix":"262"},{"desc":"263","fix":"264"},{"desc":"265","fix":"266"},{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},"Update the dependencies array to be: [adddItemsToColumn, taskFilter]",{"range":"271","text":"272"},"Update the dependencies array to be: [employee, employeePermissions]",{"range":"273","text":"274"},"Update the dependencies array to be: [getEmploees, page, rowsPerPage]",{"range":"275","text":"276"},"Update the dependencies array to be: [getSearchProps]",{"range":"277","text":"278"},"Update the dependencies array to be: [params.id]",{"range":"279","text":"280"},"Update the dependencies array to be: [getData]",{"range":"281","text":"282"},"Update the dependencies array to be: [currentTasks, team.members]",{"range":"283","text":"284"},"Update the dependencies array to be: [filterParams, loadTasksList, pagination.page, pagination.size]",{"range":"285","text":"286"},"Update the dependencies array to be: [props.teamId, selectedIndex, tasks]",{"range":"287","text":"288"},"Update the dependencies array to be: [subtasks, task]",{"range":"289","text":"290"},"Update the dependencies array to be: [employeesToAssign, task]",{"range":"291","text":"292"},[5086,5098],"[adddItemsToColumn, taskFilter]",[2537,2558],"[employee, employeePermissions]",[3564,3583],"[getEmploees, page, rowsPerPage]",[3645,3647],"[getSearchProps]",[1527,1529],"[params.id]",[3393,3395],"[getData]",[3755,3769],"[currentTasks, team.members]",[7744,7746],"[filterParams, loadTasksList, pagination.page, pagination.size]",[7949,7971],"[props.teamId, selectedIndex, tasks]",[4448,4458],"[subtasks, task]",[4791,4810],"[employeesToAssign, task]"]